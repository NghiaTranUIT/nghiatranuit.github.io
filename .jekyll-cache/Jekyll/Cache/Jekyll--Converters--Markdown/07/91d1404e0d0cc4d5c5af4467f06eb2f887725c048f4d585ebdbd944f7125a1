I"T=<p>Hello my friend, this is my first time I have written blog about iOS. With 2 year exp develop iOS app.</p>

<p>There are many thing I learned from ebook and internet. I think right now is the best time  I should start to share everything I know to you.</p>

<p><code class="language-plaintext highlighter-rouge">When you teach someone, you learn twice !</code></p>

<p>In this blog, I will focus to something hide in Cocoa framework.</p>

<p>If you are a experienced developer iOS, even you are beginner. I think this blog is worth reading. Trust me ;]</p>

<h1 id="i-divide-my-blog-to-many-section">I divide my blog to many Section.</h1>

<p>You can extent and close easily. Making my blog is clearly.</p>

<h2 id="override-description">Override Description</h2>

<p>NSLog is useful method when you wanna know object’ information when debugging.</p>

<p>NSLog is supported log many object in Cocoa framework like NSString, NSArray, NSDictionary,… and many class in UIKit.</p>

<p>But if you have custom object, when you log it.</p>

<p>It is just log what class your object is and your object’s address in memory. Sometime, It don’t have enough what you want.</p>

<p>So there is a simple way to approach it.</p>

<p>Just override <code class="language-plaintext highlighter-rouge">-(NSString *) description</code>.</p>

<p>Here is sample :</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@interface</span> <span class="nc">MyClass</span> <span class="p">:</span> <span class="nc">NSObject</span>
 
<span class="k">@property</span> <span class="p">(</span><span class="n">strong</span><span class="p">,</span> <span class="n">nonautomatic</span><span class="p">)</span> <span class="n">NSString</span> <span class="o">*</span><span class="n">myInfo</span><span class="p">;</span>
 
<span class="k">@property</span> <span class="p">(</span><span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">myFloat</span><span class="p">;</span>
 
<span class="k">@end</span>
 
<span class="c1">// Your&amp;nbsp;implementation</span>
 
<span class="k">@implementation</span><span class="err">&amp;</span><span class="nc">nbsp</span><span class="p">;</span><span class="n">MyClass</span>
<span class="k">-</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span> <span class="n">description</span> <span class="c1">// Override this method</span>
<span class="p">{</span>
     <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nf">stringWithFormat</span><span class="p">:</span><span class="s">@"This is my description with custom info | myInfo = %@ , myFloat = %.2f "</span><span class="p">,</span><span class="n">_myInfo</span><span class="p">,</span><span class="n">_myFloat</span><span class="p">)];</span>
<span class="p">}</span>
<span class="k">@end</span>
</code></pre></div></div>

<p>And your log like this :</p>

<table>
  <tbody>
    <tr>
      <td>This is my description with custom info</td>
      <td>myInfo = NghiaTran , myFloat = 10.0</td>
    </tr>
  </tbody>
</table>

<p>So, when you need more information when log custom object, you just override it simply.</p>

<p><strong>NSExpression</strong></p>

<p>Stand back, I’m going to try math.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSString</span> <span class="o">*</span><span class="n">mathExpression</span> <span class="o">=</span> <span class="s">@"3 + 5 *(12 - 6) / 100 + 2e10"</span>
</code></pre></div></div>

<p>If this is your exercises, it’s very solve it.</p>

<p>But Can you solve this expression by your code ?</p>

<p>Whoa, this is NOT easily. But in Cocoa has some special for you.</p>

<p>NSExpression is a recuse.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSString</span> <span class="o">*</span><span class="n">mathExpression</span> <span class="o">=</span> <span class="s">@"3 + 5 *(12 - 6) / 100 + 2e10"</span>
 
<span class="n">NSExpression</span> <span class="o">*</span><span class="n">e</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSExpression</span> <span class="nf">expressionWithFormat</span><span class="p">:</span><span class="n">mathExpression</span><span class="p">,</span> <span class="nb">nil</span><span class="p">];</span>
 
<span class="n">NSNumber</span> <span class="o">*</span><span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">e</span> <span class="nf">expressionValueWithObject</span><span class="p">:</span><span class="nb">nil</span> <span class="nf">context</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</code></pre></div></div>

<p>This class solve more than easily.</p>

<p>Don’t need a big program with many method, analystic in it.</p>

<p>This save your day.</p>

<p><strong>Trick</strong></p>

<p>I collect useful trick when you deal with Collection like NSArray, NSDictionary.</p>

<p>Reverse array quickly inline.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSArray</span> <span class="o">*</span><span class="n">numbers</span> <span class="o">=</span> <span class="p">@[</span> <span class="mi">@1</span><span class="p">,</span> <span class="mi">@2</span><span class="p">,</span> <span class="mi">@3</span> <span class="p">];</span>
 
<span class="n">NSArray</span> <span class="o">*</span><span class="n">reversed</span> <span class="o">=</span> <span class="n">numbers</span><span class="p">.</span><span class="n">reverseObjectEnumerator</span><span class="p">.</span><span class="n">allObjects</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="nsvalue">NSValue</h3>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">typedef</span> <span class="k">struct</span> <span class="n">RGB</span>
 
<span class="p">{</span>
 
<span class="kt">float</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span><span class="p">;</span>
 
<span class="p">}</span> <span class="n">_RBG</span><span class="p">;</span>
 
<span class="n">RGB</span> <span class="n">color</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="p">,</span> <span class="mi">1</span><span class="p">.</span><span class="mi">0</span> <span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
 
<span class="c1">// Use NSValue to hold your struct</span>
 
<span class="n">NSValue</span> <span class="o">*</span><span class="n">myStruct</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSValue</span> <span class="nf">valueWithBytes</span><span class="p">:</span><span class="o">&amp;</span><span class="n">color</span> <span class="nf">objCType</span><span class="p">:</span><span class="k">@encode</span><span class="p">(</span><span class="n">RGB</span><span class="p">)];</span>
</code></pre></div></div>

<h3 id="key-value-coding">Key-value coding</h3>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSArray</span> <span class="o">*</span><span class="n">arrString</span> <span class="o">=</span> <span class="p">@{</span><span class="s">@"first"</span><span class="p">,</span><span class="s">@"second"</span><span class="p">,</span><span class="s">@"third"</span><span class="p">};</span>
 
<span class="c1">// Convert all member in array to UpperCase</span>
 
<span class="p">[</span><span class="n">arrString</span> <span class="nf">valueForKey</span><span class="p">:</span><span class="s">@"uppercaseString"</span><span class="p">]</span>
 
<span class="c1">// And log like this</span>
 
<span class="c1">// {FIRST, SECOND, THIRD}</span>
</code></pre></div></div>

<p><strong>NSDataDetector</strong></p>

<p>In some situation, your app should detect what is useful info in a long email or note.</p>

<p><img src="https://raw.githubusercontent.com/NghiaTranUIT/nghiatranuit.github.io/master/resources/2014/06/HiddenGem_1.png?resize=845%2C416" alt="HiddenGem_1" /></p>

<p>to</p>

<p><img src="https://raw.githubusercontent.com/NghiaTranUIT/nghiatranuit.github.io/master/resources/2014/06/HiddenGem_2.png?resize=841%2C408" alt="HiddenGem_2" /></p>

<p>Cocoa have awesome class – NSDataDetector was built-in.</p>

<p>NSDataDetector can detect :</p>

<ol>
  <li>Dates</li>
  <li>Link</li>
  <li>Phone Number</li>
  <li>Address</li>
  <li>Transit infomation</li>
</ol>

<p>Here is example :</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="s">@"123 Main St. / (555) 555-5555"</span><span class="p">;</span>
 
<span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
 
<span class="n">NSDataDetector</span> <span class="o">*</span><span class="n">detector</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSDataDetector</span> <span class="nf">dataDetectorWithTypes</span><span class="p">:</span><span class="n">NSTextCheckingTypeLink</span> <span class="o">|</span> <span class="n">NSTextCheckingTypePhoneNumber</span> <span class="nf">error</span><span class="p">:</span><span class="o">&amp;</span><span class="n">error</span><span class="p">];</span>
 
<span class="p">[</span><span class="n">detector</span> <span class="nf">enumerateMatchesInString</span><span class="p">:</span><span class="n">string</span> <span class="nf">options</span><span class="p">:</span><span class="n">kNilOptions</span> <span class="n">range</span><span class="o">:</span><span class="n">NSMakeRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">[</span><span class="n">string</span> <span class="nf">length</span><span class="p">])</span> <span class="n">usingBlock</span><span class="o">:^</span><span class="p">(</span><span class="n">NSTextCheckingResult</span> <span class="o">*</span><span class="n">result</span><span class="p">,</span> <span class="n">NSMatchingFlags</span> <span class="n">flags</span><span class="p">,</span> <span class="n">BOOL</span> <span class="o">*</span><span class="n">stop</span><span class="p">)</span> <span class="p">{</span>
 
<span class="n">NSLog</span><span class="p">(</span><span class="s">@"Match: %@"</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
 
<span class="p">}];</span>
</code></pre></div></div>

<p><strong>CFStringTransform</strong></p>

<p>Have ever you hear or used CFStringTransform in your app ?</p>

<p>This is the last Gem in Cocoa I will show you.</p>

<p>It will strip accents and diacritics. It will name Unicode characters. It will encode XML hex entities which is useful if you’re ever, you know, making XML or decoding XML.</p>

<p>And you can also transliterate between writing systems which is kind of mind-blowing whenever you see it in action.</p>

<p>So here it is, meet CFStringTransform.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Boolean</span> <span class="nf">CFStringTransform</span> <span class="p">(</span>
 
<span class="n">CFMutableStringRef</span> <span class="n">string</span><span class="p">,</span>
 
<span class="n">CFRange</span> <span class="o">*</span><span class="n">range</span><span class="p">,</span>
 
<span class="n">CFStringRef</span> <span class="n">transform</span><span class="p">,</span>
 
<span class="n">Boolean</span> <span class="n">reverse</span>
 
<span class="p">);</span>
</code></pre></div></div>

<ol>
  <li>The first argument Â is a CFMutableStringRef which you should remember NSMutableString is toll-free bridge.</li>
  <li>The second is range of string you want to apply transform. If you want to transform to entity string, you just pass NULL.</li>
  <li>This is a kind of transform.</li>
  <li>And then, some of those transformation can be reverse. Should pass YES if you want or NO</li>
</ol>

<p>Here is the first sample :</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSMutableString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="s">@"Énġlišh låcks iñterêsţing diaçrïtičş"</span> <span class="nf">mutableCopy</span><span class="p">];</span>
 
<span class="n">CFStringTransform</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFMutableStringRef</span><span class="p">)(</span><span class="n">string</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">kCFStringTransformStripCombiningMarks</span><span class="p">,</span> <span class="nb">NO</span><span class="p">);</span>
 
<span class="c1">// =&gt; This string will transformÂ to "English lack interesting diacities"</span>
</code></pre></div></div>

<p>Show what about Emoji ?</p>

<p>CFStringTransform can translate Emoji character to english.</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSMutableString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="s">@"&lt;Pig Face&gt;"</span> <span class="nf">mutable</span><span class="p">];</span>
 
<span class="n">CFStringTransform</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFMutableStringRef</span><span class="p">)(</span><span class="n">string</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">kCFStringTransformToUnicodeName</span><span class="p">,</span> <span class="nb">NO</span><span class="p">);</span>
 
<span class="c1">// =&gt; Pig Face</span>
</code></pre></div></div>

<p>The last gem I will show you is a ability to transform non-latin character to latin character.</p>

<p>If mean, if your app has some text in Japanese like “こんにちは” and you want to convert it to pronunciation for speech easily.</p>

<p>Sample :</p>

<div class="language-objc highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">NSMutableString</span> <span class="o">*</span><span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="s">@"こんにちは"</span> <span class="nf">mutableCopy</span><span class="p">];</span>
 
<span class="n">CFStringTransform</span><span class="p">((</span><span class="n">__bridge</span> <span class="n">CFMutableStringRef</span><span class="p">)(</span><span class="n">string</span><span class="p">),</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">kCFStringTransformToLatin</span><span class="p">,</span> <span class="nb">NO</span><span class="p">);</span>
 
<span class="c1">// =&gt; pronunciation of this word is Kon'nichiwa</span>
</code></pre></div></div>

<p>You can gain more User Experience.</p>

<p>So, there are many hidden gem in Cocoa and Cocoa Touch. With it, you can implement awesome featured in your iOS app.</p>

<p>Thank for reading ;]</p>

:ET
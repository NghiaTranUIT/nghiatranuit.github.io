{"data":{"posts":[{"id":553,"title":"\u0110\u00e0 L\u1ea1t, th\u00e0nh ph\u1ed1 m\u1ed9ng m\u01a1!","slug":"da-lat-thanh-pho-mong-mo","markdown":"\nR\u1eddi xa s\u1ef1 \u1ed3n \u00e0o v\u00e0 n\u00e1o nhi\u1ec7t c\u1ee7a S\u00e0i G\u00f2n, \u0110\u00e0 L\u1ea1t c\u00f3 l\u1ebd l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn l\u00fd t\u01b0\u1edfng cho nh\u1eedng ai y\u00eau th\u00edch s\u1ef1 y\u00ean t\u0129nh v\u00e0 m\u1ed9t b\u1ea7u kh\u00f4ng kh\u00ed trong l\u00e0nh!\n\n\u00a0\n\n![DSC_5080](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=716%2C479)\n\nC\u00f3 m\u1ed9t \u0111i\u1ec1u r\u1ea5t \u0111\u1eb7c tr\u01b0ng cho th\u00e0nh ph\u1ed1 n\u00e0y ch\u00ednh l\u00e0 nh\u1eefng con d\u1ed1c ngo\u1eb1n ngo\u00e8o \u0111\u00fang nh\u01b0 l\u1eddi \u00a0b\u00e0i h\u00e1t c\u1ee7a nh\u1ea1c s\u1ef9 Lam Ph\u01b0\u01a1ng \u201cth\u00e0nh ph\u1ed1 n\u00e0o v\u1eeba \u0111i \u0111\u00e3 m\u1ecfi\u2026\u201d\n\n[![DSC02989](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=635%2C476)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC02989.jpg) [![DSC03047](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=669%2C893)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC03047.jpg)\n\n\u0110\u1ebfn v\u1edbi \u0110\u00e0 l\u1ea1t, kh\u00f4ng th\u1ec3 b\u1ecf qua ch\u1ee3 \u0111\u00eam, t\u1eadn h\u01b0\u1edfng c\u00e1i \u1ed3n \u00e0o m\u00e0 kh\u00f4ng x\u00f4 b\u1ed3, nh\u1ea5m nh\u00e1p m\u1ed9t ng\u1ee5m s\u1eefa \u0111\u1eadu n\u00e0nh n\u00f3ng c\u0169ng v\u1edbi c\u00e1i kh\u00f4ng kh\u00ed l\u00e0nh l\u1ea1nh khi\u1ebfn cho s\u1eefa \u0111\u1eadu n\u00e0nh \u1edf \u0111\u00e2y c\u00f3 n\u00e9t \u0111\u1eb7c tr\u01b0ng ri\u00eang\u2026\n\n[![DSC_4967](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=705%2C472)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg)\n\n\u00a0\n\n[![DSC_4962](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4962.jpg?resize=720%2C482)![DSC_4981](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=728%2C487)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg)\n\n\u0110\u00f4i d\u00f2ng t\u00e2m s\u1ef1 t\u00ecm b\u00ecnh y\u00ean l\u00fac n\u1eeda \u0111\u00eam!\n\n\u00a0\n\n\u00a0\n\n\n","html":"<p>R\u1eddi xa s\u1ef1 \u1ed3n \u00e0o v\u00e0 n\u00e1o nhi\u1ec7t c\u1ee7a S\u00e0i G\u00f2n, \u0110\u00e0 L\u1ea1t c\u00f3 l\u1ebd l\u00e0 m\u1ed9t l\u1ef1a ch\u1ecdn l\u00fd t\u01b0\u1edfng cho nh\u1eedng ai y\u00eau th\u00edch s\u1ef1 y\u00ean t\u0129nh v\u00e0 m\u1ed9t b\u1ea7u kh\u00f4ng kh\u00ed trong l\u00e0nh!<\/p>\n<p>&nbsp;<\/p>\n<p><img class=\"aligncenter wp-image-554\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=716%2C479\" alt=\"DSC_5080\" width=\"716\" height=\"479\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?w=3872&amp;ssl=1 3872w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=300%2C201&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=768%2C514&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=1024%2C685&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=1116%2C747&amp;ssl=1 1116w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=806%2C540&amp;ssl=1 806w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=558%2C374&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?resize=655%2C438&amp;ssl=1 655w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?w=1700&amp;ssl=1 1700w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_5080.jpg?w=2550&amp;ssl=1 2550w\" sizes=\"(max-width: 716px) 100vw, 716px\" data-recalc-dims=\"1\" \/><\/p>\n<p>C\u00f3 m\u1ed9t \u0111i\u1ec1u r\u1ea5t \u0111\u1eb7c tr\u01b0ng cho th\u00e0nh ph\u1ed1 n\u00e0y ch\u00ednh l\u00e0 nh\u1eefng con d\u1ed1c ngo\u1eb1n ngo\u00e8o \u0111\u00fang nh\u01b0 l\u1eddi \u00a0b\u00e0i h\u00e1t c\u1ee7a nh\u1ea1c s\u1ef9 Lam Ph\u01b0\u01a1ng &#8220;th\u00e0nh ph\u1ed1 n\u00e0o v\u1eeba \u0111i \u0111\u00e3 m\u1ecfi&#8230;&#8221;<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC02989.jpg\"><img class=\"aligncenter wp-image-555\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=635%2C476\" alt=\"DSC02989\" width=\"635\" height=\"476\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?w=4000&amp;ssl=1 4000w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=300%2C225&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=768%2C576&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=1024%2C768&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=1116%2C837&amp;ssl=1 1116w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=806%2C605&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=558%2C419&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?resize=655%2C491&amp;ssl=1 655w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?w=1700&amp;ssl=1 1700w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC02989.jpg?w=2550&amp;ssl=1 2550w\" sizes=\"(max-width: 635px) 100vw, 635px\" data-recalc-dims=\"1\" \/><\/a> <a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC03047.jpg\"><img class=\"aligncenter wp-image-556\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=669%2C893\" alt=\"DSC03047\" width=\"669\" height=\"893\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?w=3000&amp;ssl=1 3000w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=225%2C300&amp;ssl=1 225w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=768%2C1024&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=1116%2C1488&amp;ssl=1 1116w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=806%2C1075&amp;ssl=1 806w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=558%2C744&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?resize=655%2C873&amp;ssl=1 655w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?w=1700&amp;ssl=1 1700w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC03047.jpg?w=2550&amp;ssl=1 2550w\" sizes=\"(max-width: 669px) 100vw, 669px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>\u0110\u1ebfn v\u1edbi \u0110\u00e0 l\u1ea1t, kh\u00f4ng th\u1ec3 b\u1ecf qua ch\u1ee3 \u0111\u00eam, t\u1eadn h\u01b0\u1edfng c\u00e1i \u1ed3n \u00e0o m\u00e0 kh\u00f4ng x\u00f4 b\u1ed3, nh\u1ea5m nh\u00e1p m\u1ed9t ng\u1ee5m s\u1eefa \u0111\u1eadu n\u00e0nh n\u00f3ng c\u0169ng v\u1edbi c\u00e1i kh\u00f4ng kh\u00ed l\u00e0nh l\u1ea1nh khi\u1ebfn cho s\u1eefa \u0111\u1eadu n\u00e0nh \u1edf \u0111\u00e2y c\u00f3 n\u00e9t \u0111\u1eb7c tr\u01b0ng ri\u00eang&#8230;<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg\"><img class=\"aligncenter wp-image-559\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=705%2C472\" alt=\"DSC_4967\" width=\"705\" height=\"472\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?w=3872&amp;ssl=1 3872w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=300%2C201&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=768%2C514&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=1024%2C685&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=1116%2C747&amp;ssl=1 1116w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=806%2C540&amp;ssl=1 806w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=558%2C374&amp;ssl=1 558w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?resize=655%2C438&amp;ssl=1 655w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?w=1700&amp;ssl=1 1700w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4967.jpg?w=2550&amp;ssl=1 2550w\" sizes=\"(max-width: 705px) 100vw, 705px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg\"><img class=\"aligncenter wp-image-558\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4962.jpg?resize=720%2C482\" alt=\"DSC_4962\" width=\"720\" height=\"482\" data-recalc-dims=\"1\" \/><img class=\"aligncenter wp-image-557\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=728%2C487\" alt=\"DSC_4981\" width=\"728\" height=\"487\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?w=3872&amp;ssl=1 3872w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=300%2C201&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=768%2C514&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=1024%2C685&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=1116%2C747&amp;ssl=1 1116w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=806%2C540&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=558%2C374&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?resize=655%2C438&amp;ssl=1 655w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?w=1700&amp;ssl=1 1700w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/05\/DSC_4981.jpg?w=2550&amp;ssl=1 2550w\" sizes=\"(max-width: 728px) 100vw, 728px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>\u0110\u00f4i d\u00f2ng t\u00e2m s\u1ef1 t\u00ecm b\u00ecnh y\u00ean l\u00fac n\u1eeda \u0111\u00eam!<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/05\/icon_bike1.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 29 May 2014 16:50:23 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:36:46 +0000","updated_by":1,"published_at":"Thu, 29 May 2014 16:50:23 +0000","published_by":1},{"id":569,"title":"Hidden Gem in Cocoa and Cocoa Touch","slug":"hidden-gem-in-cocoa-and-cocoa-touch","markdown":"\n![0_Gems_tutorial_diamond](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond-300x300.jpg?resize=300%2C300)\n\nHello my friend, this is my first time I have written\u00a0blog about iOS. With 2 year exp develop iOS app.\n\nThere are many thing I learned from ebook and internet. I think right now\u00a0is the best time \u00a0I should start to share everything I know to you.\n\n[su_quote]When you teach someone, you learn twice ![\/su_quote]\n\nIn this blog, I will focus to something hide in Cocoa framework.\n\nIf you are a experienced developer iOS, even you are beginner. I think this blog is worth reading. Trust me ;]\n\n\n# I divide my blog to many Section.\n\nYou can extent and close easily. Making my blog is clearly.\n\n\n## Override Description\n\nNSLog is useful method when you wanna know object\u2019 information when debugging.\n\nNSLog is supported log many object in Cocoa framework like NSString, NSArray, NSDictionary,\u2026 and many class in UIKit.\n\nBut if you have custom object, when you log it.\n\nIt is just log what class your object is and your object\u2019s address in memory. Sometime, It don\u2019t have enough what you want.\n\nSo there is a simple way to approach it.\n\nJust override -(<span style=\"color: #703daa;\">NSString<\/span> *) description.\n\nHere is sample :\n\n@interface MyClass : NSObject @property (strong, nonautomatic) NSString *myInfo; @property (assign) CGFloat myFloat; @end \/\/ Your\u00a0implementation @implementation\u00a0MyClass -(NSString *) description \/\/ Override this method { return [NSString stringWithFormat:@\"This is my description with custom info | myInfo = %@ , myFloat = %.2f \",_myInfo,_myFloat)]; } @end\n\nAnd your log like this :\n\nThis is my description with custom info | myInfo = NghiaTran\u00a0, myFloat = 10.0\n\n\u00a0\n\nSo, when you need more information when log custom object, you just override it simply.\n\n**NSExpression**\n\nStand back, I\u2019m going to try math.\n\nNSString *mathExpression = @\"3 + 5 *(12 - 6) \/ 100 + 2e10\"\n\nIf this is your\u00a0exercises, it\u2019s very solve it.\n\nBut Can you solve this expression by your code ?\n\nWhoa, this is NOT easily. But in Cocoa has some special for you.\n\nNSExpression is recuse.\n\nNSString *mathExpression = @\"3 + 5 *(12 - 6) \/ 100 + 2e10\" NSExpression *e = [NSExpression expressionWithFormat:mathExpression, nil]; NSNumber *result = [e expressionValueWithObject:nil context:nil];\n\nThis class solve more than easily.\n\nDon\u2019t need a big program with many method, analystic in it.\n\nThis save your day.\n\n**Trick**\n\nI collect useful trick when you deal with Collection like NSArray, NSDictionary.\n\nReverse array quickly inline.\n\nNSArray *numbers = @[ @1, @2, @3 ]; NSArray *reversed = numbers.reverseObjectEnumerator.allObjects;\n\n### NSValue\n\ntypedef struct RGB { float red, green, blue; } _RBG; RGB color = {1.0 , 1.0 , 0); \/\/ Use NSValue to hold your struct NSValue *myStruct =\u00a0[NSValue valueWithBytes:&color objCType:@encode(RGB)];\n\n### Key-value coding\n\nNSArray *arrString = @{@\"first\",@\"second\",@\"third\"}; \/\/ Convert all member in array to UpperCase [arrString valueForKey:@\"uppercaseString\"] \/\/ And log like this \/\/ {FIRST, SECOND, THIRD}\n\n**NSDataDetector**\n\nIn some situation, your app should detect what is useful info in a long email or note.\n\n![HiddenGem_1](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=845%2C416)\n\nto\n\n[![HiddenGem_2](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=841%2C408)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png)\n\nCocoa have\u00a0awesome class \u2013 NSDataDetector was built-in.\n\nNSDataDetector can detect :\n\n1. Dates\n2. Link\n3. Phone Number\n4. Address\n5. Transit infomation\n\nHere is example :\n\nNSString *string = @\"123 Main St. \/ (555) 555-5555\"; NSError *error; NSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypeLink | NSTextCheckingTypePhoneNumber error:&error]; [detector enumerateMatchesInString:string options:kNilOptions range:NSMakeRange(0, [string length]) usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop) { NSLog(@\"Match: %@\", result); }];\n\n**CFStringTransform**\n\nHave ever you hear or used CFStringTransform in your app ?\n\nThis is the last Gem in Cocoa I will show you.\n\nIt will strip accents and diacritics. It will name Unicode characters. It will encode XML hex entities which is useful if you\u2019re ever, you know, making XML or decoding XML.\n\nAnd you can also transliterate between writing systems which is kind of mind-blowing whenever you see it in action.\n\nSo here it is, meet CFStringTransform.\n\nBoolean CFStringTransform ( CFMutableStringRef string, CFRange *range, CFStringRef transform, Boolean reverse );\n\n1. The first argument \u00c2\u00a0is a CFMutableStringRef which you should remember NSMutableString is toll-free bridge.\n2. The second is range of string you want to apply transform. If you want to transform to entity string, you just pass NULL.\n3. This is a kind of transform.\n4. And then, some of those transformation can be reverse. Should pass YES if you want or NO\n\nHere is the first sample :\n\nNSMutableString *string = [@\"\u00c9n\u0121li\u0161h l\u00e5cks i\u00f1ter\u00eas\u0163ing dia\u00e7r\u00efti\u010d\u015f\" mutableCopy]; CFStringTransform((__bridge CFMutableStringRef)(string), NULL, kCFStringTransformStripCombiningMarks, NO); \/\/ => This string will transform\u00c2\u00a0to \"English lack interesting diacities\"\n\nShow what about Emoji ?\n\nCFStringTransform can translate Emoji character to english.\n\nNSMutableString *string = [@\"<Pig Face>\" mutable]; CFStringTransform((__bridge CFMutableStringRef)(string), NULL, kCFStringTransformToUnicodeName, NO); \/\/ => Pig Face\n\nThe last gem I will show you is a ability to transform non-latin character to latin character.\n\nIf mean, if your app has some text in Japanese like \u201c\u3053\u3093\u306b\u3061\u306f\u201d and you want to convert it to pronunciation for speech easily.\n\nSample :\n\nNSMutableString *string = [@\"\u3053\u3093\u306b\u3061\u306f\" mutableCopy]; CFStringTransform((__bridge CFMutableStringRef)(string), NULL, kCFStringTransformToLatin, NO); \/\/ =>\u00a0pronunciation of this word is\u00a0Kon'nichiwa\n\nYou can gain more User Experience.\n\nSo, there are many hidden gem in Cocoa and Cocoa Touch. With it, you can implement awesome featured in your iOS app.\n\nThank for reading ;]\n\n\n","html":"<p><img class=\"size-medium wp-image-591 aligncenter\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond-300x300.jpg?resize=300%2C300\" alt=\"0_Gems_tutorial_diamond\" width=\"300\" height=\"300\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Hello my friend, this is my first time I have written\u00a0blog about iOS. With 2 year exp develop iOS app.<\/p>\n<p>There are many thing I learned from ebook and internet. I think right now\u00a0is the best time \u00a0I should start to share everything I know to you.<\/p>\n<p>[su_quote]When you teach someone, you learn twice ![\/su_quote]<\/p>\n<p>In this blog, I will focus to something hide in Cocoa framework.<\/p>\n<p>If you are a experienced developer iOS, even you are beginner. I think this blog is worth reading. Trust me ;]<\/p>\n<h1>I divide my blog to many Section.<\/h1>\n<p>You can extent and close easily. Making my blog is clearly.<\/p>\n<h2>Override Description<\/h2>\n<p>NSLog is useful method when you wanna know object&#8217; information when debugging.<\/p>\n<p>NSLog is supported log many object in Cocoa framework like NSString, NSArray, NSDictionary,&#8230; and many class in UIKit.<\/p>\n<p>But if you have custom object, when you log it.<\/p>\n<p>It is just log what class your object is and your object&#8217;s address in memory. Sometime, It don&#8217;t have enough what you want.<\/p>\n<p>So there is a simple way to approach it.<\/p>\n<p>Just override -(<span style=\"color: #703daa;\">NSString<\/span> *) description.<\/p>\n<p>Here is sample :<\/p>\n<pre class=\"show-plain:3 lang:objc decode:true\">@interface MyClass : NSObject\r\n\r\n@property (strong, nonautomatic) NSString *myInfo;\r\n\r\n@property (assign) CGFloat myFloat;\r\n\r\n@end\r\n\r\n\/\/ Your&amp;nbsp;implementation\r\n\r\n@implementation&amp;nbsp;MyClass\r\n-(NSString *) description \/\/ Override this method\r\n{\r\n     return [NSString stringWithFormat:@\"This is my description with custom info | myInfo = %@ , myFloat = %.2f \",_myInfo,_myFloat)];\r\n}\r\n@end<\/pre>\n<p>And your log like this :<\/p>\n<pre class=\"lang:default decode:true \">This is my description with custom info | myInfo = NghiaTran\u00a0, myFloat = 10.0<\/pre>\n<p>&nbsp;<\/p>\n<p>So, when you need more information when log custom object, you just override it simply.<\/p>\n<p><strong>NSExpression<\/strong><\/p>\n<p>Stand back, I&#8217;m going to try math.<\/p>\n<pre class=\"lang:objc decode:true\">NSString *mathExpression = @\"3 + 5 *(12 - 6) \/ 100 + 2e10\"<\/pre>\n<p>If this is your\u00a0exercises, it&#8217;s very solve it.<\/p>\n<p>But Can you solve this expression by your code ?<\/p>\n<p>Whoa, this is NOT easily. But in Cocoa has some special for you.<\/p>\n<p>NSExpression is recuse.<\/p>\n<pre class=\"lang:objc decode:true\">NSString *mathExpression = @\"3 + 5 *(12 - 6) \/ 100 + 2e10\"\r\n\r\nNSExpression *e = [NSExpression expressionWithFormat:mathExpression, nil];\r\n\r\nNSNumber *result = [e expressionValueWithObject:nil context:nil];<\/pre>\n<p>This class solve more than easily.<\/p>\n<p>Don&#8217;t need a big program with many method, analystic in it.<\/p>\n<p>This save your day.<\/p>\n<p><strong>Trick<\/strong><\/p>\n<p>I collect useful trick when you deal with Collection like NSArray, NSDictionary.<\/p>\n<p>Reverse array quickly inline.<\/p>\n<pre class=\"lang:objc decode:true\">NSArray *numbers = @[ @1, @2, @3 ];\r\n\r\nNSArray *reversed = numbers.reverseObjectEnumerator.allObjects;<\/pre>\n<h3>NSValue<\/h3>\n<pre class=\"lang:objc decode:true\">typedef struct RGB\r\n\r\n{\r\n\r\nfloat red, green, blue;\r\n\r\n} _RBG;\r\n\r\nRGB color = {1.0 , 1.0 , 0);\r\n\r\n\/\/ Use NSValue to hold your struct\r\n\r\nNSValue *myStruct =\u00a0[NSValue valueWithBytes:&amp;color objCType:@encode(RGB)];<\/pre>\n<h3>Key-value coding<\/h3>\n<pre class=\"lang:objc decode:true\">NSArray *arrString = @{@\"first\",@\"second\",@\"third\"};\r\n\r\n\/\/ Convert all member in array to UpperCase\r\n\r\n[arrString valueForKey:@\"uppercaseString\"]\r\n\r\n\/\/ And log like this\r\n\r\n\/\/ {FIRST, SECOND, THIRD}<\/pre>\n<p><strong>NSDataDetector<\/strong><\/p>\n<p>In some situation, your app should detect what is useful info in a long email or note.<\/p>\n<p><img class=\"aligncenter size-full wp-image-588\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=845%2C416\" alt=\"HiddenGem_1\" width=\"845\" height=\"416\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?w=845&amp;ssl=1 845w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=300%2C148&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=768%2C378&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=806%2C397&amp;ssl=1 806w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=558%2C275&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_1.png?resize=655%2C322&amp;ssl=1 655w\" sizes=\"(max-width: 845px) 100vw, 845px\" data-recalc-dims=\"1\" \/><\/p>\n<p>to<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png\"><img class=\"aligncenter size-full wp-image-587\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=841%2C408\" alt=\"HiddenGem_2\" width=\"841\" height=\"408\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?w=841&amp;ssl=1 841w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=300%2C146&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=768%2C373&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=806%2C391&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=558%2C271&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/HiddenGem_2.png?resize=655%2C318&amp;ssl=1 655w\" sizes=\"(max-width: 841px) 100vw, 841px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Cocoa have\u00a0awesome class &#8211; NSDataDetector was built-in.<\/p>\n<p>NSDataDetector can detect :<\/p>\n<ol>\n<li>Dates<\/li>\n<li>Link<\/li>\n<li>Phone Number<\/li>\n<li>Address<\/li>\n<li>Transit infomation<\/li>\n<\/ol>\n<p>Here is example :<\/p>\n<pre class=\"lang:objc decode:true\">NSString *string = @\"123 Main St. \/ (555) 555-5555\";\r\n\r\nNSError *error;\r\n\r\nNSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypeLink | NSTextCheckingTypePhoneNumber error:&amp;error];\r\n\r\n[detector enumerateMatchesInString:string options:kNilOptions range:NSMakeRange(0, [string length]) usingBlock:^(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop) {\r\n\r\nNSLog(@\"Match: %@\", result);\r\n\r\n}];<\/pre>\n<p><strong>CFStringTransform<\/strong><\/p>\n<p>Have ever you hear or used CFStringTransform in your app ?<\/p>\n<p>This is the last Gem in Cocoa I will show you.<\/p>\n<p>It will strip accents and diacritics. It will name Unicode characters. It will encode XML hex entities which is useful if you&#8217;re ever, you know, making XML or decoding XML.<\/p>\n<p>And you can also transliterate between writing systems which is kind of mind-blowing whenever you see it in action.<\/p>\n<p>So here it is, meet CFStringTransform.<\/p>\n<pre class=\"lang:objc decode:true\">Boolean CFStringTransform (\r\n\r\nCFMutableStringRef string,\r\n\r\nCFRange *range,\r\n\r\nCFStringRef transform,\r\n\r\nBoolean reverse\r\n\r\n);<\/pre>\n<ol>\n<li>The first argument \u00c2\u00a0is a CFMutableStringRef which you should remember NSMutableString is toll-free bridge.<\/li>\n<li>The second is range of string you want to apply transform. If you want to transform to entity string, you just pass NULL.<\/li>\n<li>This is a kind of transform.<\/li>\n<li>And then, some of those transformation can be reverse. Should pass YES if you want or NO<\/li>\n<\/ol>\n<p>Here is the first sample :<\/p>\n<pre class=\"lang:objc decode:true\">NSMutableString *string = [@\"\u00c9n\u0121li\u0161h l\u00e5cks i\u00f1ter\u00eas\u0163ing dia\u00e7r\u00efti\u010d\u015f\" mutableCopy];\r\n\r\nCFStringTransform((__bridge CFMutableStringRef)(string), NULL, kCFStringTransformStripCombiningMarks, NO);\r\n\r\n\/\/ =&gt; This string will transform\u00c2\u00a0to \"English lack interesting diacities\"<\/pre>\n<p>Show what about Emoji ?<\/p>\n<p>CFStringTransform can translate Emoji character to english.<\/p>\n<pre class=\"lang:objc decode:true\">NSMutableString *string = [@\"&lt;Pig Face&gt;\" mutable];\r\n\r\nCFStringTransform((__bridge CFMutableStringRef)(string), NULL, kCFStringTransformToUnicodeName, NO);\r\n\r\n\/\/ =&gt; Pig Face<\/pre>\n<p>The last gem I will show you is a ability to transform non-latin character to latin character.<\/p>\n<p>If mean, if your app has some text in Japanese like &#8220;\u3053\u3093\u306b\u3061\u306f&#8221; and you want to convert it to pronunciation for speech easily.<\/p>\n<p>Sample :<\/p>\n<pre class=\"lang:objc decode:true\">NSMutableString *string = [@\"\u3053\u3093\u306b\u3061\u306f\" mutableCopy];\r\n\r\nCFStringTransform((__bridge CFMutableStringRef)(string), NULL, kCFStringTransformToLatin, NO);\r\n\r\n\/\/ =&gt;\u00a0pronunciation of this word is\u00a0Kon'nichiwa<\/pre>\n<p>You can gain more User Experience.<\/p>\n<p>So, there are many hidden gem in Cocoa and Cocoa Touch. With it, you can implement awesome featured in your iOS app.<\/p>\n<p>Thank for reading ;]<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/0_Gems_tutorial_diamond.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 05 Jun 2014 13:37:16 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:42:56 +0000","updated_by":1,"published_at":"Thu, 05 Jun 2014 13:37:16 +0000","published_by":1},{"id":621,"title":"The right way to load content in background thread with TableView","slug":"advanced-issues-the-right-way-to-load-content-in-backgrounds-thread-with-tableview","markdown":"\n![Blog_3](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Blog_3-300x300.jpg?resize=300%2C300)\n\nUITableView is extremely useful class to list content which Apple provide to iOS developer. UITableView use \u201creusable\u201d pattern to handle content in each cell. So it can contain 100+ row with good performance.\n\nThere are many common scenarios when you deal with UITableView.\n\nOne of this is load asynchronous content in cell.\n\nLike this\n\n-(UITableViewCell *) tableView:(UITableView *) tableView cellForRowAtIndexPath:(NSIndexPath *) indexPath { MyCustomeCell *cell = (MyCustomeCell *)[tableView dequeueReusableCellWithIdentifier:@\"Cell\" forIndexPath:indexPath]; \/\/ weak cell __weak MyCustomeCell *weakCell = cell; \/\/ Async dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{ \/\/ Get Image NSURL *url = \/\/ URL link NSData *data = [NSData dataWithContentsOfURL:url]; UIImage *image = [UIImage alloc] initWithData:data]; \/\/ Update UI dispatch_async(dispatch_get_main_queue(), ^{ weakCell.imageView = image; }); }); }\n\nBut, in this code have some issues memory.\n\nImage you have 100 row, each of row you must load async big UIImage. So before cell is being displayed. TableView will call \u201cData Source\u201d which provide cell. And in cellForRowAtIndexPath: will fire async method to load content.\n\nBut if this cell\u00a0is OUT of visible area. The async operation you called is **still doing work**. So when this operation update UI in main thread, this UIImage is unnecessary resource. Sometime, it cause some \u201cbuggy\u201d.\n\n<span style=\"color: #4e4e4e;\">UITableViewCells are often\u00a0<\/span>**reused instances**<span style=\"color: #4e4e4e;\">. This means that cells being loaded into the view may sometimes contain data that was loaded\u00a0originally\u00a0into a completely different cell.<\/span>\n\nSo, to handle this common scenarios. I use NSOperation and NSOperationQueue \u00a0Apple was introduced NSOperationQueue and many relative class in iOS 4. This was build in top of Grand Dispatch Central. But improve more enhancement. NSOperation can be cancel and resume easily.\n\nIn brieft, we will implement step-by-step :\n\n1. Init array or dictionary\n2. In cellForRowAtIndexPath:, we will create NSOperationBlock and add to background thread. You must implement how it do if this operation is NOT cancel. Finally, we add to array or dictionary to usable.\n3. Implement didEndDisplayingCell, this method will be called if cell is OUT of visible area.\n4. Get operation in arr \/ dictionary and cancel. And remove out.\n\nHere is sample :\n\n- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { MyCustomeCell *cell = (MyCustomeCell *)[tableView dequeueReusableCellWithIdentifier:@\"Cell\" forIndexPath:indexPath]; \/\/ Get URL NSURL *url = _arrURL[indexPath.row]; \/\/Create a block operation for loading the image into the profile image view NSBlockOperation *loadImageOperation = [[NSBlockOperation alloc] init]; \/\/Define weak operation so that operation can be referenced from within the block without creating a retain cycle __weak NSBlockOperation *weakOperation = loadImageOperation; [loadImageOperation addExecutionBlock:^(void){ \/\/Some asynchronous work. Once the image is ready, it will load into view on the main queue UIImage *image = [UIImage imageWithData:[NSData dataWithContentsOfURL:url]]; \/\/ Update UI in main thread when completion [[NSOperationQueue mainQueue] addOperationWithBlock:^(void) { \/\/Check for cancelation before proceeding. We use cellForRowAtIndexPath to make sure we get nil for a non-visible cell if (! weakOperation.isCancelled) { MyCustomeCell *theCell = (MyCustomeCell *)[tableView cellForRowAtIndexPath:indexPath]; theCell.imageView.image = image; \/\/ Remove operation [_myDictionary removeObjectForKey:indexPath]; } }]; }]; \/\/Save a reference to the operation in an NSMutableDictionary so that it can be cancelled later on if (url) { [_myDictionary setObject: loadImageOperation forKey:indexPath]; } \/\/Add the operation to the designated background queue if (loadImageOperation) { [_operationQueue loadImageOperation]; } \/\/This would be a good place to assign a placeholder image cell.imageView.image = placeholdImage; return cell; }\n\nand we take advantage in didEndDisplayngCell method.\n\nWe will cancel operation which called in cellForRowAtIndexPath: before.\n\n- (void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath { \/\/Fetch operation that doesn't need executing anymore NSBlockOperation *ongoingDownloadOperation = [_myDictionary objectForKey:indexPath]; \/\/ Ensure ongoingDownloadOperation is not nil if (ongoingDownloadOperation) { \/\/Cancel operation and remove from dictionary [ongoingDownloadOperation cancel]; [_myDictionary removeObjectForKey:indexPath]; } }\n\nSo, this is the best way to handle this scenarios. You can cancel all of operation if you push\u00a0to new UIViewController.\n\n-(void) viewWillDisappeard:(BOOL) animated { \u00a0 \u00a0 [super viewWillDisappeard:animated]; \/\/ Cancel all [_myOperationQueue cancelAllOpeations]; }\n\nFinally, you can improve more performance by setting setMaxConcurrentOperationCount.\n\n[_myOpeationQueue setMaxConcurrentOperationCount:3];\n\n\u00a0\n\nFeel free for giving me your comment or your\u00a0opinion.\n\nThanks for reading ;]\n\n\n","html":"<p><img class=\"size-medium wp-image-629 aligncenter\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Blog_3-300x300.jpg?resize=300%2C300\" alt=\"Blog_3\" width=\"300\" height=\"300\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>UITableView is extremely useful class to list content which Apple provide to iOS developer. UITableView use &#8220;reusable&#8221; pattern to handle content in each cell. So it can contain 100+ row with good performance.<\/p>\n<p>There are many common scenarios when you deal with UITableView.<\/p>\n<p>One of this is load asynchronous content in cell.<\/p>\n<p>Like this<\/p>\n<pre class=\"lang:objc decode:true\">-(UITableViewCell *) tableView:(UITableView *) tableView cellForRowAtIndexPath:(NSIndexPath *) indexPath\r\n{\r\n    MyCustomeCell *cell = (MyCustomeCell *)[tableView dequeueReusableCellWithIdentifier:@\"Cell\" forIndexPath:indexPath];\r\n\r\n    \/\/ weak cell\r\n    __weak MyCustomeCell *weakCell = cell;\r\n    \/\/ Async\r\n    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0), ^{\r\n        \/\/ Get Image\r\n        NSURL *url = \/\/ URL link\r\n        NSData *data = [NSData dataWithContentsOfURL:url];\r\n        UIImage *image = [UIImage alloc] initWithData:data];\r\n\r\n        \/\/ Update UI\r\n        dispatch_async(dispatch_get_main_queue(), ^{\r\n            weakCell.imageView = image;\r\n        });\r\n    });\r\n}<\/pre>\n<p>But, in this code have some issues memory.<\/p>\n<p>Image you have 100 row, each of row you must load async big UIImage. So before cell is being displayed. TableView will call &#8220;Data Source&#8221; which provide cell. And in cellForRowAtIndexPath: will fire async method to load content.<\/p>\n<p>But if this cell\u00a0is OUT of visible area. The async operation you called is <strong>still doing work<\/strong>. So when this operation update UI in main thread, this UIImage is unnecessary resource. Sometime, it cause some &#8220;buggy&#8221;.<\/p>\n<p><span style=\"color: #4e4e4e;\">UITableViewCells are often\u00a0<\/span><strong style=\"color: #4e4e4e;\">reused instances<\/strong><span style=\"color: #4e4e4e;\">. This means that cells being loaded into the view may sometimes contain data that was loaded\u00a0originally\u00a0into a completely different cell.<\/span><\/p>\n<p>So, to handle this common scenarios. I use NSOperation and NSOperationQueue \u00a0Apple was introduced NSOperationQueue and many relative class in iOS 4. This was build in top of Grand Dispatch Central. But improve more enhancement. NSOperation can be cancel and resume easily.<\/p>\n<p>In brieft, we will implement step-by-step :<\/p>\n<ol>\n<li>Init array or dictionary<\/li>\n<li>In cellForRowAtIndexPath:, we will create NSOperationBlock and add to background thread. You must implement how it do if this operation is NOT cancel. Finally, we add to array or dictionary to usable.<\/li>\n<li>Implement didEndDisplayingCell, this method will be called if cell is OUT of visible area.<\/li>\n<li>Get operation in arr \/ dictionary and cancel. And remove out.<\/li>\n<\/ol>\n<p>Here is sample :<\/p>\n<pre class=\"lang:objc decode:true\">- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {\r\n    MyCustomeCell *cell = (MyCustomeCell *)[tableView dequeueReusableCellWithIdentifier:@\"Cell\" forIndexPath:indexPath];\r\n\r\n    \/\/ Get URL\r\n    NSURL *url = _arrURL[indexPath.row];\r\n \r\n    \/\/Create a block operation for loading the image into the profile image view\r\n    NSBlockOperation *loadImageOperation = [[NSBlockOperation alloc] init];\r\n\r\n    \/\/Define weak operation so that operation can be referenced from within the block without creating a retain cycle\r\n    __weak NSBlockOperation *weakOperation = loadImageOperation;\r\n\r\n    [loadImageOperation addExecutionBlock:^(void){\r\n        \/\/Some asynchronous work. Once the image is ready, it will load into view on the main queue\r\n        UIImage *image = [UIImage imageWithData:[NSData dataWithContentsOfURL:url]];\r\n\r\n        \/\/ Update UI in main thread when completion\r\n        [[NSOperationQueue mainQueue] addOperationWithBlock:^(void) {\r\n            \/\/Check for cancelation before proceeding. We use cellForRowAtIndexPath to make sure we get nil for a non-visible cell\r\n            if (! weakOperation.isCancelled) \r\n            {\r\n                MyCustomeCell *theCell = (MyCustomeCell *)[tableView cellForRowAtIndexPath:indexPath];\r\n                theCell.imageView.image = image;\r\n\r\n                \/\/ Remove operation\r\n                [_myDictionary removeObjectForKey:indexPath];\r\n            }\r\n        }];\r\n    }];\r\n \r\n    \/\/Save a reference to the operation in an NSMutableDictionary so that it can be cancelled later on\r\n    if (url) \r\n    {\r\n        [_myDictionary setObject: loadImageOperation forKey:indexPath];\r\n    }\r\n \r\n    \/\/Add the operation to the designated background queue\r\n    if (loadImageOperation) {\r\n        [_operationQueue loadImageOperation];\r\n    }\r\n \r\n    \/\/This would be a good place to assign a placeholder image\r\n    cell.imageView.image = placeholdImage;\r\n \r\n    return cell;\r\n}<\/pre>\n<p>and we take advantage in didEndDisplayngCell method.<\/p>\n<p>We will cancel operation which called in cellForRowAtIndexPath: before.<\/p>\n<pre class=\"lang:objc decode:true\">- (void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath \r\n{\r\n    \/\/Fetch operation that doesn't need executing anymore\r\n    NSBlockOperation *ongoingDownloadOperation = [_myDictionary objectForKey:indexPath];\r\n\r\n    \/\/ Ensure ongoingDownloadOperation is not nil\r\n    if (ongoingDownloadOperation) \r\n   {\r\n        \/\/Cancel operation and remove from dictionary\r\n        [ongoingDownloadOperation cancel];\r\n        [_myDictionary removeObjectForKey:indexPath];\r\n    }\r\n}<\/pre>\n<p>So, this is the best way to handle this scenarios. You can cancel all of operation if you push\u00a0to new UIViewController.<\/p>\n<pre class=\"lang:objc decode:true\">-(void) viewWillDisappeard:(BOOL) animated\r\n\r\n{\r\n\u00a0 \u00a0 [super viewWillDisappeard:animated];\r\n\r\n    \/\/ Cancel all\r\n    [_myOperationQueue cancelAllOpeations];\r\n}\r\n<\/pre>\n<p>Finally, you can improve more performance by setting setMaxConcurrentOperationCount.<\/p>\n<pre class=\"lang:objc decode:true\">[_myOpeationQueue setMaxConcurrentOperationCount:3];<\/pre>\n<p>&nbsp;<\/p>\n<p>Feel free for giving me your comment or your\u00a0opinion.<\/p>\n<p>Thanks for reading ;]<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Blog_3.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 11 Jun 2014 04:08:04 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:51:15 +0000","updated_by":1,"published_at":"Wed, 11 Jun 2014 04:08:04 +0000","published_by":1},{"id":631,"title":"Filter me: Tone Curve - Part 1","slug":"filter-me-tone-curve-part-1","markdown":"\n![filterMeIcon_part_1](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1-300x300.jpg?resize=300%2C300)  \n Hello guy, in this blog we will discuss some technique for filtering photo like instagram.\n\nNowaday, If you take a tour around AppStore, you will realize more than 80% app which has filter photo or video ability. This is the must-have featured in your app\u00a0especially social app or photo video editor app.\n\nIf you are fresh developer like me before, I ensure you must have a question like that \u201cHow can I bring awesome featured to my app\u201d or \u201cWhere can I find snippet code to implement it easily more than else ? \u201d\n\nWith more 1 year deal with image processing, I have some mysterious thing to show you. I will split to 3 part blog. Sort by level, from easy to advanced.\n\nIn this blog, I will cover some famous image-process Framework in the world, and the easy way to implement it.\n\n\n## Core Image\n\nCore Image is powerful framework let you apple easily filter to your photo such as modifying contact, hue, vibrance,\u2026. Core Image was built with a ton of filter, include common filter and high-up filter.\n\nCore Image mainly process your photo by CPU and GPU. So fast enough to process each frame in high quality video. With Core Image, you can apply\u00a0chain of filters to make a whole-new filter. Each filter has own parameter to adjust\u00a0behaviour, so you can built professional editor app.\n\nBut Core Image also some limit.\n\n\n## GPUImage\n\nGPUImage is very similar Core Image. The awesome framework was built by BradLarson.\n\nYou can check it out in at his [github](https:\/\/github.com\/BradLarson\/GPUImage \"github\").\n\nThe different things between them is GPUImage was build on top OpenGL ES. So GPUImage can take all powerful advantage of GPU. GPU provide many stuff for you to apply filter to photo, or filter real-time video.\n\nFor massively parallel operations like processing images or live video frames, GPUs have some significant performance advantages over CPUs. On an iPhone 4, a simple image filter can be over 100 times faster to perform on the GPU than an equivalent CPU-based filter.\n\nYou can create own custom filter with GPUImage, but you must have a little knowledge about OpenGL ES and OpenGL Shading Language.\n\nHere is a chart\u00a0comparison between GPUImage vs Core Image by Brad Larson\n\n[visualizer id=\u201d645\u2033]\n\nYou see, in case processing video, GPUImage took 2,5ms to upload frame from camera, apply gamma filter and display to screen, versus 106 ms for the same operation using Core Image.\n\n[visualizer id=\u201d648\u2033]\n\nOne more time, GPUImage process photo faster 4x more than Core Image in some common case.\n\n\n## Limit\n\nSo, Is\u00a0GPUImage the best choice for editor iOS app ?\n\nNo, everything always have two-side. When I deal with GPUImage, I often get error when build project which add GPUImage static library in 64-bit chip. And get many warning if I add GPUImage as independent project. You can ignore warnings, but It make too much\u00a0noise.\n\nFor\u00a0customize filter, you must write custom filter by OpenGL Shading Language which is low-level language.\n\nWhat about Core Image ?\n\nCore Image also include ton of filter. But you can custom it by own. But to adding Core Image to project is very very simple.\n\nUsing like that :\n\n\/\/ 1 NSString *filePath = [[NSBundle mainBundle] pathForResource:@\"image\" ofType:@\"png\"]; NSURL *fileNameAndPath = [NSURL fileURLWithPath:filePath]; \/\/ 2 CIImage *beginImage = [CIImage imageWithContentsOfURL:fileNameAndPath]; \/\/ 3 CIFilter *filter = [CIFilter filterWithName:@\"CISepiaTone\" keysAndValues: kCIInputImageKey, beginImage, @\"inputIntensity\", @0.8, nil]; CIImage *outputImage = [filter outputImage]; \/\/ 4 UIImage *newImage = [UIImage imageWithCIImage:outputImage]; self.imageView.image = newImage;\n\n1. \u00a0Init Path for Image in bundle\n2. Init CIImage\n3. Init SepiaTone Filter, and configure some parameter\n4. Get filtered image out.\n\n\n## Pre-filter\n\nIf you want to re-create photo in iOS App within the filter, you can use the Core Image to implement a series of CIFilter. CIFilter offers can adjust the brightness, contrast and so a variety of special effects filters.\n\nBut there are mysterious approach,\u00a0we can directly use Photoshop and other image processing software, directly adjust these color parameters, export some pattern, and use this pattern to apply photo again, We can dramatically speed up development.\n\n\n## Tone Curve\n\nTone Curve is the simplest way to apply filter.\u00a0The Tone Curve tool in photoshop is designed to allow you to modify the various light levels found within an image in a way that will give you greater control over the tonal range and contrast of your photograph.\n\nAs we capture our images we are capturing an array of light from the scene. From the darkest of the shadows to the whitest of the highlights the Tone Curve gives us a way of visually modifying how these levels of lights appear in the final image.\n\nWe use Photoshop to create own tone curve, and apply it to photo by Core Image.\n\nOpen Photoshop\n\n[![Curve_blog_1](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_1.png?resize=303%2C143)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_1.png)\n\n\u00a0Take [Original Photo](http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg \"Original Photo\")\u00a0I prepared for you.\n\nOpen with photoshop\n\n[![Curve_blog_2](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=829%2C518)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png)\n\nGo to Image -> Adjustments -> Curves \u2026\n\n[![Curve_blog_3](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_3.png?resize=508%2C205)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_3.png)\n\n\u00a0\n\nHere is Tone Curve tool. You can easily tone of R G or G by drag each point. I created sample\u00a0[Sample_Tone_Curve](http:\/\/www.mediafire.com\/download\/swbfvzvx6ckd6gg\/customToneCurve.acv \"Sample_Tone_Curve\")\u00a0 for you.\n\n\u00a0\n\n[![Curve_blog_4](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_4.png?resize=396%2C466)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_4.png)\n\nBy\u00a0changing each point in tone curve tool, we can see realtime filtered photo. And here is my result.\n\n\u00a0\n\n**After**\n\n[![toneCurve_photoshop_before](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=744%2C495)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg)\n\n**Before**\n\n[![toneCurve_photoshop_after](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=744%2C496)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg)\n\n\u00a0\n\nYep, the second photo look pretty than original. The finally, you should export to \u201cCurve file\u201d.\n\n\n## [![Curve_blog_5](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_5.png?resize=129%2C131)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_5.png)How to use \u201ccurve file\u201d\n\nYou can apply \u201ccurve file\u201d to your photo easily. Just download [GPUImage](https:\/\/github.com\/BradLarson\/GPUImage \"GPUImage\")\u00a0here.\n\nAdd GPUImage to your project as independent project or build static library. Just a couple of code\n\n-(UIImage *) imageByFitering:(UIImage *)image { NSLog(@\"filter with %@\",_filterNameACV); GPUImageToneCurveFilter *curveFilter = [[GPUImageToneCurveFilter alloc] initWithACV:_filterNameACV]; return [curveFilter imageByFilteringImage:image]; }\n\nSo, what about Core Image. Core Image provide \u201cCIToneCurve\u201d for dev. But there is no method that allow read data from \u201ccurve file\u201d. If you still want implement it. You take a deep\u00a0at [this link](http:\/\/www.adobe.com\/devnet-apps\/photoshop\/fileformatashtml\/ \"this link\"). This describe how Structure of Curve file was build. and you can read it by following instruction.\n\n\n## Here we go\n\nIn first series blog about filter photo, I covered some technique that make your photo get beautiful. Built editor photo app as quickly as possible.\n\nFeel free to drop your comment here ;]\n\n\u00a0\n\n\n","html":"<p><img class=\"size-medium wp-image-681 aligncenter\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1-300x300.jpg?resize=300%2C300\" alt=\"filterMeIcon_part_1\" width=\"300\" height=\"300\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><br \/>\nHello guy, in this blog we will discuss some technique for filtering photo like instagram.<\/p>\n<p>Nowaday, If you take a tour around AppStore, you will realize more than 80% app which has filter photo or video ability. This is the must-have featured in your app\u00a0especially social app or photo video editor app.<\/p>\n<p>If you are fresh developer like me before, I ensure you must have a question like that &#8220;How can I bring awesome featured to my app&#8221; or &#8220;Where can I find snippet code to implement it easily more than else ? &#8221;<\/p>\n<p>With more 1 year deal with image processing, I have some mysterious thing to show you. I will split to 3 part blog. Sort by level, from easy to advanced.<\/p>\n<p>In this blog, I will cover some famous image-process Framework in the world, and the easy way to implement it.<\/p>\n<h2>Core Image<\/h2>\n<p>Core Image is powerful framework let you apple easily filter to your photo such as modifying contact, hue, vibrance,&#8230;. Core Image was built with a ton of filter, include common filter and high-up filter.<\/p>\n<p>Core Image mainly process your photo by CPU and GPU. So fast enough to process each frame in high quality video. With Core Image, you can apply\u00a0chain of filters to make a whole-new filter. Each filter has own parameter to adjust\u00a0behaviour, so you can built professional editor app.<\/p>\n<p>But Core Image also some limit.<\/p>\n<h2>GPUImage<\/h2>\n<p>GPUImage is very similar Core Image. The awesome framework was built by BradLarson.<\/p>\n<p>You can check it out in at his <a title=\"github\" href=\"https:\/\/github.com\/BradLarson\/GPUImage\" target=\"_blank\">github<\/a>.<\/p>\n<p>The different things between them is GPUImage was build on top OpenGL ES. So GPUImage can take all powerful advantage of GPU. GPU provide many stuff for you to apply filter to photo, or filter real-time video.<\/p>\n<p>For massively parallel operations like processing images or live video frames, GPUs have some significant performance advantages over CPUs. On an iPhone 4, a simple image filter can be over 100 times faster to perform on the GPU than an equivalent CPU-based filter.<\/p>\n<p>You can create own custom filter with GPUImage, but you must have a little knowledge about OpenGL ES and OpenGL Shading Language.<\/p>\n<p>Here is a chart\u00a0comparison between GPUImage vs Core Image by Brad Larson<\/p>\n<p>[visualizer id=&#8221;645&#8243;]<\/p>\n<p>You see, in case processing video, GPUImage took 2,5ms to upload frame from camera, apply gamma filter and display to screen, versus 106 ms for the same operation using Core Image.<\/p>\n<p>[visualizer id=&#8221;648&#8243;]<\/p>\n<p>One more time, GPUImage process photo faster 4x more than Core Image in some common case.<\/p>\n<h2>Limit<\/h2>\n<p>So, Is\u00a0GPUImage the best choice for editor iOS app ?<\/p>\n<p>No, everything always have two-side. When I deal with GPUImage, I often get error when build project which add GPUImage static library in 64-bit chip. And get many warning if I add GPUImage as independent project. You can ignore warnings, but It make too much\u00a0noise.<\/p>\n<p>For\u00a0customize filter, you must write custom filter by OpenGL Shading Language which is low-level language.<\/p>\n<p>What about Core Image ?<\/p>\n<p>Core Image also include ton of filter. But you can custom it by own. But to adding Core Image to project is very very simple.<\/p>\n<p>Using like that :<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ 1\r\nNSString *filePath =\r\n  [[NSBundle mainBundle] pathForResource:@\"image\" ofType:@\"png\"];\r\nNSURL *fileNameAndPath = [NSURL fileURLWithPath:filePath];\r\n \r\n\/\/ 2\r\nCIImage *beginImage =\r\n  [CIImage imageWithContentsOfURL:fileNameAndPath];\r\n \r\n\/\/ 3\r\nCIFilter *filter = [CIFilter filterWithName:@\"CISepiaTone\"\r\n                              keysAndValues: kCIInputImageKey, beginImage,\r\n                    @\"inputIntensity\", @0.8, nil];\r\nCIImage *outputImage = [filter outputImage];\r\n \r\n\/\/ 4\r\nUIImage *newImage = [UIImage imageWithCIImage:outputImage];\r\nself.imageView.image = newImage;<\/pre>\n<ol>\n<li>\u00a0Init Path for Image in bundle<\/li>\n<li>Init CIImage<\/li>\n<li>Init SepiaTone Filter, and configure some parameter<\/li>\n<li>Get filtered image out.<\/li>\n<\/ol>\n<h2>Pre-filter<\/h2>\n<p>If you want to re-create photo in iOS App within the filter, you can use the Core Image to implement a series of CIFilter. CIFilter offers can adjust the brightness, contrast and so a variety of special effects filters.<\/p>\n<p>But there are mysterious approach,\u00a0we can directly use Photoshop and other image processing software, directly adjust these color parameters, export some pattern, and use this pattern to apply photo again, We can dramatically speed up development.<\/p>\n<h2>Tone Curve<\/h2>\n<p>Tone Curve is the simplest way to apply filter.\u00a0The Tone Curve tool in photoshop is designed to allow you to modify the various light levels found within an image in a way that will give you greater control over the tonal range and contrast of your photograph.<\/p>\n<p style=\"color: #181818;\">As we capture our images we are capturing an array of light from the scene. From the darkest of the shadows to the whitest of the highlights the Tone Curve gives us a way of visually modifying how these levels of lights appear in the final image.<\/p>\n<p style=\"color: #181818;\">We use Photoshop to create own tone curve, and apply it to photo by Core Image.<\/p>\n<p style=\"color: #181818;\">Open Photoshop<\/p>\n<p style=\"color: #181818;\"><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_1.png\"><img class=\"aligncenter size-full wp-image-656\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_1.png?resize=303%2C143\" alt=\"Curve_blog_1\" width=\"303\" height=\"143\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_1.png?w=303&amp;ssl=1 303w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_1.png?resize=300%2C143&amp;ssl=1 300w\" sizes=\"(max-width: 303px) 100vw, 303px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>\u00a0Take <a title=\"Original Photo\" href=\"http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg\" target=\"_blank\">Original Photo<\/a>\u00a0I prepared for you.<\/p>\n<p>Open with photoshop<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png\"><img class=\"aligncenter wp-image-655\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=829%2C518\" alt=\"Curve_blog_2\" width=\"829\" height=\"518\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?w=1440&amp;ssl=1 1440w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=300%2C188&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=768%2C480&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=1024%2C640&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=1116%2C698&amp;ssl=1 1116w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=806%2C504&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=558%2C349&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_2.png?resize=655%2C409&amp;ssl=1 655w\" sizes=\"(max-width: 829px) 100vw, 829px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Go to Image -&gt; Adjustments -&gt; Curves &#8230;<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_3.png\"><img class=\"aligncenter size-full wp-image-654\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_3.png?resize=508%2C205\" alt=\"Curve_blog_3\" width=\"508\" height=\"205\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_3.png?w=508&amp;ssl=1 508w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_3.png?resize=300%2C121&amp;ssl=1 300w\" sizes=\"(max-width: 508px) 100vw, 508px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Here is Tone Curve tool. You can easily tone of R G or G by drag each point. I created sample\u00a0<a title=\"Sample_Tone_Curve\" href=\"http:\/\/www.mediafire.com\/download\/swbfvzvx6ckd6gg\/customToneCurve.acv\" target=\"_blank\">Sample_Tone_Curve<\/a>\u00a0 for you.<\/p>\n<p>&nbsp;<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_4.png\"><img class=\"aligncenter wp-image-653\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_4.png?resize=396%2C466\" alt=\"Curve_blog_4\" width=\"396\" height=\"466\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_4.png?w=495&amp;ssl=1 495w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/Curve_blog_4.png?resize=255%2C300&amp;ssl=1 255w\" sizes=\"(max-width: 396px) 100vw, 396px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>By\u00a0changing each point in tone curve tool, we can see realtime filtered photo. And here is my result.<\/p>\n<p>&nbsp;<\/p>\n<p style=\"text-align: center;\"><strong>After<\/strong><\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg\"><img class=\"aligncenter wp-image-652\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=744%2C495\" alt=\"toneCurve_photoshop_before\" width=\"744\" height=\"495\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?w=960&amp;ssl=1 960w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=300%2C200&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=768%2C512&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=806%2C537&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=558%2C372&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_before.jpg?resize=655%2C437&amp;ssl=1 655w\" sizes=\"(max-width: 744px) 100vw, 744px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p style=\"text-align: center;\"><strong>Before<\/strong><\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg\"><img class=\"aligncenter wp-image-651\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=744%2C496\" alt=\"toneCurve_photoshop_after\" width=\"744\" height=\"496\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?w=960&amp;ssl=1 960w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=300%2C200&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=768%2C512&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=806%2C537&amp;ssl=1 806w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=558%2C372&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/toneCurve_photoshop_after.jpg?resize=655%2C437&amp;ssl=1 655w\" sizes=\"(max-width: 744px) 100vw, 744px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Yep, the second photo look pretty than original. The finally, you should export to &#8220;Curve file&#8221;.<\/p>\n<h2><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_5.png\"><img class=\"aligncenter size-full wp-image-657\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Curve_blog_5.png?resize=129%2C131\" alt=\"Curve_blog_5\" width=\"129\" height=\"131\" data-recalc-dims=\"1\" \/><\/a>How to use &#8220;curve file&#8221;<\/h2>\n<p>You can apply &#8220;curve file&#8221; to your photo easily. Just download <a title=\"GPUImage\" href=\"https:\/\/github.com\/BradLarson\/GPUImage\" target=\"_blank\">GPUImage<\/a>\u00a0here.<\/p>\n<p>Add GPUImage to your project as independent project or build static library. Just a couple of code<\/p>\n<pre class=\"lang:objc decode:true\">-(UIImage *) imageByFitering:(UIImage *)image\r\n{\r\n    NSLog(@\"filter with %@\",_filterNameACV);\r\n    \r\n    GPUImageToneCurveFilter *curveFilter = [[GPUImageToneCurveFilter alloc] initWithACV:_filterNameACV];\r\n    \r\n    return [curveFilter imageByFilteringImage:image];\r\n}<\/pre>\n<p>So, what about Core Image. Core Image provide &#8220;CIToneCurve&#8221; for dev. But there is no method that allow read data from &#8220;curve file&#8221;. If you still want implement it. You take a deep\u00a0at <a title=\"this link\" href=\"http:\/\/www.adobe.com\/devnet-apps\/photoshop\/fileformatashtml\/\" target=\"_blank\">this link<\/a>. This describe how Structure of Curve file was build. and you can read it by following instruction.<\/p>\n<h2>Here we go<\/h2>\n<p>In first series blog about filter photo, I covered some technique that make your photo get beautiful. Built editor photo app as quickly as possible.<\/p>\n<p>Feel free to drop your comment here ;]<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_1.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 16 Jun 2014 14:37:20 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:35:26 +0000","updated_by":1,"published_at":"Mon, 16 Jun 2014 14:37:20 +0000","published_by":1},{"id":664,"title":"Filter Me: Color Lookup Table - Part 2","slug":"filter-me-color-lookup-table-part-2","markdown":"\n![filterMeIcon_part_2](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2-300x300.jpg?resize=300%2C300)\n\nHi, We will pick up right where we left off in [Part one](http:\/\/nghiatran.me\/index.php\/filter-photo-like-instagram\/ \"Part One\").\n\nIn the last part, I covered to use curve file which was built by Photoshop, and how to apply it to your photo.\n\nAnd now, we will deal with advanced technique. Applying many complex curve and selective-color to turn your photo to beautiful photo ever.\n\nStandard approach to creating photo-like Instagram\u00a0in last part. We just apply one curve to photo. So, what if do I wanna apply more curve or selective-color in photoshop? Should I apply each curve by step to step in iOS app? With professional designer, they can adjust more curve than one at the time.\n\nHere is list action which designer often do :\n\n[![FilterMe_Part2_1](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_1.png?resize=281%2C611)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_1.png)\n\nSounds simple enough, but in practice, I found it quite hard to implement Curves and Selective Color in my iOS app exactly the way Photoshop does it. That should be crazy if I and you as iOS developer will apply each step by code. There is must solution for an implement that.\n\n\n# Color Lookup Table \u2013 LUT\n\nLUT is a recuse for iOS dev ;]\n\n<span style=\"color: #595959;\">In the field of image processing, when we want to adjust the color of an image, often used Color Lookup Table (referred ColorLUT) technology.<\/span>\n\n<span class=\"notranslate\">Here is a simple example, if we want to make the R-value of each pixel in the image into the original 0.3-fold, the basic approach is to put the R-value of each pixel is multiplied by 0.3, assuming the size of the image is 1024\u00d7768, then the total to 786,432 times a floating-point multiplication.<\/span>\n\n<span class=\"notranslate\">If we start the first result to build a table, all the processed color values (R-value is 0.3 times) after recording it, and then take the color value of each pixel in the table, the color values obtained after processing, So long as we do 786432 lookup action, faster than many floating-point operations.<\/span>\u00a0<span class=\"notranslate\">In fact most of the color adjustment algorithms many complexes than this example, and therefore better highlight the high efficiency of the look-up table.<\/span>\n\nHere\u2019s a sample RGB lookup table:\n\n[![FilterMe_Part2_2](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?resize=512%2C512)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png)\n\nSo, theory enough, take action.\n\nOpen photoshop, load [this photo](http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Filter-Me_sample.jpg \"Sample\"), and give it to your designer. They will make some adjustment to desired effect.\n\n[![FilterMe_Part2_3](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=850%2C532)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png)\n\nBut now, we are an iOS dev, I take a tour around google and seek some action Photoshop.\n\nHere is my found:\u00a0[http:\/\/www.deviantart.com\/art\/ATP-Dylan-Action-for-Photoshop-461167798](http:\/\/www.deviantart.com\/art\/ATP-Dylan-Action-for-Photoshop-461167798)\n\nYou can find by yourself, but make sure:\u201d**There is no\u00a0**<span style=\"color: #000000;\">**effects use additional textures, blur, sharpen and some other filters which will not work with a simple lookup texture approach**\u201c. Your action should just adjust curve, layer, selective-color.<\/span>\n\nDownload this action and run it.\n\n[![FilterMe_Part2_4](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_4.png?resize=338%2C309)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_4.png)\n\n\u00a0\n\nAnd here is my result\n\n[![FilterMe_Part2_5](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=850%2C531)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png)\n\n\u00a0\n\nLook amazing ;]\n\nBut this is work of a designer, my job is to bring this miracle to iOS app.\n\nContinue, Download [original LUT](http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_OriginalLUT.png \"Original LUT\")\n\nOpen this with photoshop, take actions like I did before to original LUT.\n\nAnd save LUT as ProcessedLUT.png (Must save as PNJ extension)\n\n[![FilterMe_Part2_ProcessedLUT](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?resize=359%2C359)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png)\n\nSo, we have\u00a0finished the first stage as an important stage in this blog. Next, we work with iOS.\n\nFor simple, I create a category for you. Feel free to download [it here](http:\/\/www.mediafire.com\/download\/7heho6i2pkd0pm7\/CIFilter+LUT.zip \"Category CIFilter+LUT\").\n\nEx:\n\n\/\/ Load photo UIImage *photo = [UIImage imageNamed:@\"Filter-Me_sample.jpg\"]; \/\/ Create filter CIFilter *lutFilter = [CIFilter filterWithLUT:@\"FilterMe_Part2_ProcessedLUT\" dimension:64]; \/\/ Set parameter CIImage *ciImage = [[CIImage alloc] initWithImage:photo]; [lutFilter setValue:ciImage forKey:@\"inputImage\"]; CIImage *outputImage = [lutFilter outputImage]; CIContext *context = [CIContext contextWithOptions:[NSDictionary dictionaryWithObject:(__bridge id)(CGColorSpaceCreateDeviceRGB()) forKey:kCIContextWorkingColorSpace]]; UIImage *newImage = [UIImage imageWithCGImage:[context createCGImage:outputImage fromRect:outputImage.extent]]; _imageView.image = newImage;\n\nJust remember to add CoreImage and OpenGLES framework in your project.\n\nHere is my photo after process by LUT\n\n[![FilterMe_Part2_6](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png?resize=577%2C399)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png)\n\n\u00a0\n\n\n# Another way\n\nYou can easily implement LUT process in GPUImage. Just use\u00a0**GPUImageLookupFilter\u00a0**class.\n\n\n# Source code\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/FilterMe_Part_2\u2033 target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: cloud-download\u201d]Github[\/su_button]\n\n\n# Where to go from here ?\n\nAfter reading carefully this blog, I think you have some knowledge about image processing and how to bring Photoshop to the iOS world.\n\nTo make photo similar Instagram do, in the 3rd part, I will show you the way to add more texture to photo. Make it look like vintage or retro style.\n\nThank for reading ;]\n\n\u00a0\n\n\u00a0\n\n\n","html":"<p><img class=\"size-medium wp-image-680 aligncenter\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2-300x300.jpg?resize=300%2C300\" alt=\"filterMeIcon_part_2\" width=\"300\" height=\"300\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Hi, We will pick up right where we left off in <a title=\"Part One\" href=\"http:\/\/nghiatran.me\/index.php\/filter-photo-like-instagram\/\" target=\"_blank\" rel=\"noopener\">Part one<\/a>.<\/p>\n<p>In the last part, I covered to use curve file which was built by Photoshop, and how to apply it to your photo.<\/p>\n<p>And now, we will deal with advanced technique. Applying many complex curve and selective-color to turn your photo to beautiful photo ever.<\/p>\n<p>Standard approach to creating photo-like Instagram\u00a0in last part. We just apply one curve to photo. So, what if do I wanna apply more curve or selective-color in photoshop? Should I apply each curve by step to step in iOS app? With professional designer, they can adjust more curve than one at the time.<\/p>\n<p>Here is list action which designer often do :<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_1.png\"><img class=\"aligncenter size-full wp-image-667\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_1.png?resize=281%2C611\" alt=\"FilterMe_Part2_1\" width=\"281\" height=\"611\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_1.png?w=281&amp;ssl=1 281w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_1.png?resize=138%2C300&amp;ssl=1 138w\" sizes=\"(max-width: 281px) 100vw, 281px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Sounds simple enough, but in practice, I found it quite hard to implement Curves and Selective Color in my iOS app exactly the way Photoshop does it. That should be crazy if I and you as iOS developer will apply each step by code. There is must solution for an implement that.<\/p>\n<h1>Color Lookup Table &#8211; LUT<\/h1>\n<p>LUT is a recuse for iOS dev ;]<\/p>\n<p><span style=\"color: #595959;\">In the field of image processing, when we want to adjust the color of an image, often used Color Lookup Table (referred ColorLUT) technology.<\/span><\/p>\n<p style=\"color: #595959;\"><span class=\"notranslate\">Here is a simple example, if we want to make the R-value of each pixel in the image into the original 0.3-fold, the basic approach is to put the R-value of each pixel is multiplied by 0.3, assuming the size of the image is 1024&#215;768, then the total to 786,432 times a floating-point multiplication.<\/span><\/p>\n<p style=\"color: #595959;\"><span class=\"notranslate\">If we start the first result to build a table, all the processed color values (R-value is 0.3 times) after recording it, and then take the color value of each pixel in the table, the color values obtained after processing, So long as we do 786432 lookup action, faster than many floating-point operations.<\/span>\u00a0<span class=\"notranslate\">In fact most of the color adjustment algorithms many complexes than this example, and therefore better highlight the high efficiency of the look-up table.<\/span><\/p>\n<p style=\"color: #595959;\">Here&#8217;s a sample RGB lookup table:<\/p>\n<p style=\"color: #595959;\"><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png\"><img class=\"aligncenter size-full wp-image-668\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?resize=512%2C512\" alt=\"FilterMe_Part2_2\" width=\"512\" height=\"512\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?w=512&amp;ssl=1 512w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_2.png?resize=180%2C180&amp;ssl=1 180w\" sizes=\"(max-width: 512px) 100vw, 512px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>So, theory enough, take action.<\/p>\n<p>Open photoshop, load <a title=\"Sample\" href=\"http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/06\/Filter-Me_sample.jpg\" target=\"_blank\" rel=\"noopener\">this photo<\/a>, and give it to your designer. They will make some adjustment to desired effect.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png\"><img class=\"aligncenter wp-image-670\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=850%2C532\" alt=\"FilterMe_Part2_3\" width=\"850\" height=\"532\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?w=1440&amp;ssl=1 1440w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=300%2C188&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=768%2C480&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=1024%2C640&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=1116%2C698&amp;ssl=1 1116w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=806%2C504&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=558%2C349&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_3.png?resize=655%2C409&amp;ssl=1 655w\" sizes=\"(max-width: 850px) 100vw, 850px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>But now, we are an iOS dev, I take a tour around google and seek some action Photoshop.<\/p>\n<p>Here is my found:\u00a0<a href=\"http:\/\/www.deviantart.com\/art\/ATP-Dylan-Action-for-Photoshop-461167798\">http:\/\/www.deviantart.com\/art\/ATP-Dylan-Action-for-Photoshop-461167798<\/a><\/p>\n<p>You can find by yourself, but make sure:&#8221;<strong>There is no\u00a0<\/strong><span style=\"color: #000000;\"><strong>effects use additional textures, blur, sharpen and some other filters which will not work with a simple lookup texture approach<\/strong>&#8220;. Your action should just adjust curve, layer, selective-color.<\/span><\/p>\n<p>Download this action and run it.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_4.png\"><img class=\"aligncenter size-full wp-image-669\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_4.png?resize=338%2C309\" alt=\"FilterMe_Part2_4\" width=\"338\" height=\"309\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_4.png?w=338&amp;ssl=1 338w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_4.png?resize=300%2C274&amp;ssl=1 300w\" sizes=\"(max-width: 338px) 100vw, 338px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>And here is my result<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png\"><img class=\"aligncenter wp-image-671\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=850%2C531\" alt=\"FilterMe_Part2_5\" width=\"850\" height=\"531\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?w=1440&amp;ssl=1 1440w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=300%2C188&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=768%2C480&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=1024%2C640&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=1116%2C698&amp;ssl=1 1116w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=806%2C504&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=558%2C349&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_5.png?resize=655%2C409&amp;ssl=1 655w\" sizes=\"(max-width: 850px) 100vw, 850px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Look amazing ;]<\/p>\n<p>But this is work of a designer, my job is to bring this miracle to iOS app.<\/p>\n<p>Continue, Download <a title=\"Original LUT\" href=\"http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_OriginalLUT.png\" target=\"_blank\" rel=\"noopener\">original LUT<\/a><\/p>\n<p>Open this with photoshop, take actions like I did before to original LUT.<\/p>\n<p>And save LUT as ProcessedLUT.png (Must save as PNJ extension)<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png\"><img class=\"aligncenter wp-image-673\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?resize=359%2C359\" alt=\"FilterMe_Part2_ProcessedLUT\" width=\"359\" height=\"359\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?w=512&amp;ssl=1 512w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_ProcessedLUT.png?resize=180%2C180&amp;ssl=1 180w\" sizes=\"(max-width: 359px) 100vw, 359px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>So, we have\u00a0finished the first stage as an important stage in this blog. Next, we work with iOS.<\/p>\n<p>For simple, I create a category for you. Feel free to download <a title=\"Category CIFilter+LUT\" href=\"http:\/\/www.mediafire.com\/download\/7heho6i2pkd0pm7\/CIFilter+LUT.zip\" target=\"_blank\" rel=\"noopener\">it here<\/a>.<\/p>\n<p>Ex:<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ Load photo\r\n    UIImage *photo = [UIImage imageNamed:@\"Filter-Me_sample.jpg\"];\r\n    \r\n    \/\/ Create filter\r\n    CIFilter *lutFilter = [CIFilter filterWithLUT:@\"FilterMe_Part2_ProcessedLUT\" dimension:64];\r\n    \r\n    \/\/ Set parameter\r\n    CIImage *ciImage = [[CIImage alloc] initWithImage:photo];\r\n    [lutFilter setValue:ciImage forKey:@\"inputImage\"];\r\n    CIImage *outputImage = [lutFilter outputImage];\r\n    \r\n    CIContext *context = [CIContext contextWithOptions:[NSDictionary dictionaryWithObject:(__bridge id)(CGColorSpaceCreateDeviceRGB()) forKey:kCIContextWorkingColorSpace]];\r\n    \r\n    UIImage *newImage = [UIImage imageWithCGImage:[context createCGImage:outputImage fromRect:outputImage.extent]];\r\n    \r\n    _imageView.image = newImage;<\/pre>\n<p>Just remember to add CoreImage and OpenGLES framework in your project.<\/p>\n<p>Here is my photo after process by LUT<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png\"><img class=\"aligncenter wp-image-677\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png?resize=577%2C399\" alt=\"FilterMe_Part2_6\" width=\"577\" height=\"399\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png?w=721&amp;ssl=1 721w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png?resize=300%2C208&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png?resize=558%2C386&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FilterMe_Part2_6.png?resize=655%2C453&amp;ssl=1 655w\" sizes=\"(max-width: 577px) 100vw, 577px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h1>Another way<\/h1>\n<p>You can easily implement LUT process in GPUImage. Just use\u00a0<strong>GPUImageLookupFilter\u00a0<\/strong>class.<\/p>\n<h1>Source code<\/h1>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/FilterMe_Part_2&#8243; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: cloud-download&#8221;]Github[\/su_button]<\/p>\n<h1>Where to go from here ?<\/h1>\n<p>After reading carefully this blog, I think you have some knowledge about image processing and how to bring Photoshop to the iOS world.<\/p>\n<p>To make photo similar Instagram do, in the 3rd part, I will show you the way to add more texture to photo. Make it look like vintage or retro style.<\/p>\n<p>Thank for reading ;]<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 17 Jun 2014 04:45:11 +0000","created_by":1,"updated_at":"Sat, 23 Sep 2017 09:56:00 +0000","updated_by":1,"published_at":"Tue, 17 Jun 2014 04:45:11 +0000","published_by":1},{"id":683,"title":"Handmade Code: Parallax Table View - Part 1","slug":"handmade-code-parallax-table-view","markdown":"\n![TableParallax_icon-01](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01-300x300.jpg?resize=300%2C300)\n\nThis is the first blog about crafting customize control from scratch\u00a0that I call with epic name \u201cHandmade code\u201d ;]\n\n\n# Something to talk about UI \/ UX\n\nHave you ever downloaded & opened a famous iOS app like Page by FB\u00a0or something else ? Have you\u00a0surprised or\u00a0realized that these app never use \u201cold-fashion\u201d Apple\u2019s control ?\n\nToday is a new generation \u00a0, if you can implement new feature, I can too. It mean. there is no difference, no fence between you and me, same as a developer. So here a question, what thing can make user\u00a0download\u00a0my app instead your app ?\n\nTo answer this question, I decide make few survey with my friend. 80% answer is something similar about app\u2019s\u00a0appearance. If I am asked by you, I also give same answer.\n\nDesign UI \/ UX is a first\u00a0stage when developing application. As an independent iOS developer, we should have some knowledge about design principle. But in this blog, I should NOT mention it.\u00a0In the future, I will write some blog what take closer look\u00a0about\u00a0it.\n\n\n# Parallax\u00a0Effect\n\n**Parallax scrolling**<span style=\"color: #252525;\">\u00a0is a special\u00a0<\/span>[scrolling](http:\/\/en.wikipedia.org\/wiki\/Scrolling \"Scrolling\")<span style=\"color: #252525;\">\u00a0technique in\u00a0<\/span>[computer graphics](http:\/\/en.wikipedia.org\/wiki\/Computer_graphics \"Computer graphics\")<span style=\"color: #252525;\">, wherein background images move by the camera slower than foreground images, creating an illusion of depth in a 2D\u00a0<\/span>[video game](http:\/\/en.wikipedia.org\/wiki\/Video_game \"Video game\")<span style=\"color: #252525;\">\u00a0and adding to the immersion.<\/span>\n\nIf you are game developer, parallax effect is in your hand.\n\nBut right now, I\u2019m going to bring incredible effect to iOS app. Here is result.\n\nYoutube :\n\n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"315\" src=\"\/\/www.youtube.com\/embed\/FyJJuCvBNTc\" width=\"420\"><\/iframe>\n\n\n# Coding time\n\nTheory enough, we should take a real action. I will instruct you build customize Table View\u00a0with Parallax Effect.\n\nCreate new project as SingleView Templete, \u00a0in this sample, I name \u201cFeParallaxTableView_SampleCode\u201d. Be sure name your prefix as you like and select devices is iPhone.\n\n![SampleCode_ParallaxTableView_1](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_1.png?resize=731%2C492)\n\n\u00a0\n\nCreate class FeParallaxTableView subclass UITableView. This is main class we will deal all time.\n\n[![SampleCode_ParallaxTableView_3](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_3.png?resize=536%2C175)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_3.png)\n\n\u00a0\n\nNext, create new class call \u201cFeCell\u201d sublcass UITableViewCell. Make sure you do NOT select \u201cCreate XIB file\u201d option and select iPhone in dropbox.\n\nIn fact, you need avoid creating XIB file. You should create cell\u00a0<span style=\"color: #000000;\">programmatically. <\/span>\n\n<span style=\"color: #000000;\">Because\u00a0<\/span>**You cannot change the frame of an object if you\u2019ve put it through Interface Builder.**\n\n[![SampleCode_ParallaxTableView_4](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_4.png?resize=537%2C187)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_4.png)\n\n\u00a0\n\nHere project look like\n\n[![SampleCode_ParallaxTableView_5](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_5.png?resize=260%2C430)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_5.png)\n\n\u00a0\n\n\n# Photo Bundle\n\nFor saving your time, I prepared for you Photo Bundle. You can download it at here.\n\n[button text=\u201dPhoto Bundle\u201d new_tab=\u201dyes\u201d size=\u201dmedium\u201d \u00a0icon=\u201dfa-cloud-download\u201d color=\u201dgreen\u201d colored=\u201dyes\u201d url=\u201dhttp:\/\/www.mediafire.com\/download\/l367m8hd4sfuwmr\/PhotoBundle.zip\u201d]\n\nExtract it, and see in there.\n\n[![SampleCode_ParallaxTableView_6](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_6.png?resize=417%2C181)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_6.png)\n\nThis bundle include 8 photos of big city in the world, and a Plist file. This plist file will help me parse data to app easily than more. If you open it, it simple a array contain name of string as each row.\n\n[![SampleCode_ParallaxTableView_7](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png?resize=598%2C282)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png)\n\n\n# Delegation Pattern\n\nFeParallaxTabbleView use pattern similar UITableView. It mean, we should have 2 protocol. One is DataSource with provide data for own custom table view, and one is Delegate has some useful method.\n\nNow, open FeParallaxTableView.h and add some code :\n\n@protocol FeParallaxTableViewDataSource; @protocol FeParallaxTableViewDelegate; @interface FeParallaxTableView : UITableView \/\/ Delegate @property (weak, nonatomic) id<FeParallaxTableViewDataSource> delegateParallax; @end \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \/\/ Data source @protocol FeParallaxTableViewDataSource <NSObject> @required \/\/ Image for cell at indexpath -(UIImage *) FeParallaxTableView:(FeParallaxTableView *) sender imageForCellAtIndexPath:(NSIndexPath *) indexPath; \/\/ Title for cell -(NSString *) FeParallaxTableView:(FeParallaxTableView *) sender titleForCellAtIndexPath:(NSIndexPath *) indexPath; \/\/ number Of Row -(NSInteger) numberOfRowForParallaxCell; @end \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \/\/ Delegate @protocol FeParallaxTableViewDelegate <NSObject> \/\/ Add late @end\n\nWe have 2 important method in Data source here. As you\u00a0this name call, this method will provide image for each cell at specific index path.\n\n\/\/ Image for cell at indexpath -(UIImage *) FeParallaxTableView:(FeParallaxTableView *) sender imageForCellAtIndexPath:(NSIndexPath *) indexPath;\n\nand the rest method will provide title for each cell\n\n\/\/ Title for cell -(NSString *) FeParallaxTableView:(FeParallaxTableView *) sender titleForCellAtIndexPath:(NSIndexPath *) indexPath;\n\nSwitch to .m file\n\nWe override initalization method.\n\n- (id)initWithFrame:(CGRect)frame { self = [super initWithFrame:frame]; if (self) { \/\/ Initialization code self.delegate = self; self.dataSource = self; self.separatorStyle = UITableViewCellSeparatorStyleNone; \/\/ Register [self registerClass:[FeCell class] forCellReuseIdentifier:kFeCellID]; } return self; }\n\nMake sure your already import FeCell and conform TableView\u2019s protocol. And define new const for cell\u2019s ID.\n\n#define kFeCellID @\"FeCell\"\n\nAdd data source\u2019s method\n\n-(NSInteger) numberOfRowsInSection:(NSInteger)section { return 1; } -(CGFloat) tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath { return 180; } -(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { NSUInteger numberOfCell = [_delegateParallax numberOfRowForParallaxCell]; return numberOfCell; } -(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { FeCell *cell = [tableView dequeueReusableCellWithIdentifier:kFeCellID forIndexPath:indexPath]; return cell; } -(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath { }\n\nHere we provide number of cell via method numberOfRowForParallaxCell, and return 1 section.\n\n\n# FeCell\n\nNow, switch FeCell.m file. Add some property\n\n@interface FeCell () \/\/ Photo @property (strong, nonatomic) UIImageView *photoView; \/\/ Title @property (strong, nonatomic) UILabel *titleLbl; @end\n\nand add 2 helper methods in .h file.\n\n-(void) configureWithPhoto:(UIImage *) image title:(NSString *) title; -(void) configureFramePhoto:(CGRect) frame;\n\nand .m file.\n\n-(instancetype) initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier { self = [super initWithStyle:style reuseIdentifier:reuseIdentifier]; if (self) { [self initSubView]; } return self; } -(void) initSubView { \/\/\/\/\/\/\/\/\/\/\/\/\/ \/\/ Photo _photoView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 320, 568)]; _photoView.contentMode = UIViewContentModeScaleAspectFill; \/\/\/\/\/\/\/\/\/\/\/\/ \/\/ Title _titleLbl = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 320, 180)]; _titleLbl.textAlignment = NSTextAlignmentCenter; _titleLbl.font = [UIFont systemFontOfSize:44]; _titleLbl.textColor = [UIColor whiteColor]; [self.contentView addSubview:_photoView]; [self.contentView addSubview:_titleLbl]; } -(void) configureWithPhoto:(UIImage *)image title:(NSString *)title { _photoView.image = image; _titleLbl.text = title; } -(void) configureFramePhoto:(CGRect)frame { _photoView.frame = frame; }\n\nDo you notice I set frame for photoView with 568 px as height ? There is a reason for this.\n\n\n# First testing\n\nWe have just implemented some necessary method in FeParallaxTableView and FeCell for the first test. So the next step, we should test it, make sure it work ;]\n\nGo back to FeViewController.m file. Import two own file and conform\u00a0FeParallaxTableView\u2019s data source. And copy this code to interface :\n\n\/\/ Table View @property (strong, nonatomic) FeParallaxTableView *tableView; \/\/ Arr of image @property (strong, nonatomic) NSMutableArray *arrPhotos; \/\/ Arr of title @property (strong, nonatomic) NSMutableArray *arrTitles; -(void) initPhoto; -(void) initTableView;\n\nAs your expectation, we should read City.plist and parse data to Photo array and Title Array.\n\n- (void)viewDidLoad { [super viewDidLoad]; \/\/ Do any additional setup after loading the view, typically from a nib. [self initPhoto]; [self initTableView]; } -(void) initPhoto { \/\/ Get photo from plist file \/\/ Path NSString *path = [[NSBundle mainBundle] pathForResource:@\"City\" ofType:@\"plist\"]; \/\/ - 1 _arrTitles = [NSArray arrayWithContentsOfFile:path]; \/\/ - 2 _arrPhotos = [NSMutableArray arrayWithCapacity:_arrTitles.count]; \/\/ - 3 for (NSString *namePhoto in _arrTitles) { NSString *fullNamePhoto = [NSString stringWithFormat:@\"%@.jpg\",namePhoto]; UIImage *image = [UIImage imageNamed:fullNamePhoto]; [_arrPhotos addObject:image]; } } -(void) initTableView { _tableView = [[FeParallaxTableView alloc] initWithFrame:self.view.bounds]; _tableView.delegateParallax = self; [self.view addSubview:_tableView]; }\n\n1. \u00a0Just part plist file to Title array\n2. Init Photo array with capacity equal with titleArray\u2019s count.\n3. Init UIImage with each name and add to Photo Array.\n\nAnd implement required method.\n\n#pragma mark - FeParallax Table View -(UIImage *) FeParallaxTableView:(FeParallaxTableView *)sender imageForCellAtIndexPath:(NSIndexPath *)indexPath { UIImage *image = _arrPhotos[indexPath.row]; return image; } -(NSString *) FeParallaxTableView:(FeParallaxTableView *)sender titleForCellAtIndexPath:(NSIndexPath *)indexPath { NSString *title = _arrTitles[indexPath.row]; return title; } -(NSInteger) numberOfRowForParallaxCell { return _arrPhotos.count; }\n\nClick run on iPhone 4\u2033 and here is result.\n\n[![SampleCode_ParallaxTableView_10](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_10.png?resize=214%2C380)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_10.png)\u00a0 Before continue reading, confirm you has same result as photo above.\n\nNext step, we add some code to bring photo to each cell.\n\nNow, Go back FeParallaxTableView.m file and look at cellAtIndexPath method.\n\nWe need some code to add photo and title into cell.\n\n-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath { FeCell *cell = [tableView dequeueReusableCellWithIdentifier:kFeCellID forIndexPath:indexPath]; \/\/ Clip to bound cell.clipsToBounds = YES; cell.contentMode = UIViewContentModeScaleAspectFill; \/\/ Get photo UIImage *image = [_delegateParallax FeParallaxTableView:self imageForCellAtIndexPath:indexPath]; NSString *title = [_delegateParallax FeParallaxTableView:self titleForCellAtIndexPath:indexPath]; \/\/ Configure [cell configureWithPhoto:image title:title]; return cell; }\n\nRun it again.\n\n[![SampleCode_ParallaxTableView_11](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_11.png?resize=242%2C430)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_11.png)\n\n\u00a0\n\nLook beautiful, but if you take closer look, you should notice something wrong. Photo in each cell do NOT same as we expect.\n\nLet check sample photo again.\n\n[![SampleCode_ParallaxTableView_13](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png?resize=242%2C430)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png)\n\nWith closer look, we can see, our expectation is not the same as It\u00a0should be. The position of photo in each cells is different. So, go back to resource folder, look each photo again, you may realize that photo\u2019s\u00a0offset was transform by denta.\n\nNow the time we should deal with new delegate method, are available\u00a0in iOS 7.\n\n-(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath { \/\/1 FeCell *feCell = (FeCell *) cell; \/\/2 \/\/ Frame CGFloat cellY = feCell.frame.origin.y; CGFloat denta = cellY - self.contentOffset.y; \/\/3 [feCell configureFramePhoto:CGRectMake(0, -denta , self.bounds.size.width,self.bounds.size.height)]; }\n\nThis is **[tableview:willDisplayCell:forRowAtIndexPath]**. This method will be call when new cell will display into tableView. Because, this method is called after [tableView:cellForRowAtIndexPath:], it mean, your cell is already initializer. It\u2019s useful when you want to apply transform to cell before cell will be display.\n\nBut, you should\u00a0bear in mind that it\u2019s only available in iOS 7 and above.\n\nSo, I explain what i did :\n\n1. Just cast original cell to FeCell. Because, we will use own method in the next step.\n2. If you are brainy guy, the denta property may figure out by subtracting cell\u2019s y offset to UITableView\u2019s contentOffset y.\n3. Just transform UIImageView with this denta.\n\nRun it, and check it out ;]\n\n[![SampleCode_ParallaxTableView_14](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_14.png?resize=215%2C382)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_14.png)\n\nEverything is OK, but when you scroll, something went wrong ;[. Don\u2019t need to be disappointed. We will make it work correctly right now.\n\nSo,we \u00a0add some code below :\n\n-(void) scrollViewDidScroll:(UIScrollView *)scrollView { for (NSIndexPath *indexPath in self.indexPathsForVisibleRows) { FeCell *cell = (FeCell *)[self cellForRowAtIndexPath:indexPath]; CGFloat cellY = cell.frame.origin.y; CGFloat denta = cellY - self.contentOffset.y; [cell configureFramePhoto:CGRectMake(0,-denta , self.bounds.size.width,self.bounds.size.height)]; } }\n\nIn this time, we use [scrollViewDidScroll:] method. If you are beginner, you may have some question like :\u201dHey, I don\u2019t see any UIScrollView in app from begin this blog, why is it ? \u201d or \u201cWhy can I still use [scollViewDidScroll:] even my class do NOT conform <UIScrollViewDelegate> ? or something else..\n\nHere is answer. TableView is build on top UIScrollView, It mean, there is UIScrollView inside UITableView, and we can use\u00a0any delegate\u2019s method\u00a0comfortable. We don\u2019t need to conform [UIScrollViewDelegate].\n\nLook at this block code above, It\u2019s similar what we did in [tableView:willDisplayCell:\u2026]. Just a bit different. I enumerate each cell which is visible, and apply transform.\n\nRun it again. This is what we want it to be ;]\n\n[su_button url=\u201dhttp:\/\/www.mediafire.com\/download\/e0fehra19v4f1f9\/FeParallaxTableView_SampleCode_Part_1.zip\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: cloud-download\u201d]Download[\/su_button]\n\n\n# The end\n\nTo implementing customize control, we should\u00a0have a deep knowledge about original Apple\u2019s control. As we did, using original control is very simple, but to build new control depend on what they look is another side. It\u2019s not easy.\n\nIn this blog, I covered what we need to build a customize control. And the next, I will improve it, create new\u00a0behaviour.\n\nThank for reading. Please drop comment if you have questions.\n\n\n","html":"<p><img class=\"size-medium wp-image-693 aligncenter\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01-300x300.jpg?resize=300%2C300\" alt=\"TableParallax_icon-01\" width=\"300\" height=\"300\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>This is the first blog about crafting customize control from scratch\u00a0that I call with epic name &#8220;Handmade code&#8221; ;]<\/p>\n<h1>Something to talk about UI \/ UX<\/h1>\n<p>Have you ever downloaded &amp; opened a famous iOS app like Page by FB\u00a0or something else ? Have you\u00a0surprised or\u00a0realized that these app never use &#8220;old-fashion&#8221; Apple&#8217;s control ?<\/p>\n<p>Today is a new generation \u00a0, if you can implement new feature, I can too. It mean. there is no difference, no fence between you and me, same as a developer. So here a question, what thing can make user\u00a0download\u00a0my app instead your app ?<\/p>\n<p>To answer this question, I decide make few survey with my friend. 80% answer is something similar about app&#8217;s\u00a0appearance. If I am asked by you, I also give same answer.<\/p>\n<p>Design UI \/ UX is a first\u00a0stage when developing application. As an independent iOS developer, we should have some knowledge about design principle. But in this blog, I should NOT mention it.\u00a0In the future, I will write some blog what take closer look\u00a0about\u00a0it.<\/p>\n<h1>Parallax\u00a0Effect<\/h1>\n<p><b style=\"color: #252525;\">Parallax scrolling<\/b><span style=\"color: #252525;\">\u00a0is a special\u00a0<\/span><a style=\"color: #0b0080;\" title=\"Scrolling\" href=\"http:\/\/en.wikipedia.org\/wiki\/Scrolling\">scrolling<\/a><span style=\"color: #252525;\">\u00a0technique in\u00a0<\/span><a style=\"color: #0b0080;\" title=\"Computer graphics\" href=\"http:\/\/en.wikipedia.org\/wiki\/Computer_graphics\">computer graphics<\/a><span style=\"color: #252525;\">, wherein background images move by the camera slower than foreground images, creating an illusion of depth in a 2D\u00a0<\/span><a style=\"color: #0b0080;\" title=\"Video game\" href=\"http:\/\/en.wikipedia.org\/wiki\/Video_game\">video game<\/a><span style=\"color: #252525;\">\u00a0and adding to the immersion.<\/span><\/p>\n<p>If you are game developer, parallax effect is in your hand.<\/p>\n<p>But right now, I&#8217;m going to bring incredible effect to iOS app. Here is result.<\/p>\n<p>Youtube :<\/p>\n<p><iframe width=\"420\" height=\"315\" src=\"\/\/www.youtube.com\/embed\/FyJJuCvBNTc\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h1>Coding time<\/h1>\n<p>Theory enough, we should take a real action. I will instruct you build customize Table View\u00a0with Parallax Effect.<\/p>\n<p>Create new project as SingleView Templete, \u00a0in this sample, I name &#8220;FeParallaxTableView_SampleCode&#8221;. Be sure name your prefix as you like and select devices is iPhone.<\/p>\n<p><img class=\"aligncenter size-full wp-image-711\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_1.png?resize=731%2C492\" alt=\"SampleCode_ParallaxTableView_1\" width=\"731\" height=\"492\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_1.png?w=731&amp;ssl=1 731w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_1.png?resize=300%2C202&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_1.png?resize=558%2C376&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_1.png?resize=655%2C441&amp;ssl=1 655w\" sizes=\"(max-width: 731px) 100vw, 731px\" data-recalc-dims=\"1\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>Create class FeParallaxTableView subclass UITableView. This is main class we will deal all time.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_3.png\"><img class=\"aligncenter size-full wp-image-709\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_3.png?resize=536%2C175\" alt=\"SampleCode_ParallaxTableView_3\" width=\"536\" height=\"175\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_3.png?w=536&amp;ssl=1 536w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_3.png?resize=300%2C98&amp;ssl=1 300w\" sizes=\"(max-width: 536px) 100vw, 536px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Next, create new class call &#8220;FeCell&#8221; sublcass UITableViewCell. Make sure you do NOT select &#8220;Create XIB file&#8221; option and select iPhone in dropbox.<\/p>\n<p>In fact, you need avoid creating XIB file. You should create cell\u00a0<span style=\"color: #000000;\">programmatically. <\/span><\/p>\n<p><span style=\"color: #000000;\">Because\u00a0<\/span><strong style=\"color: #000000;\">You cannot change the frame of an object if you&#8217;ve put it through Interface Builder.<\/strong><\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_4.png\"><img class=\"aligncenter size-full wp-image-708\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_4.png?resize=537%2C187\" alt=\"SampleCode_ParallaxTableView_4\" width=\"537\" height=\"187\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_4.png?w=537&amp;ssl=1 537w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_4.png?resize=300%2C104&amp;ssl=1 300w\" sizes=\"(max-width: 537px) 100vw, 537px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Here project look like<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_5.png\"><img class=\"aligncenter size-full wp-image-707\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_5.png?resize=260%2C430\" alt=\"SampleCode_ParallaxTableView_5\" width=\"260\" height=\"430\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_5.png?w=260&amp;ssl=1 260w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_5.png?resize=181%2C300&amp;ssl=1 181w\" sizes=\"(max-width: 260px) 100vw, 260px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h1>Photo Bundle<\/h1>\n<p>For saving your time, I prepared for you Photo Bundle. You can download it at here.<\/p>\n<p>[button text=&#8221;Photo Bundle&#8221; new_tab=&#8221;yes&#8221; size=&#8221;medium&#8221; \u00a0icon=&#8221;fa-cloud-download&#8221; color=&#8221;green&#8221; colored=&#8221;yes&#8221; url=&#8221;http:\/\/www.mediafire.com\/download\/l367m8hd4sfuwmr\/PhotoBundle.zip&#8221;]<\/p>\n<p>Extract it, and see in there.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_6.png\"><img class=\"aligncenter size-full wp-image-706\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_6.png?resize=417%2C181\" alt=\"SampleCode_ParallaxTableView_6\" width=\"417\" height=\"181\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_6.png?w=417&amp;ssl=1 417w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_6.png?resize=300%2C130&amp;ssl=1 300w\" sizes=\"(max-width: 417px) 100vw, 417px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>This bundle include 8 photos of big city in the world, and a Plist file. This plist file will help me parse data to app easily than more. If you open it, it simple a array contain name of string as each row.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png\"><img class=\"aligncenter size-full wp-image-712\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png?resize=598%2C282\" alt=\"SampleCode_ParallaxTableView_7\" width=\"598\" height=\"282\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png?w=598&amp;ssl=1 598w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png?resize=300%2C141&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_7.png?resize=558%2C263&amp;ssl=1 558w\" sizes=\"(max-width: 598px) 100vw, 598px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<h1>Delegation Pattern<\/h1>\n<p>FeParallaxTabbleView use pattern similar UITableView. It mean, we should have 2 protocol. One is DataSource with provide data for own custom table view, and one is Delegate has some useful method.<\/p>\n<p>Now, open FeParallaxTableView.h and add some code :<\/p>\n<pre class=\"lang:objc decode:true\">@protocol FeParallaxTableViewDataSource;\r\n@protocol FeParallaxTableViewDelegate;\r\n\r\n@interface FeParallaxTableView : UITableView\r\n\r\n\/\/ Delegate\r\n@property (weak, nonatomic) id&lt;FeParallaxTableViewDataSource&gt; delegateParallax;\r\n\r\n@end\r\n\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Data source\r\n@protocol FeParallaxTableViewDataSource &lt;NSObject&gt;\r\n@required\r\n\r\n\/\/ Image for cell at indexpath\r\n-(UIImage *) FeParallaxTableView:(FeParallaxTableView *) sender imageForCellAtIndexPath:(NSIndexPath *) indexPath;\r\n\r\n\/\/ Title for cell\r\n-(NSString *) FeParallaxTableView:(FeParallaxTableView *) sender titleForCellAtIndexPath:(NSIndexPath *) indexPath;\r\n\r\n\/\/ number Of Row\r\n-(NSInteger) numberOfRowForParallaxCell;\r\n\r\n@end\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Delegate\r\n@protocol FeParallaxTableViewDelegate &lt;NSObject&gt;\r\n\r\n\/\/ Add late\r\n\r\n@end<\/pre>\n<p>We have 2 important method in Data source here. As you\u00a0this name call, this method will provide image for each cell at specific index path.<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ Image for cell at indexpath\r\n-(UIImage *) FeParallaxTableView:(FeParallaxTableView *) sender imageForCellAtIndexPath:(NSIndexPath *) indexPath;<\/pre>\n<p>and the rest method will provide title for each cell<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ Title for cell\r\n-(NSString *) FeParallaxTableView:(FeParallaxTableView *) sender titleForCellAtIndexPath:(NSIndexPath *) indexPath;<\/pre>\n<p>Switch to .m file<\/p>\n<p>We override initalization method.<\/p>\n<pre class=\"lang:objc decode:true\">- (id)initWithFrame:(CGRect)frame\r\n{\r\n    self = [super initWithFrame:frame];\r\n    if (self)\r\n    {\r\n        \/\/ Initialization code\r\n        \r\n        self.delegate = self;\r\n        self.dataSource = self;\r\n        self.separatorStyle = UITableViewCellSeparatorStyleNone;\r\n        \r\n        \/\/ Register\r\n        [self registerClass:[FeCell class] forCellReuseIdentifier:kFeCellID];\r\n    }\r\n    return self;\r\n}<\/pre>\n<p>Make sure your already import FeCell and conform TableView&#8217;s protocol. And define new const for cell&#8217;s ID.<\/p>\n<pre class=\"lang:objc decode:true\">#define kFeCellID @\"FeCell\"<\/pre>\n<p>Add data source&#8217;s method<\/p>\n<pre class=\"lang:objc decode:true\">-(NSInteger) numberOfRowsInSection:(NSInteger)section\r\n{\r\n    return 1;\r\n}\r\n-(CGFloat) tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    return 180;\r\n}\r\n-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section\r\n{\r\n    NSUInteger numberOfCell = [_delegateParallax numberOfRowForParallaxCell];\r\n    return numberOfCell;\r\n}\r\n-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    FeCell *cell = [tableView dequeueReusableCellWithIdentifier:kFeCellID forIndexPath:indexPath];\r\n    \r\n    return cell;\r\n}\r\n-(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n\r\n}<\/pre>\n<p>Here we provide number of cell via method numberOfRowForParallaxCell, and return 1 section.<\/p>\n<h1>FeCell<\/h1>\n<p>Now, switch FeCell.m file. Add some property<\/p>\n<pre class=\"lang:objc decode:true\">@interface FeCell ()\r\n\/\/ Photo\r\n@property (strong, nonatomic) UIImageView *photoView;\r\n\r\n\/\/ Title\r\n@property (strong, nonatomic) UILabel *titleLbl;\r\n@end<\/pre>\n<p>and add 2 helper methods in .h file.<\/p>\n<pre class=\"lang:objc decode:true\">-(void) configureWithPhoto:(UIImage *) image title:(NSString *) title;\r\n-(void) configureFramePhoto:(CGRect) frame;<\/pre>\n<p>and .m file.<\/p>\n<pre class=\"lang:objc decode:true\">-(instancetype) initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier\r\n{\r\n    self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];\r\n    if (self)\r\n    {\r\n        [self initSubView];\r\n    }\r\n    return self;\r\n}\r\n-(void) initSubView\r\n{\r\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\r\n    \/\/ Photo\r\n    _photoView = [[UIImageView alloc] initWithFrame:CGRectMake(0, 0, 320, 568)];\r\n    _photoView.contentMode = UIViewContentModeScaleAspectFill;\r\n    \r\n    \/\/\/\/\/\/\/\/\/\/\/\/\r\n    \/\/ Title\r\n    _titleLbl = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 320, 180)];\r\n    _titleLbl.textAlignment = NSTextAlignmentCenter;\r\n    _titleLbl.font = [UIFont systemFontOfSize:44];\r\n    _titleLbl.textColor = [UIColor whiteColor];\r\n    \r\n    [self.contentView addSubview:_photoView];\r\n    [self.contentView addSubview:_titleLbl];\r\n}\r\n-(void) configureWithPhoto:(UIImage *)image title:(NSString *)title\r\n{\r\n    _photoView.image = image;\r\n    _titleLbl.text = title;\r\n}\r\n-(void) configureFramePhoto:(CGRect)frame\r\n{\r\n    _photoView.frame = frame;\r\n}<\/pre>\n<p>Do you notice I set frame for photoView with 568 px as height ? There is a reason for this.<\/p>\n<h1>First testing<\/h1>\n<p>We have just implemented some necessary method in FeParallaxTableView and FeCell for the first test. So the next step, we should test it, make sure it work ;]<\/p>\n<p>Go back to FeViewController.m file. Import two own file and conform\u00a0FeParallaxTableView&#8217;s data source. And copy this code to interface :<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ Table View\r\n@property (strong, nonatomic) FeParallaxTableView *tableView;\r\n\r\n\/\/ Arr of image\r\n@property (strong, nonatomic) NSMutableArray *arrPhotos;\r\n\r\n\/\/ Arr of title\r\n@property (strong, nonatomic) NSMutableArray *arrTitles;\r\n\r\n-(void) initPhoto;\r\n-(void) initTableView;<\/pre>\n<p>As your expectation, we should read City.plist and parse data to Photo array and Title Array.<\/p>\n<pre class=\"lang:objc decode:true\">- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n\t\/\/ Do any additional setup after loading the view, typically from a nib.\r\n    \r\n    [self initPhoto];\r\n    \r\n    [self initTableView];\r\n}\r\n\r\n-(void) initPhoto\r\n{\r\n    \/\/ Get photo from plist file\r\n    \/\/ Path\r\n    NSString *path = [[NSBundle mainBundle] pathForResource:@\"City\" ofType:@\"plist\"];\r\n    \r\n    \/\/ - 1\r\n    _arrTitles = [NSArray arrayWithContentsOfFile:path];\r\n    \r\n    \/\/ - 2\r\n    _arrPhotos = [NSMutableArray arrayWithCapacity:_arrTitles.count];\r\n    \r\n    \/\/ - 3\r\n    for (NSString *namePhoto in _arrTitles)\r\n    {\r\n        NSString *fullNamePhoto = [NSString stringWithFormat:@\"%@.jpg\",namePhoto];\r\n        UIImage *image = [UIImage imageNamed:fullNamePhoto];\r\n        \r\n        [_arrPhotos addObject:image];\r\n    }\r\n    \r\n}\r\n-(void) initTableView\r\n{\r\n    _tableView = [[FeParallaxTableView alloc] initWithFrame:self.view.bounds];\r\n    _tableView.delegateParallax = self;\r\n    [self.view addSubview:_tableView];\r\n}\r\n<\/pre>\n<ol>\n<li>\u00a0Just part plist file to Title array<\/li>\n<li>Init Photo array with capacity equal with titleArray&#8217;s count.<\/li>\n<li>Init UIImage with each name and add to Photo Array.<\/li>\n<\/ol>\n<p>And implement required method.<\/p>\n<pre class=\"lang:objc decode:true\">#pragma mark - FeParallax Table View\r\n-(UIImage *) FeParallaxTableView:(FeParallaxTableView *)sender imageForCellAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    UIImage *image = _arrPhotos[indexPath.row];\r\n    return image;\r\n}\r\n-(NSString *) FeParallaxTableView:(FeParallaxTableView *)sender titleForCellAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    NSString *title = _arrTitles[indexPath.row];\r\n    \r\n    return title;\r\n}\r\n-(NSInteger) numberOfRowForParallaxCell\r\n{\r\n    return _arrPhotos.count;\r\n}<\/pre>\n<p>Click run on iPhone 4&#8243; and here is result.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_10.png\"><img class=\"aligncenter wp-image-720\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_10.png?resize=214%2C380\" alt=\"SampleCode_ParallaxTableView_10\" width=\"214\" height=\"380\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_10.png?w=320&amp;ssl=1 320w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_10.png?resize=169%2C300&amp;ssl=1 169w\" sizes=\"(max-width: 214px) 100vw, 214px\" data-recalc-dims=\"1\" \/><\/a>\u00a0 Before continue reading, confirm you has same result as photo above.<\/p>\n<p>Next step, we add some code to bring photo to each cell.<\/p>\n<p>Now, Go back FeParallaxTableView.m file and look at cellAtIndexPath method.<\/p>\n<p>We need some code to add photo and title into cell.<\/p>\n<pre class=\"lang:objc decode:true\">-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    FeCell *cell = [tableView dequeueReusableCellWithIdentifier:kFeCellID forIndexPath:indexPath];\r\n    \r\n    \/\/ Clip to bound\r\n    cell.clipsToBounds = YES;\r\n    cell.contentMode = UIViewContentModeScaleAspectFill;\r\n    \r\n    \/\/ Get photo\r\n    UIImage *image = [_delegateParallax FeParallaxTableView:self imageForCellAtIndexPath:indexPath];\r\n    NSString *title = [_delegateParallax FeParallaxTableView:self titleForCellAtIndexPath:indexPath];\r\n    \r\n    \/\/ Configure\r\n    [cell configureWithPhoto:image title:title];\r\n\r\n    return cell;\r\n}<\/pre>\n<p>Run it again.<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_11.png\"><img class=\"aligncenter wp-image-721\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_11.png?resize=242%2C430\" alt=\"SampleCode_ParallaxTableView_11\" width=\"242\" height=\"430\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_11.png?w=320&amp;ssl=1 320w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_11.png?resize=169%2C300&amp;ssl=1 169w\" sizes=\"(max-width: 242px) 100vw, 242px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Look beautiful, but if you take closer look, you should notice something wrong. Photo in each cell do NOT same as we expect.<\/p>\n<p>Let check sample photo again.<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png\"><img class=\"aligncenter wp-image-725\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png?resize=242%2C430\" alt=\"SampleCode_ParallaxTableView_13\" width=\"242\" height=\"430\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png?w=640&amp;ssl=1 640w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png?resize=169%2C300&amp;ssl=1 169w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png?resize=577%2C1024&amp;ssl=1 577w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_13.png?resize=558%2C990&amp;ssl=1 558w\" sizes=\"(max-width: 242px) 100vw, 242px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>With closer look, we can see, our expectation is not the same as It\u00a0should be. The position of photo in each cells is different. So, go back to resource folder, look each photo again, you may realize that photo&#8217;s\u00a0offset was transform by denta.<\/p>\n<p>Now the time we should deal with new delegate method, are available\u00a0in iOS 7.<\/p>\n<pre class=\"lang:objc decode:true\">-(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n   \/\/1\r\n    FeCell *feCell = (FeCell *) cell;\r\n    \r\n    \/\/2\r\n    \/\/ Frame\r\n    CGFloat cellY = feCell.frame.origin.y;\r\n    CGFloat denta = cellY - self.contentOffset.y;\r\n\r\n    \/\/3    \r\n    [feCell configureFramePhoto:CGRectMake(0, -denta  , self.bounds.size.width,self.bounds.size.height)];\r\n}<\/pre>\n<p>This is <strong>[tableview:willDisplayCell:forRowAtIndexPath]<\/strong>. This method will be call when new cell will display into tableView. Because, this method is called after [tableView:cellForRowAtIndexPath:], it mean, your cell is already initializer. It&#8217;s useful when you want to apply transform to cell before cell will be display.<\/p>\n<p>But, you should\u00a0bear in mind that it&#8217;s only available in iOS 7 and above.<\/p>\n<p>So, I explain what i did :<\/p>\n<ol>\n<li>Just cast original cell to FeCell. Because, we will use own method in the next step.<\/li>\n<li>If you are brainy guy, the denta property may figure out by subtracting cell&#8217;s y offset to UITableView&#8217;s contentOffset y.<\/li>\n<li>Just transform UIImageView with this denta.<\/li>\n<\/ol>\n<p>Run it, and check it out ;]<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_14.png\"><img class=\"aligncenter wp-image-726\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_14.png?resize=215%2C382\" alt=\"SampleCode_ParallaxTableView_14\" width=\"215\" height=\"382\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_14.png?w=320&amp;ssl=1 320w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_14.png?resize=169%2C300&amp;ssl=1 169w\" sizes=\"(max-width: 215px) 100vw, 215px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Everything is OK, but when you scroll, something went wrong ;[. Don&#8217;t need to be disappointed. We will make it work correctly right now.<\/p>\n<p>So,we \u00a0add some code below :<\/p>\n<pre class=\"lang:objc decode:true\">-(void) scrollViewDidScroll:(UIScrollView *)scrollView\r\n{\r\n    for (NSIndexPath *indexPath in self.indexPathsForVisibleRows)\r\n    {\r\n        FeCell *cell = (FeCell *)[self cellForRowAtIndexPath:indexPath];\r\n        \r\n        CGFloat cellY = cell.frame.origin.y;\r\n        CGFloat denta = cellY - self.contentOffset.y;\r\n        \r\n        [cell configureFramePhoto:CGRectMake(0,-denta , self.bounds.size.width,self.bounds.size.height)];\r\n    }\r\n}<\/pre>\n<p>In this time, we use [scrollViewDidScroll:] method. If you are beginner, you may have some question like :&#8221;Hey, I don&#8217;t see any UIScrollView in app from begin this blog, why is it ? &#8221; or &#8220;Why can I still use [scollViewDidScroll:] even my class do NOT conform &lt;UIScrollViewDelegate&gt; ? or something else..<\/p>\n<p>Here is answer. TableView is build on top UIScrollView, It mean, there is UIScrollView inside UITableView, and we can use\u00a0any delegate&#8217;s method\u00a0comfortable. We don&#8217;t need to conform [UIScrollViewDelegate].<\/p>\n<p>Look at this block code above, It&#8217;s similar what we did in [tableView:willDisplayCell:&#8230;]. Just a bit different. I enumerate each cell which is visible, and apply transform.<\/p>\n<p>Run it again. This is what we want it to be ;]<\/p>\n<p>[su_button url=&#8221;http:\/\/www.mediafire.com\/download\/e0fehra19v4f1f9\/FeParallaxTableView_SampleCode_Part_1.zip&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: cloud-download&#8221;]Download[\/su_button]<\/p>\n<h1>The end<\/h1>\n<p>To implementing customize control, we should\u00a0have a deep knowledge about original Apple&#8217;s control. As we did, using original control is very simple, but to build new control depend on what they look is another side. It&#8217;s not easy.<\/p>\n<p>In this blog, I covered what we need to build a customize control. And the next, I will improve it, create new\u00a0behaviour.<\/p>\n<p>Thank for reading. Please drop comment if you have questions.<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 17 Jun 2014 08:17:20 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:31:37 +0000","updated_by":1,"published_at":"Tue, 17 Jun 2014 08:17:20 +0000","published_by":1},{"id":739,"title":"Handmade Code: FeSlideFilterView","slug":"handmade-code-feslidefilterview","markdown":"\n\n# ![FeSlideFilter_icon](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FeSlideFilter_icon-e1403680938441-300x300.jpg?resize=300%2C300)\n\n\n# Fe Slide Filter View\n\nHi everybody as an iOS developer like me ;]\n\nI have just released my customize control in GitHub.\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/FeSlideFilter\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github\u201d]Github[\/su_button]\n\nHere video as sample :  \n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"615\" src=\"\/\/www.youtube.com\/embed\/KUN6bs9pl74\" width=\"820\"><\/iframe>\n\n\n# Technical\n\nFeSlideFilter was build on top UIView. I combine UIScrollView with paging for title filter, and Mask layer\u00a0technique. Here is what\u2019s going on:\n\n- Subclass UIView\n- Using UIScrollView with paging for title filter\n- Using LUT filter technique for apply effect to\u00a0photo\n- Conform UIScrollViewDelegate for interactive control \u2013 slide filter by your touch.\n- Using Layer\u2019s mask technique for implementing two-side previewer.\n- Provide own delegate and datasource.\n\n\n# License\n\nFeSlideFilterView is under MIT license.\n\nFeel free to do whatever you like ;]\n\nIf you use my control in your app, jut please tell me know ^_^\n\n\n# Question & Answer\n\nI\u2019m very glad if you drop a comment and discuss about this control. If something you don\u2019t understand after taking a deep surgery about my control. Give me question, and I will reply soon.\n\n[![Buy Me A Coffee :) @ ko-fi.com](https:\/\/i2.wp.com\/ko-fi.com\/img\/button-5.png?w=850)](http:\/\/ko-fi.com?i=8d164b8b19a5f5c)\n\n\u00a0\n\n\n","html":"<h1><img class=\"size-medium wp-image-692 aligncenter\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/FeSlideFilter_icon-e1403680938441-300x300.jpg?resize=300%2C300\" alt=\"FeSlideFilter_icon\" width=\"300\" height=\"300\" data-recalc-dims=\"1\" \/><\/h1>\n<h1>Fe Slide Filter View<\/h1>\n<p>Hi everybody as an iOS developer like me ;]<\/p>\n<p>I have just released my customize control in GitHub.<\/p>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/FeSlideFilter&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github&#8221;]Github[\/su_button]<\/p>\n<p>Here video as sample :<br \/>\n<iframe width=\"820\" height=\"615\" src=\"\/\/www.youtube.com\/embed\/KUN6bs9pl74\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h1>Technical<\/h1>\n<p>FeSlideFilter was build on top UIView. I combine UIScrollView with paging for title filter, and Mask layer\u00a0technique. Here is what&#8217;s going on:<\/p>\n<ul>\n<li>Subclass UIView<\/li>\n<li>Using UIScrollView with paging for title filter<\/li>\n<li>Using LUT filter technique for apply effect to\u00a0photo<\/li>\n<li>Conform UIScrollViewDelegate for interactive control &#8211; slide filter by your touch.<\/li>\n<li>Using Layer&#8217;s mask technique for implementing two-side previewer.<\/li>\n<li>Provide own delegate and datasource.<\/li>\n<\/ul>\n<h1>License<\/h1>\n<p>FeSlideFilterView is under MIT license.<\/p>\n<p>Feel free to do whatever you like ;]<\/p>\n<p>If you use my control in your app, jut please tell me know ^_^<\/p>\n<h1>Question &amp; Answer<\/h1>\n<p>I&#8217;m very glad if you drop a comment and discuss about this control. If something you don&#8217;t understand after taking a deep surgery about my control. Give me question, and I will reply soon.<\/p>\n<p><a href=\"http:\/\/ko-fi.com?i=8d164b8b19a5f5c\" target=\"_blank\"><img style=\"border: 0px;\" src=\"https:\/\/i2.wp.com\/ko-fi.com\/img\/button-5.png?w=850\" alt=\"Buy Me A Coffee :) @ ko-fi.com\" border=\"0\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/FeSlideFilter_icon-e1478493200976.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 25 Jun 2014 07:06:25 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:29:48 +0000","updated_by":1,"published_at":"Wed, 25 Jun 2014 07:06:25 +0000","published_by":1},{"id":746,"title":"Handmade Code: Parallax Table View \u2013 Part 2","slug":"handmade-code-parallax-table-view-part-2","markdown":"\n![TableParallax_icon-01](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01-300x300.jpg?resize=300%2C300)\n\nHi guy, if your are new reader in this series handmade code. I strongly recommend read [part 1](http:\/\/nghiatran.me\/index.php\/handmade-code-parallax-table-view\/ \"Part 1\") before continue.\n\n\n# Improve UX\n\nHere is what we did in a previous part.  \n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"450\" src=\"\/\/www.youtube.com\/embed\/DFUNjN3YUhQ\" width=\"600\"><\/iframe>\n\nEverything is done. But if you are perfectionist guy, you should be angry. Because, animation don\u2019t feel naturally. It like \u201cfake\u201d parallax.\n\nYes, this is things we need improve more.\n\n\n# Real parallax effect\n\nWe need add velocity to photos in each cell.\n\nTime to go back \u00a0FeParallaxTableView.m file.\n\n-(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath { FeCell *feCell = (FeCell *) cell; \/\/ Frame CGFloat cellY = feCell.frame.origin.y; CGFloat denta = cellY - self.contentOffset.y; \/\/ Get natural CGFloat threshold = 200.0f; CGFloat percent = denta \/ self.bounds.size.height; CGFloat dentaParallax = percent * threshold; [feCell configureFramePhoto:CGRectMake(0,-denta + dentaParallax , self.bounds.size.width,self.bounds.size.height)]; }\n\nHere, I have just add a bit code in [tableView:willDisplayCell:forRowAtIndexPath:]. In this time, i calculator new variable which called \u201cdentaParallax\u201d.\n\nAs according to its name, this variable was defined depend on How much the photo in cell should be translated. I take the height of screen\u00a0as landmark, and a\u00a0percent of parallax\u00a0is division between denta and landmark.\n\nThen, I convert percent to px, by multiplying percent with threshold variable. You can choose any native number as you like. The large number will affected the speed of parallax effect. So, with 3,5\u2033 or 4\u2033 screen, 200px is the best number for parallax effect.\n\nBut, it\u2019s not the end. We should add some code above into [scrollViewDidScroll:].\n\n-(void) scrollViewDidScroll:(UIScrollView *)scrollView { for (NSIndexPath *indexPath in self.indexPathsForVisibleRows) { FeCell *cell = (FeCell *)[self cellForRowAtIndexPath:indexPath]; \/\/ Frame CGFloat cellY = cell.frame.origin.y; CGFloat denta = cellY - self.contentOffset.y; \/\/ Get natural CGFloat threshold = 200.0f; CGFloat percent = denta \/ self.bounds.size.height; CGFloat dentaParallax = percent * threshold; [cell configureFramePhoto:CGRectMake(0,-denta + dentaParallax , self.bounds.size.width,self.bounds.size.height)]; } }\n\nRun it again, you will be surprised ;]  \n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"450\" src=\"\/\/www.youtube.com\/embed\/m1VkOUtGtls\" width=\"600\"><\/iframe>\n\n\n# Just a bit\n\nHey, before closing my blog, please wait me a minute.\n\nDo you notice when scrollView is stopped, the upper cell\u2019s photo is overlaid\u00a0? The title and photo were hidden\u00a0a part by status bar.\n\n[![SampleCode_ParallaxTableView_15](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_15.png?resize=320%2C480)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_15.png)\n\nAnd what I expect is the scrollView can\u00a0adjust content offset to nice position itself.\n\n-(void) scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate { if (!decelerate) { [self scrollToNearestRow]; } } -(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView { [self scrollToNearestRow]; }\n\nWe handle two common situation.\n\n1. The first, when I scroll a scrollView and lift\u00a0my\u00a0finger up\u00a0while the scrollView is stopped.\n2. And the last, I drag scrollView and lift my finger up again, but scrollView is decelerating in this time.\n\nAnd I use 2 method above. One is [scrollViewDidEndDragging:willDecelerate:], the rest is [scrollViewDidEndDecelerating:];\n\n-(void) scrollToNearestRow { CGPoint point = self.contentOffset; \/\/ Cell NSIndexPath *indexPath = [self indexPathForRowAtPoint:point]; FeCell *cell = (FeCell *)[self cellForRowAtIndexPath:indexPath]; CGFloat denta = (cell.frame.origin.y + cell.frame.size.height) - point.y; CGFloat percent = denta \/ (float)cell.frame.size.height; if (percent > 0.5) { [self scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:YES]; } else { [self scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:indexPath.row + 1 inSection:0] atScrollPosition:UITableViewScrollPositionTop animated:YES]; } }\n\nSo, here is final result.  \n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"450\" src=\"\/\/www.youtube.com\/embed\/AIpDvKbn8-E\" width=\"600\"><\/iframe>\n\n\n# Sample Project\n\n[su_button url=\u201dhttp:\/\/www.mediafire.com\/?6zc2t286edy14\u2033 target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: cloud-download\u201d]Download[\/su_button]\n\n\u00a0\n\n\u00a0\n\n\n","html":"<p><img class=\"size-medium wp-image-693 aligncenter\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01-300x300.jpg?resize=300%2C300\" alt=\"TableParallax_icon-01\" width=\"300\" height=\"300\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Hi guy, if your are new reader in this series handmade code. I strongly recommend read <a title=\"Part 1\" href=\"http:\/\/nghiatran.me\/index.php\/handmade-code-parallax-table-view\/\" target=\"_blank\">part 1<\/a> before continue.<\/p>\n<h1>Improve UX<\/h1>\n<p>Here is what we did in a previous part.<br \/>\n<iframe width=\"600\" height=\"450\" src=\"\/\/www.youtube.com\/embed\/DFUNjN3YUhQ\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<p>Everything is done. But if you are perfectionist guy, you should be angry. Because, animation don&#8217;t feel naturally. It like &#8220;fake&#8221; parallax.<\/p>\n<p>Yes, this is things we need improve more.<\/p>\n<h1>Real parallax effect<\/h1>\n<p>We need add velocity to photos in each cell.<\/p>\n<p>Time to go back \u00a0FeParallaxTableView.m file.<\/p>\n<pre class=\"lang:objc decode:true\">-(void) tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath\r\n{\r\n    FeCell *feCell = (FeCell *) cell;\r\n    \r\n    \/\/ Frame\r\n    CGFloat cellY = feCell.frame.origin.y;\r\n    CGFloat denta = cellY - self.contentOffset.y;\r\n    \r\n    \/\/ Get natural\r\n    CGFloat threshold = 200.0f;\r\n    CGFloat percent = denta \/ self.bounds.size.height;\r\n    CGFloat dentaParallax = percent * threshold;\r\n\r\n    [feCell configureFramePhoto:CGRectMake(0,-denta  + dentaParallax , self.bounds.size.width,self.bounds.size.height)];\r\n}<\/pre>\n<p>Here, I have just add a bit code in [tableView:willDisplayCell:forRowAtIndexPath:]. In this time, i calculator new variable which called &#8220;dentaParallax&#8221;.<\/p>\n<p>As according to its name, this variable was defined depend on How much the photo in cell should be translated. I take the height of screen\u00a0as landmark, and a\u00a0percent of parallax\u00a0is division between denta and landmark.<\/p>\n<p>Then, I convert percent to px, by multiplying percent with threshold variable. You can choose any native number as you like. The large number will affected the speed of parallax effect. So, with 3,5&#8243; or 4&#8243; screen, 200px is the best number for parallax effect.<\/p>\n<p>But, it&#8217;s not the end. We should add some code above into [scrollViewDidScroll:].<\/p>\n<pre class=\"lang:objc decode:true\">-(void) scrollViewDidScroll:(UIScrollView *)scrollView\r\n{\r\n    for (NSIndexPath *indexPath in self.indexPathsForVisibleRows)\r\n    {\r\n        FeCell *cell = (FeCell *)[self cellForRowAtIndexPath:indexPath];\r\n        \r\n        \/\/ Frame\r\n        CGFloat cellY = cell.frame.origin.y;\r\n        CGFloat denta = cellY - self.contentOffset.y;\r\n        \r\n        \/\/ Get natural\r\n        CGFloat threshold = 200.0f;\r\n        CGFloat percent = denta \/ self.bounds.size.height;\r\n        CGFloat dentaParallax = percent * threshold;\r\n\r\n        [cell configureFramePhoto:CGRectMake(0,-denta + dentaParallax , self.bounds.size.width,self.bounds.size.height)];\r\n    }\r\n}<\/pre>\n<p>Run it again, you will be surprised ;]<br \/>\n<iframe width=\"600\" height=\"450\" src=\"\/\/www.youtube.com\/embed\/m1VkOUtGtls\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h1>Just a bit<\/h1>\n<p>Hey, before closing my blog, please wait me a minute.<\/p>\n<p>Do you notice when scrollView is stopped, the upper cell&#8217;s photo is overlaid\u00a0? The title and photo were hidden\u00a0a part by status bar.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_15.png\"><img class=\"aligncenter size-full wp-image-750\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_15.png?resize=320%2C480\" alt=\"SampleCode_ParallaxTableView_15\" width=\"320\" height=\"480\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_15.png?w=320&amp;ssl=1 320w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/SampleCode_ParallaxTableView_15.png?resize=200%2C300&amp;ssl=1 200w\" sizes=\"(max-width: 320px) 100vw, 320px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>And what I expect is the scrollView can\u00a0adjust content offset to nice position itself.<\/p>\n<pre class=\"lang:objc decode:true\">-(void) scrollViewDidEndDragging:(UIScrollView *)scrollView willDecelerate:(BOOL)decelerate\r\n{\r\n    if (!decelerate)\r\n    {\r\n        [self scrollToNearestRow];\r\n    }\r\n}\r\n-(void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView\r\n{\r\n    [self scrollToNearestRow];\r\n}<\/pre>\n<p>We handle two common situation.<\/p>\n<ol>\n<li>The first, when I scroll a scrollView and lift\u00a0my\u00a0finger up\u00a0while the scrollView is stopped.<\/li>\n<li>And the last, I drag scrollView and lift my finger up again, but scrollView is decelerating in this time.<\/li>\n<\/ol>\n<p>And I use 2 method above. One is [scrollViewDidEndDragging:willDecelerate:], the rest is [scrollViewDidEndDecelerating:];<\/p>\n<pre class=\"lang:objc decode:true\">-(void) scrollToNearestRow\r\n{\r\n    CGPoint point = self.contentOffset;\r\n    \r\n    \/\/ Cell\r\n    NSIndexPath *indexPath = [self indexPathForRowAtPoint:point];\r\n    FeCell *cell = (FeCell *)[self cellForRowAtIndexPath:indexPath];\r\n    \r\n    CGFloat denta = (cell.frame.origin.y + cell.frame.size.height) - point.y;\r\n    CGFloat percent = denta \/ (float)cell.frame.size.height;\r\n    \r\n    if (percent &gt; 0.5)\r\n    {\r\n        [self scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionTop animated:YES];\r\n    }\r\n    else\r\n    {\r\n        [self scrollToRowAtIndexPath:[NSIndexPath indexPathForRow:indexPath.row + 1 inSection:0] atScrollPosition:UITableViewScrollPositionTop animated:YES];\r\n    }\r\n    \r\n}<\/pre>\n<p>So, here is final result.<br \/>\n<iframe width=\"600\" height=\"450\" src=\"\/\/www.youtube.com\/embed\/AIpDvKbn8-E\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h1>Sample Project<\/h1>\n<p>[su_button url=&#8221;http:\/\/www.mediafire.com\/?6zc2t286edy14&#8243; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: cloud-download&#8221;]Download[\/su_button]<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/TableParallax_icon-01.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 28 Jun 2014 10:10:28 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:28:30 +0000","updated_by":1,"published_at":"Sat, 28 Jun 2014 10:10:28 +0000","published_by":1},{"id":758,"title":"Responsive Interaction Categories","slug":"responsive-interaction-categories","markdown":"\n![Logo_512](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/Logo_512-300x300.jpg?resize=300%2C300)\n\n\u00a0\n\nHi everyone, finally, I\u2019ve just released\u00a0some stuffs.\n\nThese\u00a0customize controls and categories was inspired by Google Material Design.\n\nIf you\u2019ve not heard what Google Martial Design is. Please\u00a0take a moment to review what is does.\n\nHere is useful link for you : [Google Martial Design](https:\/\/www.google.com\/design\/spec\/animation\/responsive-interaction.html#responsive-interaction-surface-response \"Google\")\n\n\n# Google Material Design\n\nAs you see, Martial Design cove many awesome thing for our. Include Animation, design, layout, pattern\u2026 It\u2019s useful things for you as iOS developer.\n\nDo you recognize these animation is just for Android dev ? In the reusable world, everything android has, iOS should be too.\n\n\n# Github\n\nIf you need more further information or how to add it to your app.\n\nFeel free to download and reuse comfortable.\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/Responsive-Interaction-Control\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]Github[\/su_button]\n\n\n# What\u2019s inside\n\n### UILabe \u2013 Responsive Interaction Category\n\nJust include **UILabel+ResponsiveInteration** category to your app.\n\nCall** [myLabel activeResponsiveInteraction].\u00a0**Don\u2019t need to subclass UILabel. One method for active or disable effect.\n\nWhen use touch or hover their finger, these UILabel will be lifted up, make they notice than more.\n\n[![UILabel_Responsive_Interaction](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UILabel_Responsive_Interaction.gif?resize=314%2C587)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UILabel_Responsive_Interaction.gif)\n\n\u00a0\n\n### UIButton\u00a0\u2013 Responsive Interaction Category\n\nVery similar above, but these effect don\u2019t affect Button\u2019s Target-Action pattern.\n\n[![UIButton_Responsive_Interaction](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UIButton_Responsive_Interaction.gif?resize=314%2C587)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UIButton_Responsive_Interaction.gif)\n\n### Radial Button\n\nA subclass of UIButton. You can combine many button to one button.\n\n[![RadialButton](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RadialButton.gif?resize=314%2C587)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RadialButton.gif)\n\n### Ripple Button\n\nThis control was inspired with Surface Reaction Effect by Google.\n\n[![RippleButton](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RippleButton.gif?resize=314%2C587)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RippleButton.gif)\n\n\u00a0\n\n\n# Get confused about technical\u00a0side ?\n\nIf you have any question about technical side, just drop your question below, I will reply you soon ;]\n\nThank for using this.\n\n\n","html":"<p><img class=\"size-medium wp-image-757 aligncenter\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/Logo_512-300x300.jpg?resize=300%2C300\" alt=\"Logo_512\" width=\"300\" height=\"300\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg?w=512&amp;ssl=1 512w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>Hi everyone, finally, I&#8217;ve just released\u00a0some stuffs.<\/p>\n<p>These\u00a0customize controls and categories was inspired by Google Material Design.<\/p>\n<p>If you&#8217;ve not heard what Google Martial Design is. Please\u00a0take a moment to review what is does.<\/p>\n<p>Here is useful link for you : <a title=\"Google\" href=\"https:\/\/www.google.com\/design\/spec\/animation\/responsive-interaction.html#responsive-interaction-surface-response\">Google Martial Design<\/a><\/p>\n<h1>Google Material Design<\/h1>\n<p>As you see, Martial Design cove many awesome thing for our. Include Animation, design, layout, pattern&#8230; It&#8217;s useful things for you as iOS developer.<\/p>\n<p>Do you recognize these animation is just for Android dev ? In the reusable world, everything android has, iOS should be too.<\/p>\n<h1>Github<\/h1>\n<p>If you need more further information or how to add it to your app.<\/p>\n<p>Feel free to download and reuse comfortable.<\/p>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/Responsive-Interaction-Control&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]Github[\/su_button]<\/p>\n<h1>What&#8217;s inside<\/h1>\n<h3>UILabe &#8211; Responsive Interaction Category<\/h3>\n<p>Just include <strong>UILabel+ResponsiveInteration<\/strong> category to your app.<\/p>\n<p>Call<strong> [myLabel activeResponsiveInteraction].\u00a0<\/strong>Don&#8217;t need to subclass UILabel. One method for active or disable effect.<\/p>\n<p>When use touch or hover their finger, these UILabel will be lifted up, make they notice than more.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UILabel_Responsive_Interaction.gif\"><img class=\"aligncenter size-full wp-image-810\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UILabel_Responsive_Interaction.gif?resize=314%2C587\" alt=\"UILabel_Responsive_Interaction\" width=\"314\" height=\"587\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h3>UIButton\u00a0&#8211; Responsive Interaction Category<\/h3>\n<p>Very similar above, but these effect don&#8217;t affect Button&#8217;s Target-Action pattern.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UIButton_Responsive_Interaction.gif\"><img class=\"aligncenter size-full wp-image-809\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/UIButton_Responsive_Interaction.gif?resize=314%2C587\" alt=\"UIButton_Responsive_Interaction\" width=\"314\" height=\"587\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<h3>Radial Button<\/h3>\n<p>A subclass of UIButton. You can combine many button to one button.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RadialButton.gif\"><img class=\"aligncenter size-full wp-image-808\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RadialButton.gif?resize=314%2C587\" alt=\"RadialButton\" width=\"314\" height=\"587\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<h3>Ripple Button<\/h3>\n<p>This control was inspired with Surface Reaction Effect by Google.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RippleButton.gif\"><img class=\"aligncenter size-full wp-image-807\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/RippleButton.gif?resize=314%2C587\" alt=\"RippleButton\" width=\"314\" height=\"587\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h1>Get confused about technical\u00a0side ?<\/h1>\n<p>If you have any question about technical side, just drop your question below, I will reply you soon ;]<\/p>\n<p>Thank for using this.<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Logo_512.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 03 Jul 2014 16:33:25 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:18:23 +0000","updated_by":1,"published_at":"Thu, 03 Jul 2014 16:33:25 +0000","published_by":1},{"id":762,"title":"Filter Me: Texture & Blend Modem - Part 3","slug":"filter-me-texture-blend-mode-part-3","markdown":"\n![filterMeIcon_part_2](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2-300x300.jpg?resize=300%2C300)\n\n\u00a0\n\nIn two previous parts of Filter Me series tutorial, I covered some useful technique for applying a filter to photo. Here is a shortcut for you: [Part 1](http:\/\/nghiatran.me\/index.php\/filter-me-tone-curve-part-1\/ \"Part 1\") and [Part 2](http:\/\/nghiatran.me\/index.php\/filter-me-color-lookup-table-part-2\/ \"Part 2\").\n\nIf you a new guy, I strongly recommend you should spend couple hours for reading Part 1 and part 2, and ensure you have some knowledge about Core Image and GPUImage before continue.\n\n\n# Before reading\n\nIn this blog, I use GPUImage in entity project. Rather than being an introduction to the GPUImage framework, I assume you are familiar with the basics and focused on\u00a0the way to implement filter function like Instagram does.\n\nFor saving your time, I google some nice blog about GPUImage :\n\n- [GPUImage](https:\/\/github.com\/BradLarson\/GPUImage \"GPUImage\") by Brad Larson\n- [Build a Photo App with GPUImage ](http:\/\/code.tutsplus.com\/tutorials\/build-a-photo-app-with-gpuimage--mobile-12223 \"Build a Photo App\")by\u00a0Mark Hammonds\n- [Image Processing using GPUImage](http:\/\/www.theappguruz.com\/tutorial\/ios-image-processsing-using-gpuimage-framework\/ \"Image Processing using GPUImage\") by\u00a0<span style=\"color: #444444;\">Swati Choksi.<\/span>\n\n\n# What next?\n\nTo create an app like Instagram\u2019s filters, I will cover everything we need to implement\u00a0it, including apply texture and adjust blend mode into the photo.\n\nIn brief, what we will do, I have shown you a gallery of photos I did in an hour ago.\n\n<script data-cfasync=\"false\" type=\"text\/javascript\">var lsjQuery = jQuery;<\/script><script data-cfasync=\"false\" type=\"text\/javascript\">\r\nlsjQuery(document).ready(function() {\r\nif(typeof lsjQuery.fn.layerSlider == \"undefined\") {\r\nif( window._layerSlider &&\u00a0window._layerSlider.showNotice) { \r\nwindow._layerSlider.showNotice('layerslider_1','jquery');\r\n}\r\n} else {\r\nlsjQuery(\"#layerslider_1\").layerSlider({sliderVersion: '', skinsPath: 'https:\/\/nghiatran.me\/wp-content\/plugins\/LayerSlider\/static\/layerslider\/skins\/', showCircleTimer: false});\r\n}\r\n});\r\n<\/script><div class=\"ls-wp-container fitvidsignore\" id=\"layerslider_1\" style=\"width:1280px;height:720px;margin:0 auto;margin-bottom: 0px;\"><div class=\"ls-slide\" data-ls=\"kenburnsscale:1.2;\">![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=640%2C640&ssl=1)![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=640%2C640&ssl=1)<\/div><\/div>Steps to do\u00a0\u00a0:\n\n1. Download vintage texture brush from Google\n2. Using Photoshop and create your own texture ( by combining\u00a0brush and blend mode)\n3. Apply this texture to your photo by using GPUImage.\n4. Refactor code, bring animation for transiting photo.\n\nThe first photo is an original photo. As you see, each next photo has a different style, by adding textures like grunge, you can turn your photo like Retro, Vintage style.\n\n\n# Step 1 \u2013 Prepare yourself\n\nBefore starting work, We should download awesome brush for vintage style in google. Here is what I find\u00a0[bursh](http:\/\/speckyboy.com\/2012\/02\/20\/20-subtle-and-soft-textured-photoshop-brush-packs-225-brushes\/ \"Awesome brush\").\n\nDownload what you want, and run it.\n\n[![FilterMe_Part3_1](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_1.png?resize=410%2C54)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_1.png)\n\n\n# Step 2 \u2013 Photoshop is God\n\nAnd open Photoshop app and create a new canvas with 640px as width and height.\n\n[![FilterMe_Part3_2](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png?resize=607%2C425)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png)\n\nEnsure you choose Color Mode is RGB Color, not CMYK.\n\nDrag this [original photo](http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/07\/originalPhoto.jpg \"Original Photo\") to your canvas, and create new layer for your texture\n\n[![FilterMe_Part3_4](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_4.png?resize=201%2C121)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_4.png)\n\nNext, open your brush. As you see, there are many brush texture in your gallery.\n\n[![FilterMe_Part3_5](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_5.png?resize=442%2C419)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_5.png)Pick one, adjust a size and draw to photo whatever you like. If you want to improve brush\u2019s effect, you can choose blend mode in the Layer panel.\n\n[![FilterMe_Part3_SlideShow_3](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=640%2C640)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg)\n\nAbove photo is the result when I combine brush which I downloaded from the Internet with**\u00a0Blend mode is Linear Burn.**\n\nFeel free for adjusting option before saving.\n\n\n## Save your texture\n\nYou must save your texture as PNG, and make sure you just turn \u201cthe eye\u201d of texture layer. Turn off \u201cthe eye\u201d of the original photo.\n\n[![texture_linearBurnBlend_1](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1-300x300.png?resize=300%2C300)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png)\n\n\u00a0\n\nBunch of texture which I have created and collected for you.\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/FilterMe-Texture\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: cloud-download\u201d]Textures[\/su_button]\n\n\n# Step 3 \u2013 GPUImage\n\nNow is a time we turn miracle to your app. Just drink a sip coffee and see what will happen next ;]\n\nInstead of talking about overview GPUImage framework again, I will mention directly what is inside GPUImage we should deal with it.\n\nThe GPUImage library provides plenty of useful classes for blending texture with the photo. Such as\u00a0**GPUImageNormalBlendFilter** for normal blend,\u00a0**GPUImageOverlayBlendFilter** for overlay blend,\u00a0**GPUImageMultiplyBlendFilter** for multiply blend and so on. All of them is subclass by GPUImageTwoInputFilter class.\n\nHere is snippet code for you\n\n GPUImageNormalBlendFilter *filter = [[GPUImageNormalBlendFilter alloc] init]; [filter useNextFrameForImageCapture]; \/\/ 1 \/\/ 2 \/\/ GPUImage picture UIImage *imageOriginal = [UIImage imageNamed:@\"originalPhoto.jpg\"]; UIImage *imageOverlay = [UIImage imageNamed:filterName]; GPUImagePicture *picture_1 = [[GPUImagePicture alloc] initWithImage:imageOriginal]; GPUImagePicture *picture_2 = [[GPUImagePicture alloc] initWithImage:imageOverlay]; \/\/ 3 - Target [picture_1 addTarget:filter]; [picture_1 processImage]; [picture_2 addTarget:filter]; [picture_2 processImage]; \/\/ 4 - Blend UIImage *destinationPhoto = [filter imageFromCurrentFramebuffer];\n\n1. The first step, we should determine what is blend mode match with texture. For simply, I create object filter as GPUImageNormalBlendFilter class. And call [filter\u00a0useNextFrameForImageCapture] for static image processing.\n2. Convert UIImage object to GPUImagePicture\n3. Add target and call -processImage to processing two images.\n4. Call -imageFromCurrentFramebuffer to get destination\u00a0image. If your final photo wrong orientation, call imageFromCurrentFramebufferWithOrientation: and pass original photo\u2019s orientation.\n\nIf you are confuse about **step 1**, please read [this blog](http:\/\/www.sunsetlakesoftware.com\/2014\/03\/17\/switching-gpuimage-use-cached-framebuffers \"Blog\"), in the newest version GPUImage.\n\nBrad Larson changed the way for processing image because some memory structure issue, and make sure you MUST call -useNextFrameForImageCapture. If not, NSAsset will be fired.\n\n\n# Note\n\nAll of the method we called above is run in the main thread, if you process large image, it can block your main thread and UI will not responsive.\n\nYou should consider calling it in background thread instead.\n\nIn short, this video below will show you:  \n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"415\" src=\"\/\/www.youtube.com\/embed\/nJ0UQQ8DfV0\" width=\"600\"><\/iframe>\n\n\n# Step 4 \u2013 Adding animation\n\nStep 4 is just option\u00a0step. When you finished step 3, I think you can understand\u00a0enough to implement. But if you wanna gain more User Experience, we should animate photo when applying new filter.\n\nCABasicAnimation *fadeOutAnimation = [CABasicAnimation animationWithKeyPath:@\"contents\"]; fadeOutAnimation.fromValue = (__bridge id) _previousImage; fadeOutAnimation.toValue = (id) destinationPhoto.CGImage; fadeOutAnimation.duration = 1.6f; fadeOutAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]; fadeOutAnimation.fillMode = kCAFillModeForwards; fadeOutAnimation.removedOnCompletion = NO; \/\/ Delegate FeBasicAnimationBlock *block = [[FeBasicAnimationBlock alloc] init]; block.blockDidStart = ^{ _tableView.userInteractionEnabled = NO; }; block.blockDidStop = ^{ _tableView.userInteractionEnabled = YES; _previousImage = destinationPhoto.CGImage; }; \/\/ Set delegate fadeOutAnimation.delegate = block; [_imageView.layer addAnimation:fadeOutAnimation forKey:@\"aa\"];\n\nI created CABasicAnimation object and add to _imageView.layer. If you are familiar with CABasicAnimation, this is not problem for you. But not, I explain briefly.\n\n1. Because I want to change Layer\u2019s contents property, so I use CABasicAnimation instead of\u00a0\u00a0[UIView animate\u2026].\n2. FromValue is the previous Image\n3. ToValue is a new filtered image.\n4. Adjust some property like duration, timingFunction, fillMode, \u2026\n5. Reuse FeBasicAnimationBlock which I created in a couple month ago, and pass itself is CABasicAnimation\u2019s delegate.\n6. Disable \/ Enable table view while animation is animating.\n7. Adding animation to layer.\n\nEverything is done.  \n<iframe allowfullscreen=\"allowfullscreen\" frameborder=\"0\" height=\"415\" src=\"\/\/www.youtube.com\/embed\/8RetiD4N1IE\" width=\"600\"><\/iframe>\n\n\n# Project sample code\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/FilterMe-Texture\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: cloud-download\u201d]Github[\/su_button]\n\n\n# What I covered\n\nSo, There are many famous editing photo app in Appstore often use techniques or combine it to make new filter. If you want to build up the beautiful filter, you should spent more time to create new filter, textured sample in photoshop before coding.\n\nHave a questions ? Drop it here ;]\n\n\n","html":"<p><img class=\"size-medium wp-image-680 aligncenter\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2-300x300.jpg?resize=300%2C300\" alt=\"filterMeIcon_part_2\" width=\"300\" height=\"300\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?resize=266%2C266&amp;ssl=1 266w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg?w=600&amp;ssl=1 600w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>&nbsp;<\/p>\n<p>In two previous parts of Filter Me series tutorial, I covered some useful technique for applying a filter to photo. Here is a shortcut for you: <a title=\"Part 1\" href=\"http:\/\/nghiatran.me\/index.php\/filter-me-tone-curve-part-1\/\" target=\"_blank\" rel=\"noopener\">Part 1<\/a> and <a title=\"Part 2\" href=\"http:\/\/nghiatran.me\/index.php\/filter-me-color-lookup-table-part-2\/\" target=\"_blank\" rel=\"noopener\">Part 2<\/a>.<\/p>\n<p>If you a new guy, I strongly recommend you should spend couple hours for reading Part 1 and part 2, and ensure you have some knowledge about Core Image and GPUImage before continue.<\/p>\n<h1>Before reading<\/h1>\n<p>In this blog, I use GPUImage in entity project. Rather than being an introduction to the GPUImage framework, I assume you are familiar with the basics and focused on\u00a0the way to implement filter function like Instagram does.<\/p>\n<p>For saving your time, I google some nice blog about GPUImage :<\/p>\n<ul>\n<li><a title=\"GPUImage\" href=\"https:\/\/github.com\/BradLarson\/GPUImage\" target=\"_blank\" rel=\"noopener\">GPUImage<\/a> by Brad Larson<\/li>\n<li><a title=\"Build a Photo App\" href=\"http:\/\/code.tutsplus.com\/tutorials\/build-a-photo-app-with-gpuimage--mobile-12223\" target=\"_blank\" rel=\"noopener\">Build a Photo App with GPUImage <\/a>by\u00a0Mark Hammonds<\/li>\n<li><a title=\"Image Processing using GPUImage\" href=\"http:\/\/www.theappguruz.com\/tutorial\/ios-image-processsing-using-gpuimage-framework\/\" target=\"_blank\" rel=\"noopener\">Image Processing using GPUImage<\/a> by\u00a0<span style=\"color: #444444;\">Swati Choksi.<\/span><\/li>\n<\/ul>\n<h1>What next?<\/h1>\n<p>To create an app like Instagram&#8217;s filters, I will cover everything we need to implement\u00a0it, including apply texture and adjust blend mode into the photo.<\/p>\n<p>In brief, what we will do, I have shown you a gallery of photos I did in an hour ago.<\/p>\n<script data-cfasync=\"false\" type=\"text\/javascript\">var lsjQuery = jQuery;<\/script><script data-cfasync=\"false\" type=\"text\/javascript\">\r\nlsjQuery(document).ready(function() {\r\nif(typeof lsjQuery.fn.layerSlider == \"undefined\") {\r\nif( window._layerSlider &&\u00a0window._layerSlider.showNotice) { \r\nwindow._layerSlider.showNotice('layerslider_1_2','jquery');\r\n}\r\n} else {\r\nlsjQuery(\"#layerslider_1_2\").layerSlider({sliderVersion: '', skinsPath: 'https:\/\/nghiatran.me\/wp-content\/plugins\/LayerSlider\/static\/layerslider\/skins\/', showCircleTimer: false});\r\n}\r\n});\r\n<\/script><div id=\"layerslider_1_2\" class=\"ls-wp-container fitvidsignore\" style=\"width:1280px;height:720px;margin:0 auto;margin-bottom: 0px;\"><div class=\"ls-slide\" data-ls=\"kenburnsscale:1.2;\"><img width=\"640\" height=\"640\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=640%2C640&#038;ssl=1\" class=\"ls-l\" alt=\"\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?w=640&amp;ssl=1 640w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_9.jpg?resize=600%2C600&amp;ssl=1 600w\" sizes=\"(max-width: 640px) 100vw, 640px\" style=\"top:10px;left:10px;text-align:initial;font-weight:400;font-style:normal;text-decoration:none;wordwrap:false;opacity:1;\" data-recalc-dims=\"1\"><img width=\"640\" height=\"640\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=640%2C640&#038;ssl=1\" class=\"ls-l\" alt=\"\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?w=640&amp;ssl=1 640w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_8.jpg?resize=600%2C600&amp;ssl=1 600w\" sizes=\"(max-width: 640px) 100vw, 640px\" style=\"top:10px;left:10px;text-align:initial;font-weight:400;font-style:normal;text-decoration:none;wordwrap:false;opacity:1;\" data-recalc-dims=\"1\"><\/div><\/div>\n<p>Steps to do\u00a0\u00a0:<\/p>\n<ol>\n<li>Download vintage texture brush from Google<\/li>\n<li>Using Photoshop and create your own texture ( by combining\u00a0brush and blend mode)<\/li>\n<li>Apply this texture to your photo by using GPUImage.<\/li>\n<li>Refactor code, bring animation for transiting photo.<\/li>\n<\/ol>\n<p>The first photo is an original photo. As you see, each next photo has a different style, by adding textures like grunge, you can turn your photo like Retro, Vintage style.<\/p>\n<h1>Step 1 &#8211; Prepare yourself<\/h1>\n<p>Before starting work, We should download awesome brush for vintage style in google. Here is what I find\u00a0<a title=\"Awesome brush\" href=\"http:\/\/speckyboy.com\/2012\/02\/20\/20-subtle-and-soft-textured-photoshop-brush-packs-225-brushes\/\" target=\"_blank\" rel=\"noopener\">bursh<\/a>.<\/p>\n<p>Download what you want, and run it.<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_1.png\"><img class=\"aligncenter size-full wp-image-779\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_1.png?resize=410%2C54\" alt=\"FilterMe_Part3_1\" width=\"410\" height=\"54\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_1.png?w=410&amp;ssl=1 410w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_1.png?resize=300%2C40&amp;ssl=1 300w\" sizes=\"(max-width: 410px) 100vw, 410px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<h1>Step 2 &#8211; Photoshop is God<\/h1>\n<p>And open Photoshop app and create a new canvas with 640px as width and height.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png\"><img class=\"aligncenter size-full wp-image-780\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png?resize=607%2C425\" alt=\"FilterMe_Part3_2\" width=\"607\" height=\"425\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png?w=607&amp;ssl=1 607w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png?resize=300%2C210&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png?resize=468%2C328&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/Screen-Shot-2014-07-06-at-13.24.49.png?resize=558%2C391&amp;ssl=1 558w\" sizes=\"(max-width: 607px) 100vw, 607px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Ensure you choose Color Mode is RGB Color, not CMYK.<\/p>\n<p>Drag this <a title=\"Original Photo\" href=\"http:\/\/128.199.214.43\/wp-content\/uploads\/2014\/07\/originalPhoto.jpg\" target=\"_blank\" rel=\"noopener\">original photo<\/a> to your canvas, and create new layer for your texture<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_4.png\"><img class=\"aligncenter size-full wp-image-783\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_4.png?resize=201%2C121\" alt=\"FilterMe_Part3_4\" width=\"201\" height=\"121\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Next, open your brush. As you see, there are many brush texture in your gallery.<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_5.png\"><img class=\"aligncenter size-full wp-image-782\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_5.png?resize=442%2C419\" alt=\"FilterMe_Part3_5\" width=\"442\" height=\"419\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_5.png?w=442&amp;ssl=1 442w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_5.png?resize=300%2C284&amp;ssl=1 300w\" sizes=\"(max-width: 442px) 100vw, 442px\" data-recalc-dims=\"1\" \/><\/a>Pick one, adjust a size and draw to photo whatever you like. If you want to improve brush&#8217;s effect, you can choose blend mode in the Layer panel.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg\"><img class=\"aligncenter size-full wp-image-770\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=640%2C640\" alt=\"FilterMe_Part3_SlideShow_3\" width=\"640\" height=\"640\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?w=640&amp;ssl=1 640w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=468%2C468&amp;ssl=1 468w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=558%2C558&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=180%2C180&amp;ssl=1 180w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/FilterMe_Part3_SlideShow_3.jpg?resize=600%2C600&amp;ssl=1 600w\" sizes=\"(max-width: 640px) 100vw, 640px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Above photo is the result when I combine brush which I downloaded from the Internet with<strong>\u00a0Blend mode is Linear Burn.<\/strong><\/p>\n<p>Feel free for adjusting option before saving.<\/p>\n<h2>Save your texture<\/h2>\n<p>You must save your texture as PNG, and make sure you just turn &#8220;the eye&#8221; of texture layer. Turn off &#8220;the eye&#8221; of the original photo.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png\"><img class=\"aligncenter size-medium wp-image-784\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1-300x300.png?resize=300%2C300\" alt=\"texture_linearBurnBlend_1\" width=\"300\" height=\"300\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?resize=468%2C468&amp;ssl=1 468w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?resize=558%2C558&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?resize=180%2C180&amp;ssl=1 180w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?resize=600%2C600&amp;ssl=1 600w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2014\/07\/texture_linearBurnBlend_1.png?w=640&amp;ssl=1 640w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<p>Bunch of texture which I have created and collected for you.<\/p>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/FilterMe-Texture&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: cloud-download&#8221;]Textures[\/su_button]<\/p>\n<h1>Step 3 &#8211; GPUImage<\/h1>\n<p>Now is a time we turn miracle to your app. Just drink a sip coffee and see what will happen next ;]<\/p>\n<p>Instead of talking about overview GPUImage framework again, I will mention directly what is inside GPUImage we should deal with it.<\/p>\n<p>The GPUImage library provides plenty of useful classes for blending texture with the photo. Such as\u00a0<strong>GPUImageNormalBlendFilter<\/strong> for normal blend,\u00a0<strong>GPUImageOverlayBlendFilter<\/strong> for overlay blend,\u00a0<strong>GPUImageMultiplyBlendFilter<\/strong> for multiply blend and so on. All of them is subclass by GPUImageTwoInputFilter class.<\/p>\n<p>Here is snippet code for you<\/p>\n<pre class=\"lang:objc decode:true\">     GPUImageNormalBlendFilter  *filter = [[GPUImageNormalBlendFilter alloc] init];\r\n    [filter useNextFrameForImageCapture]; \/\/ 1\r\n\r\n    \/\/ 2\r\n    \/\/ GPUImage picture\r\n    UIImage *imageOriginal = [UIImage imageNamed:@\"originalPhoto.jpg\"];\r\n    UIImage *imageOverlay = [UIImage imageNamed:filterName];\r\n    \r\n    GPUImagePicture *picture_1 = [[GPUImagePicture alloc] initWithImage:imageOriginal];\r\n    GPUImagePicture *picture_2 = [[GPUImagePicture alloc] initWithImage:imageOverlay];\r\n    \r\n    \/\/ 3 - Target\r\n    [picture_1 addTarget:filter];\r\n    [picture_1 processImage];\r\n    \r\n    [picture_2 addTarget:filter];\r\n    [picture_2 processImage];\r\n    \r\n    \/\/ 4 - Blend\r\n    UIImage *destinationPhoto = [filter imageFromCurrentFramebuffer];<\/pre>\n<ol>\n<li>The first step, we should determine what is blend mode match with texture. For simply, I create object filter as GPUImageNormalBlendFilter class. And call [filter\u00a0useNextFrameForImageCapture] for static image processing.<\/li>\n<li>Convert UIImage object to GPUImagePicture<\/li>\n<li>Add target and call -processImage to processing two images.<\/li>\n<li>Call -imageFromCurrentFramebuffer to get destination\u00a0image. If your final photo wrong orientation, call imageFromCurrentFramebufferWithOrientation: and pass original photo&#8217;s orientation.<\/li>\n<\/ol>\n<p>If you are confuse about <strong>step 1<\/strong>, please read <a title=\"Blog\" href=\"http:\/\/www.sunsetlakesoftware.com\/2014\/03\/17\/switching-gpuimage-use-cached-framebuffers\" target=\"_blank\" rel=\"noopener\">this blog<\/a>, in the newest version GPUImage.<\/p>\n<p>Brad Larson changed the way for processing image because some memory structure issue, and make sure you MUST call -useNextFrameForImageCapture. If not, NSAsset will be fired.<\/p>\n<h1>Note<\/h1>\n<p>All of the method we called above is run in the main thread, if you process large image, it can block your main thread and UI will not responsive.<\/p>\n<p>You should consider calling it in background thread instead.<\/p>\n<p>In short, this video below will show you:<br \/>\n<iframe width=\"600\" height=\"415\" src=\"\/\/www.youtube.com\/embed\/nJ0UQQ8DfV0\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h1>Step 4 &#8211; Adding animation<\/h1>\n<p>Step 4 is just option\u00a0step. When you finished step 3, I think you can understand\u00a0enough to implement. But if you wanna gain more User Experience, we should animate photo when applying new filter.<\/p>\n<pre class=\"lang:objc decode:true \">CABasicAnimation *fadeOutAnimation = [CABasicAnimation animationWithKeyPath:@\"contents\"];\r\n    fadeOutAnimation.fromValue = (__bridge id) _previousImage;\r\n    fadeOutAnimation.toValue = (id) destinationPhoto.CGImage;\r\n    fadeOutAnimation.duration = 1.6f;\r\n    fadeOutAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];\r\n    fadeOutAnimation.fillMode = kCAFillModeForwards;\r\n    fadeOutAnimation.removedOnCompletion = NO;\r\n    \r\n    \/\/ Delegate\r\n    FeBasicAnimationBlock *block = [[FeBasicAnimationBlock alloc] init];\r\n    block.blockDidStart = ^{\r\n        _tableView.userInteractionEnabled = NO;\r\n    };\r\n    block.blockDidStop = ^{\r\n        _tableView.userInteractionEnabled = YES;\r\n        _previousImage = destinationPhoto.CGImage;\r\n    };\r\n    \r\n    \/\/ Set delegate\r\n    fadeOutAnimation.delegate = block;\r\n    \r\n    [_imageView.layer addAnimation:fadeOutAnimation forKey:@\"aa\"];<\/pre>\n<p>I created CABasicAnimation object and add to _imageView.layer. If you are familiar with CABasicAnimation, this is not problem for you. But not, I explain briefly.<\/p>\n<ol>\n<li>Because I want to change Layer&#8217;s contents property, so I use CABasicAnimation instead of\u00a0\u00a0[UIView animate&#8230;].<\/li>\n<li>FromValue is the previous Image<\/li>\n<li>ToValue is a new filtered image.<\/li>\n<li>Adjust some property like duration, timingFunction, fillMode, &#8230;<\/li>\n<li>Reuse FeBasicAnimationBlock which I created in a couple month ago, and pass itself is CABasicAnimation&#8217;s delegate.<\/li>\n<li>Disable \/ Enable table view while animation is animating.<\/li>\n<li>Adding animation to layer.<\/li>\n<\/ol>\n<p>Everything is done.<br \/>\n<iframe width=\"600\" height=\"415\" src=\"\/\/www.youtube.com\/embed\/8RetiD4N1IE\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\n<h1>Project sample code<\/h1>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/FilterMe-Texture&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: cloud-download&#8221;]Github[\/su_button]<\/p>\n<h1>What I covered<\/h1>\n<p>So, There are many famous editing photo app in Appstore often use techniques or combine it to make new filter. If you want to build up the beautiful filter, you should spent more time to create new filter, textured sample in photoshop before coding.<\/p>\n<p>Have a questions ? Drop it here ;]<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2014\/06\/filterMeIcon_part_2.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sun, 06 Jul 2014 12:33:40 +0000","created_by":1,"updated_at":"Sat, 23 Sep 2017 10:11:31 +0000","updated_by":1,"published_at":"Sun, 06 Jul 2014 12:33:40 +0000","published_by":1},{"id":876,"title":"Rocket Loader Collection","slug":"rocket-loader-collection","markdown":"\nHi everyone, this is long time i haven\u2019t written any post in my blog. So i decide i need to PR my awesome open source which i implemented it few months ago.\n\nAlmost of them are inspired by [Tim Holman\u2019s collection](http:\/\/codepen.io\/collection\/HtAne\/ \"Tim Holman's collection\")\u00a0.\n\n\n# Github\n\nI publish this project in github :\u00a0[https:\/\/github.com\/NghiaTranUIT\/FeSpinner](https:\/\/github.com\/NghiaTranUIT\/FeSpinner \"https:\/\/github.com\/NghiaTranUIT\/FeSpinner\")\n\nAnd it\u2019s under MIT license, so feel free to reuse it ;]\n\n\n# How to use\n\nIf you are fresher or senior iOS dev, i swear that you have hear [MBProgressHUD](https:\/\/github.com\/jdg\/MBProgressHUD \"MBProgressHUD\")\u00a0one time at least.\n\nAll of loader in Rocket Loader Collection is so similar with MBProgressHUB. Just use few code line, and leave the rest to Rocket. It will be done for you ;]\n\n\n# What\u2019s inside\n\n\n## Handwriting\n\n\n# [![Handwriting](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/Handwriting.gif?resize=261%2C468)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/Handwriting.gif)\n\n\u00a0\n\n\n## Rolling Loader\n\n[![RollingLoader](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/RollingLoader.gif?resize=235%2C426)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/RollingLoader.gif)\n\n\u00a0\n\n\n## Equalizer Loader\n\n\n# [![EqualizerLoader](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/EqualizerLoader.gif?resize=248%2C449)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/EqualizerLoader.gif)Hourglass Loader\n\n\n## [![HourGlassLoader](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/HourGlassLoader.gif?resize=246%2C446)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/HourGlassLoader.gif)Wifihub Loader \u2013 from [Wifi Chua](http:\/\/wifichuaapp.com \"Wifi Chua\")\n\n\n## [![WifiHubLoader](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/WifiHubLoader.gif?resize=253%2C459)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/WifiHubLoader.gif)Three Dots Glow\n\n\n## [![TheeDotGlow](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TheeDotGlow.gif?resize=254%2C460)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TheeDotGlow.gif)Vietnam Loader\n\n\n## [![VietnamLoader](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/VietnamLoader.gif?resize=246%2C446)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/VietnamLoader.gif)Loading Box\n\n\n## [![LoadingBox](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/LoadingBox.gif?resize=251%2C455)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/LoadingBox.gif)Ten Dots Loader\n\n[![TenDot](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TenDot.gif?resize=364%2C660)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TenDot.gif)\n\n\u00a0\n\n\n# Feedback\n\nI really really love to hear your voice about my collection. Any pull-request in Github\u00a0will be approved if it make my\u00a0collection better.\n\nThanks for reading.\n\nCheer,\n\n\u00a0\n\n\u00a0\n\n\n","html":"<p>Hi everyone, this is long time i haven&#8217;t written any post in my blog. So i decide i need to PR my awesome open source which i implemented it few months ago.<\/p>\n<p>Almost of them are inspired by <a title=\"Tim Holman's collection\" href=\"http:\/\/codepen.io\/collection\/HtAne\/\" target=\"_blank\">Tim Holman&#8217;s collection<\/a>\u00a0.<\/p>\n<h1>Github<\/h1>\n<p>I publish this project in github :\u00a0<a title=\"https:\/\/github.com\/NghiaTranUIT\/FeSpinner\" href=\"https:\/\/github.com\/NghiaTranUIT\/FeSpinner\" target=\"_blank\">https:\/\/github.com\/NghiaTranUIT\/FeSpinner<\/a><\/p>\n<p>And it&#8217;s under MIT license, so feel free to reuse it ;]<\/p>\n<h1>How to use<\/h1>\n<p>If you are fresher or senior iOS dev, i swear that you have hear <a title=\"MBProgressHUD\" href=\"https:\/\/github.com\/jdg\/MBProgressHUD\" target=\"_blank\">MBProgressHUD<\/a>\u00a0one time at least.<\/p>\n<p>All of loader in Rocket Loader Collection is so similar with MBProgressHUB. Just use few code line, and leave the rest to Rocket. It will be done for you ;]<\/p>\n<h1>What&#8217;s inside<\/h1>\n<h2>Handwriting<\/h2>\n<h1><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/Handwriting.gif\"><img class=\"aligncenter wp-image-883\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/Handwriting.gif?resize=261%2C468\" alt=\"Handwriting\" width=\"261\" height=\"468\" data-recalc-dims=\"1\" \/><\/a><\/h1>\n<p>&nbsp;<\/p>\n<h2>Rolling Loader<\/h2>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/RollingLoader.gif\"><img class=\"aligncenter wp-image-867\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/RollingLoader.gif?resize=235%2C426\" alt=\"RollingLoader\" width=\"235\" height=\"426\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h2>Equalizer Loader<\/h2>\n<h1><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/EqualizerLoader.gif\"><img class=\"aligncenter wp-image-868\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/EqualizerLoader.gif?resize=248%2C449\" alt=\"EqualizerLoader\" width=\"248\" height=\"449\" data-recalc-dims=\"1\" \/><\/a>Hourglass Loader<\/h1>\n<h2><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/HourGlassLoader.gif\"><img class=\"aligncenter wp-image-869\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/HourGlassLoader.gif?resize=246%2C446\" alt=\"HourGlassLoader\" width=\"246\" height=\"446\" data-recalc-dims=\"1\" \/><\/a>Wifihub Loader &#8211; from <a title=\"Wifi Chua\" href=\"http:\/\/wifichuaapp.com\" target=\"_blank\">Wifi Chua<\/a><\/h2>\n<h2><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/WifiHubLoader.gif\"><img class=\"aligncenter wp-image-870\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/WifiHubLoader.gif?resize=253%2C459\" alt=\"WifiHubLoader\" width=\"253\" height=\"459\" data-recalc-dims=\"1\" \/><\/a>Three Dots Glow<\/h2>\n<h2><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TheeDotGlow.gif\"><img class=\"aligncenter wp-image-871\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TheeDotGlow.gif?resize=254%2C460\" alt=\"TheeDotGlow\" width=\"254\" height=\"460\" data-recalc-dims=\"1\" \/><\/a>Vietnam Loader<\/h2>\n<h2><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/VietnamLoader.gif\"><img class=\"aligncenter wp-image-872\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/VietnamLoader.gif?resize=246%2C446\" alt=\"VietnamLoader\" width=\"246\" height=\"446\" data-recalc-dims=\"1\" \/><\/a>Loading Box<\/h2>\n<h2><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/LoadingBox.gif\"><img class=\"aligncenter wp-image-873\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/LoadingBox.gif?resize=251%2C455\" alt=\"LoadingBox\" width=\"251\" height=\"455\" data-recalc-dims=\"1\" \/><\/a>Ten Dots Loader<\/h2>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TenDot.gif\"><img class=\"aligncenter size-full wp-image-874\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/01\/TenDot.gif?resize=364%2C660\" alt=\"TenDot\" width=\"364\" height=\"660\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>&nbsp;<\/p>\n<h1>Feedback<\/h1>\n<p>I really really love to hear your voice about my collection. Any pull-request in Github\u00a0will be approved if it make my\u00a0collection better.<\/p>\n<p>Thanks for reading.<\/p>\n<p>Cheer,<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2015\/01\/iTunesArtwork.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 02 Jan 2015 12:49:35 +0000","created_by":1,"updated_at":"Mon, 07 Nov 2016 14:02:06 +0000","updated_by":1,"published_at":"Fri, 02 Jan 2015 12:49:35 +0000","published_by":1},{"id":889,"title":"Drop Filter","slug":"dropfilter-part-1","markdown":"\n![dropFilter_icon](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_icon-300x300.png?resize=300%2C300)\n\nIt\u2019s brand new series about filter on camera. Yeah, actually, it\u2019s 4th blog i\u2019ve written :D.\n\nSo I sure there is question in your mind. Why only mention about filter camera ? Why don\u2019t\u00a0you write another things, such as\u00a0algorithm or common mistake when developing app or anything else ?\n\nYup, The answer is so simple, because i really love it\u00a0:D, it makes worst things to better. poor photographer to professional, make everything see\u00a0throught camera looks amazing\u00a0\ud83d\ude00\n\nHere is achievement, please take a look to know what we will do next.\n\n[su_youtube url=\u201dhttps:\/\/youtu.be\/qGRTbdT_qxs\u201d]\n\n^ So, is it awesome :)), are you ready to implement it ?\n\n\n## GPUImage\n\nOn\u00a0entire blog,\u00a0we\u2019ll\u00a0deal with [GPUImage](https:\/\/github.com\/BradLarson\/GPUImage \"GPUImage\").\u00a0Rather than being introduction to GPUImage, this blog assumes you are familiar with GPUImage, if not, just spent few mins and google. There is bunch of great articles talk about it, no reason to say\u00a0again.\n\nAnd if you\u2019re step-by-step guy. Please create new projec with\u00a0your Xcode, and follow my instruction \ud83d\ude00\n\n\n## Install GPUImage from\u00a0CocoaPods\n\nNavigate to root of your project. Create Podfile with content below\n\nplatform :ios,'7.0' pod 'GPUImage', '~> 0.1'\n\nOpen terminal, cd to project\u2019s directory and run\n\n[![dropfilter_1](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?resize=632%2C331)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_1.png)\n\npod install\n\n\u2026\u2026 Leave it, pod will do all for you, Just go away or make couple of coffee for yourself.\n\nWhen it\u2019s finished, we will see like this\n\n[![dropfilter_2](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_2.png?resize=440%2C269)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_2.png)\n\nand open your *.DropFilter.xcworkspace instead of *.xcodeproj.\n\n\n## Write simple live filter camera\n\nBefore going deeply, we should build\u00a0simple live filter camera first to understand clearly.\n\nHere is\u00a0anatomy. We\u2019re going to put GPUImageView on top of controller\u2019s view.\n\n[![dropFilter_3](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg?resize=525%2C424)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg)\n\nGPUImageView is subclass of UIView, so it has useful UIView\u2019s property. It just warps all of code to handle render data which come from\u00a0camera or filter.\n\nOpen storyboard and add UIView on root view controller, and add constrains. To\u00a0guarantee camera screen will full-screen even on any device.\n\n[![dropFilter_4](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_4.png?resize=221%2C295)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_4.png)\n\nSwitch to Identity Inspector and configure. Class is **GPUImage** and Label is **Top Camera View**\n\n[![dropFilter_5](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_5.png?resize=244%2C310)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_5.png)\n\nIt\u2019s done with interface, we\u2019re going to implement code.\n\n1 \u2013 Create new outlet from GPUImage with name **topCameraImageView**.\n\n2 \u2013 Added helper code in interface side.\n\nWe use GPUImageStillCamera \u2013 subclass of GPUVideoCamera. By reuse it, we don\u2019t have any\u00a0pain when working directly with AVFoundation and OpenGL ES. Many thanks to BrandLarson.\n\nGPUImageGrayscaleFilter is just simple things to help us apply grayscale to camera easily.\n\n\/\/ GPUImage View @property (weak, nonatomic) IBOutlet GPUImageView *topCameraImageView; \/\/ Still Camera @property (strong, nonatomic) GPUImageStillCamera *stillCamera; \/\/ Filter @property (strong, nonatomic) GPUImageGrayscaleFilter *grayscaleFilter;\n\n3 \u2013 Configure them\n\n- (void)viewDidLoad { [super viewDidLoad]; \/\/ Do any additional setup after loading the view, typically from a nib. [self initCommon]; [self configureCamera]; [self configureFilter]; [self configureImageView]; } - (void)didReceiveMemoryWarning { [super didReceiveMemoryWarning]; \/\/ Dispose of any resources that can be recreated. } -(BOOL) prefersStatusBarHidden { return YES; } #pragma mark - Cycle view -(void) viewWillAppear:(BOOL)animated { [super viewWillAppear:animated]; [_stillCamera startCameraCapture]; } -(void) viewWillDisappear:(BOOL)animated { [super viewWillDisappear:animated]; [_stillCamera stopCameraCapture]; } #pragma mark - Init -(void) initCommon { } -(void) configureCamera { \/\/ Init Still camera _stillCamera = [[GPUImageStillCamera alloc] initWithSessionPreset:AVCaptureSessionPresetHigh cameraPosition:AVCaptureDevicePositionBack]; _stillCamera.outputImageOrientation = UIInterfaceOrientationPortrait; } -(void) configureFilter { \/\/ Gray filter _grayscaleFilter = [[GPUImageGrayscaleFilter alloc] init]; } -(void) configureImageView { \/\/ Top [_stillCamera addTarget:_grayscaleFilter]; [_grayscaleFilter addTarget:_topCameraImageView]; }\n\n^ as you read, it\u2019s pretty\u00a0straightforward. We created instance of camera with hight quality, back camera and Portrait mode as default.\n\nHere is flow of raw data in app. GPUImageStillCamera gets raw data from camera and sent to sub-filter to process it. Otherwise, GPUImage implement by Decorator Pattern. It means you\u00a0could\u00a0add many filters as you expect. Finally, just send processed data to GPUImageView, and it will be present on screen.\n\n[![dropFilter_9](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg?resize=634%2C229)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg)\n\nSo, Build and run on your iphone, here is result what we did.\n\n<iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/hDPb1HE-yeI?feature=oembed\" width=\"750\"><\/iframe>\n\n\n## Two live filters\n\nWe\u2019re moving to harder part in this blog. From now, we will apply two live filters to camera at same time.\u00a0It\u2019s said One picture than million words. I prepared some useful photos to explain.\n\nFlow of data : Instead of using one flow, currently, we use 2 flows. One for GrayScaleFilter, one for AmatorkaFilter. All of them will process and send to Top\/BottomImageView and present on screen\u00a0simultaneously.\n\nI admit it costs x 2 CPU\/GPU\u00a0than one filter. But it isn\u2019t problem now, 4S iphone still has enough power to show it fluently, around 30FPS.\u00a0I benchmarked it,\u00a0trust me \ud83d\ude00\n\n[![dropFilter_11](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=850%2C207)](https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg)\n\nAnd here is\u00a0view hierarchy. We create new GPUImageView ( call as bottomImageView), and maskLayer.\n\n[![dropFilter_12](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=633%2C451)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg)\n\nMask Layer is just CALayer with frame = { 0 , 0 , width \/ 2 , height }, and assign to topImageView\u2019s layer. By using it as mask of TopImageView, the mask will hide the portion of the original layer. So we could see bottomImageView.\n\n[![dropFilter_13](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=788%2C448)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg)\n\nTheory is enough, time to implement it by your hand.\n\n1 \u2013 Open storyboard, add new UIView (call as **bottomImageView**, subclass from **GPUImageView**), and below TopImageView.\n\n[![dropFilter_14](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_14.jpg?resize=311%2C258)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_14.jpg)\n\n2 \u2013 Open viewcontroller.m and add it as outlet, new mask Layer and new filter.\n\n\/\/ GPUImage View @property (weak, nonatomic) IBOutlet GPUImageView *bottomCameraView; \/\/ Filter @property (strong, nonatomic) GPUImageAmatorkaFilter *amatorkaFilter; \/\/ Mask @property (strong, nonatomic) CALayer *maskLayer;\n\nFinally, we change implement section with new code.\n\n- (void)viewDidLoad { [super viewDidLoad]; \/\/ Do any additional setup after loading the view, typically from a nib. [self initCommon]; [self configureCamera]; [self configureFilter]; [self configureImageView]; [self initMask]; } -(void) configureFilter { \/\/ Gray filter _grayscaleFilter = [[GPUImageGrayscaleFilter alloc] init]; \/\/ Amatorka filter _amatorkaFilter = [[GPUImageAmatorkaFilter alloc] init]; } -(void) configureImageView { \/\/ Top [_stillCamera addTarget:_grayscaleFilter]; [_grayscaleFilter addTarget:_topCameraImageView]; \/\/ Botom [_stillCamera addTarget:_amatorkaFilter]; [_amatorkaFilter addTarget:_bottomCameraView]; } -(void) initMask { if (!_maskLayer) { _maskLayer = [CALayer layer]; _maskLayer.frame = CGRectMake(0, 0, self.view.bounds.size.width \/ 2, self.view.bounds.size.height); _maskLayer.backgroundColor = [UIColor whiteColor].CGColor; \/\/ Add _topCameraImageView.layer.mask = _maskLayer; _topCameraImageView.layer.masksToBounds = YES; } }\n\nIn configureFilter, we initial GPUImageAmatorkaFilter. In configureImageView, still initial bottomImageView. Please notice we should assign \u00a0_amatorkaFilter as _camera\u2019s target, and bottomImagView is amatorkaFilter\u2019s target.\n\nMagic happens in initMask method. We created new CALayer and assign it into _topCamraImageView\u2019s layer. Because Top\/Bottom ImageView is same frame, it\u2019s just overlay, two filter is rendered simultaneously, so people can\u2019t notice the magic inside. It works as our expectation \ud83d\ude00\n\n[![dropFilter_15](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=639%2C547)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg)\n\nOn action\n\n<iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/DnQIbRQJ0bc?feature=oembed\" width=\"750\"><\/iframe>\n\n\n## Make it\u2019s better\n\nSo, if you passed two section above, i\u00a0guarantee you\u2019re understand what i\u2019m doing. But we shouldn\u2019t release app with only noob\u00a0feature. We should think and improve\u00a0it professionally \u2026..\n\nI\u2019m thinking about \u201cWhat happen if we could\u00a0experience\u00a0or preview filters by our finger ?\u201d and \u201d Instead of rectangle, should we try another shape\u00a0in mask layer ? \u201d\n\nYeah, be inde-dev, we should ask ourself with those similar question. Each unique feature will attract people. Think difference is key of\u00a0success.\n\n**1 \u2013 Triangle mask**  \n I don\u2019t prefer rectangle mask anymore, try triangle instead \ud83d\ude00 .So replace your initMask with new one.\n\n-(void) initMask { if (!_maskLayer) { CGFloat width = self.view.bounds.size.width; CGFloat height = self.view.bounds.size.height; _maskLayer = [CAShapeLayer layer]; _maskLayer.frame = CGRectMake(0, 0, width * 2, height); _maskLayer.backgroundColor = [UIColor clearColor].CGColor; \/\/ Bezier path UIBezierPath *triangle = [UIBezierPath bezierPath]; [triangle moveToPoint:CGPointZero]; [triangle addLineToPoint:CGPointMake(width, 0)]; [triangle addLineToPoint:CGPointMake(width * 2, height)]; [triangle addLineToPoint:CGPointMake(0, height)]; [triangle addLineToPoint:CGPointZero]; \/\/ Add to mask layer _maskLayer.path = triangle.CGPath; _maskLayer.fillColor = [UIColor whiteColor].CGColor; \/\/ Translate to center _maskLayer.anchorPoint = CGPointZero; _maskLayer.position = CGPointMake( - width * 2, 0); \/\/ Add _topCameraImageView.layer.mask = _maskLayer; _topCameraImageView.layer.masksToBounds = YES; } }\n\n[![dropFilter_16](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_16.jpg?resize=303%2C539)](https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_16.jpg)\n\n**2 \u2013 User\u2019s gesture**  \n As i said before, i wanna use my finger to preview filter as i want. it\u2019ll be unique\u00a0experience :D. Let add **UIPanGestureRecognize\u00a0**and **FeBasicAnimationBlock**\u00a0(helper for warping CABasicAnimation\u2019s delegate to block)\n\n**FeBasicAnimationBlock.h**\n\n#import <Foundation\/Foundation.h> #import <QuartzCore\/QuartzCore.h> typedef void (^FeBasicAnimationDidStartBlock)(); typedef void (^FeBasicAnimationDidStopBlock)(); @interface FeBasicAnimationBlock : NSObject @property (copy, nonatomic) FeBasicAnimationDidStartBlock blockDidStart; @property (copy, nonatomic) FeBasicAnimationDidStopBlock blockDidStop; -(void) animationDidStart:(CAAnimation *)anim; -(void) animationDidStop:(CAAnimation *)anim finished:(BOOL)flag; @end\n\n**FeBasicAnimationBlock.m**\n\n#import \"FeBasicAnimationBlock.h\" @implementation FeBasicAnimationBlock -(void) animationDidStart:(CAAnimation *)anim { if (_blockDidStart) _blockDidStart(); } -(void) animationDidStop:(CAAnimation *)anim finished:(BOOL)flag { if (_blockDidStop) _blockDidStop(); } @end\n\nSwitch back to ViewController.m\n\nAdd PanGesture into @interface\n\n\/\/ Gesture @property (strong, nonatomic) UIPanGestureRecognizer *panGesture;\n\nAnd few new API\n\n-(void) initGesture { _panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePanGesture:)]; [self.view addGestureRecognizer:_panGesture]; self.topCameraImageView.userInteractionEnabled = YES; self.bottomCameraView.userInteractionEnabled = YES; } -(void) handlePanGesture:(UIPanGestureRecognizer *) sender { CGPoint location = [sender locationInView:self.view]; switch (sender.state) { case UIGestureRecognizerStateBegan: case UIGestureRecognizerStateChanged: { \/\/ Translate maskLayer \/\/ We should disable Implecit Animation when assign directly to property of layer CGFloat percent = location.x \/ self.view.bounds.size.width; [self setPositionWithoutImplicitAnimationAtTransfrom:CATransform3DMakeTranslation (self.view.bounds.size.width * 2 * percent, 0, 0)]; break; } case UIGestureRecognizerStateCancelled: case UIGestureRecognizerStateFailed: case UIGestureRecognizerStateEnded: { CATransform3D transfrom = _maskLayer.transform; \/\/ m41 is x corrdinatation if (transfrom.m41 > self.view.bounds.size.width) { \/\/ Animate masklayer to right edge [self animationMaskLayerToTransform:CATransform3DMakeTranslation(self.view.bounds.size.width * 2, 0, 0)]; } else { \/\/ Animate masklayer to left edge [self animationMaskLayerToTransform:CATransform3DMakeTranslation( 0, 0, 0)]; } break; } default: break; } } -(void) animationMaskLayerToTransform:(CATransform3D) finalTransform { CABasicAnimation *transalteAnimation = [CABasicAnimation animationWithKeyPath:@\"transform\"]; transalteAnimation.toValue = (id)[NSValue valueWithCATransform3D:finalTransform]; transalteAnimation.duration = 0.3f; transalteAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut]; transalteAnimation.removedOnCompletion = NO; transalteAnimation.fillMode = kCAFillModeForwards; \/\/ Delegate FeBasicAnimationBlock *blockDelegate = [FeBasicAnimationBlock new]; transalteAnimation.delegate = blockDelegate; __weak typeof(self) weakSelf = self; blockDelegate.blockDidStart = ^{ typeof(self) strongSelf = weakSelf; \/\/ Disable gesture strongSelf.panGesture.enabled = NO; }; blockDelegate.blockDidStop = ^{ typeof(self) strongSelf = weakSelf; \/\/ Enable strongSelf.panGesture.enabled = YES; \/\/ remove [strongSelf.maskLayer removeAllAnimations]; \/\/ Set final [strongSelf setPositionWithoutImplicitAnimationAtTransfrom:finalTransform]; }; [_maskLayer addAnimation:transalteAnimation forKey:@\"animation\"]; } -(void) setPositionWithoutImplicitAnimationAtTransfrom:(CATransform3D ) transform { [CATransaction begin]; \/\/ Disable [CATransaction setDisableActions:YES]; \/\/ Point _maskLayer.transform = transform; [CATransaction commit]; }\n\nFinally, Run on your iphone, and preview live filter\u00a0with your finger \ud83d\ude00\n\n<iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/0f3xzTNwRgE?feature=oembed\" width=\"750\"><\/iframe>\n\n\n## Filter name\n\nIt would be great if we add some filter name label in each side. Of course, it must be translate depend on your finger. So we should implement some helper API, to calculator center of cross line.\n\nYeah, to achieve it, time to get your notebook and pencil to come back to high school.  \n Sin, cos,tan,cotan are waiting you \ud83d\ude00\n\nIt\u2019s easy to understand what i wrote. The final answer is find position of O point. It\u2019s center of cross line.\n\n[![dropFilter_17](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg?resize=750%2C500)](https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg)\n\nAdd two label into @interface\n\n\/\/ Label @property (strong, nonatomic) UILabel *grayscaleLbl; @property (strong, nonatomic) UILabel *amatorkarLbl;\n\nInitial two labels\n\n-(void) initLabels { if (!_grayscaleLbl) { _grayscaleLbl = [[UILabel alloc] init]; _grayscaleLbl.text = @\"Oldboy\"; _grayscaleLbl.font = [UIFont fontWithName:@\"HelveticaNeue-Light\" size:60]; _grayscaleLbl.textColor = [UIColor whiteColor]; _grayscaleLbl.backgroundColor = [UIColor clearColor]; _grayscaleLbl.textAlignment = NSTextAlignmentCenter; [_grayscaleLbl sizeToFit]; } if (!_amatorkarLbl) { _amatorkarLbl = [[UILabel alloc] init]; _amatorkarLbl.text = @\"Retro\"; _amatorkarLbl.font = [UIFont fontWithName:@\"HelveticaNeue-Light\" size:60]; _amatorkarLbl.textColor = [UIColor whiteColor]; _amatorkarLbl.backgroundColor = [UIColor clearColor]; _amatorkarLbl.textAlignment = NSTextAlignmentCenter; [_amatorkarLbl sizeToFit]; } _grayscaleLbl.alpha = 0; _amatorkarLbl.alpha = 0; [self.view addSubview:_grayscaleLbl]; [self.view addSubview:_amatorkarLbl]; }\n\nAdd 2 line of code in next of\u00a0UIGestureRecognizerStateChanged.\n\n\/\/ Calculate O depend on maskLayer's transform CGPoint center = [self centerPointerDependTransform:_maskLayer.transform]; \/\/ Set position of two labels [self setLabelsWithCenter:center];\n\nAnd here is math.\n\n-(CGPoint) centerPointerDependTransform:(CATransform3D) transform { \/\/ Translate lable if (transform.m41 > self.view.bounds.size.width) { CGFloat width = self.view.bounds.size.width; CGFloat GA = transform.m41 - width; CGFloat AC = width - GA; CGFloat AB = AC \/ cos(alphaAngel); CGFloat AO = AB \/ 2.0f; CGFloat y = sin(alphaAngel) * AO; CGFloat x = GA + cos(alphaAngel) * AO; return CGPointMake(x, y); } else { CGFloat height = self.view.bounds.size.height; CGFloat DB = transform.m41; CGFloat belta = M_PI \/ 2 - alphaAngel; CGFloat AB = DB \/ sin(belta); CGFloat AO = AB \/ 2.0f; CGFloat x = sin(belta) * AO; CGFloat y = (height - cos(belta) * AB) + cos(belta) * AO; NSLog(@\"DB = %.2f\",DB); return CGPointMake(x, y); } return CGPointZero; }\n\nand\n\n-(void) setLabelsWithCenter:(CGPoint) center { \/\/ Set center _grayscaleLbl.center = center; _amatorkarLbl.center = center; \/\/ Rotate CATransform3D t1 = CATransform3DIdentity; t1 = CATransform3DTranslate(t1, 40, 0, 0); t1 = CATransform3DRotate(t1, alphaAngel, 0, 0, 1); CATransform3D t2 = CATransform3DIdentity; t2 = CATransform3DTranslate(t2, -40, 0, 0); t2 = CATransform3DRotate(t2, alphaAngel, 0, 0, 1); _amatorkarLbl.layer.transform = t1; _grayscaleLbl.layer.transform = t2; \/\/ Alpha if (center.x > self.view.bounds.size.width \/ 2) { _grayscaleLbl.alpha = 1; CGFloat GA = _maskLayer.transform.m41 - self.view.bounds.size.width; _amatorkarLbl.alpha = 1 - (GA \/ self.view.bounds.size.width); } else { _amatorkarLbl.alpha = 1; CGFloat GA = _maskLayer.transform.m41 - self.view.bounds.size.width; GA = fabs(GA); _grayscaleLbl.alpha = 1 - (GA \/ self.view.bounds.size.width); } }\n\nOn action  \n<iframe allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\" frameborder=\"0\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/qGRTbdT_qxs?feature=oembed\" width=\"750\"><\/iframe>\n\n\n## What\u2019s next ?\n\n\u201cThat\u2019s one small step for you, one giant leap for your career\u201d\u00a0\u2013 Hear similar with Neli Armstrong\u2019s quote when he was putting step in moon \u00a0\ud83d\ude00 ? Yup, All we did is just\u00a0is small steps, we if we understand clearly, we could build awesome live filter by your-self \ud83d\ude00\n\nMany things to improve, complex instagram filter and swipe to preview many\u00a0live filters in camera view \ud83d\ude00 Here is\u00a0achievements i\u2019ve done for 1 months \ud83d\ude00\n\n[su_youtube url=\u201dhttps:\/\/www.youtube.com\/watch?v=lNbbB9zqBOI\u201d]\n\nThanks for reading \ud83d\ude00\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/DropFilter\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]Github[\/su_button]\n\n\n","html":"<p><img class=\"size-medium wp-image-895 aligncenter\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_icon-300x300.png?resize=300%2C300\" alt=\"dropFilter_icon\" width=\"300\" height=\"300\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png?resize=300%2C300&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png?resize=150%2C150&amp;ssl=1 150w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png?resize=468%2C468&amp;ssl=1 468w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png?resize=180%2C180&amp;ssl=1 180w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png?resize=266%2C266&amp;ssl=1 266w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png?w=512&amp;ssl=1 512w\" sizes=\"(max-width: 300px) 100vw, 300px\" data-recalc-dims=\"1\" \/><\/p>\n<p>It&#8217;s brand new series about filter on camera. Yeah, actually, it&#8217;s 4th blog i&#8217;ve written :D.<\/p>\n<p>So I sure there is question in your mind. Why only mention about filter camera ? Why don&#8217;t\u00a0you write another things, such as\u00a0algorithm or common mistake when developing app or anything else ?<\/p>\n<p>Yup, The answer is so simple, because i really love it\u00a0:D, it makes worst things to better. poor photographer to professional, make everything see\u00a0throught camera looks amazing\u00a0\ud83d\ude00<\/p>\n<p>Here is achievement, please take a look to know what we will do next.<\/p>\n<p>[su_youtube url=&#8221;https:\/\/youtu.be\/qGRTbdT_qxs&#8221;]<\/p>\n<p>^ So, is it awesome :)), are you ready to implement it ?<\/p>\n<h2>GPUImage<\/h2>\n<p>On\u00a0entire blog,\u00a0we&#8217;ll\u00a0deal with <a title=\"GPUImage\" href=\"https:\/\/github.com\/BradLarson\/GPUImage\" target=\"_blank\">GPUImage<\/a>.\u00a0Rather than being introduction to GPUImage, this blog assumes you are familiar with GPUImage, if not, just spent few mins and google. There is bunch of great articles talk about it, no reason to say\u00a0again.<\/p>\n<p>And if you&#8217;re step-by-step guy. Please create new projec with\u00a0your Xcode, and follow my instruction \ud83d\ude00<\/p>\n<h2>Install GPUImage from\u00a0CocoaPods<\/h2>\n<p>Navigate to root of your project. Create Podfile with content below<\/p>\n<pre class=\"lang:objc decode:true \">platform :ios,'7.0'\r\n\r\npod 'GPUImage', '~&gt; 0.1'<\/pre>\n<p>Open terminal, cd to project&#8217;s directory and run<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_1.png\"><img class=\"aligncenter wp-image-925\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?resize=632%2C331\" alt=\"dropfilter_1\" width=\"632\" height=\"331\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?w=792&amp;ssl=1 792w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?resize=300%2C157&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?resize=768%2C402&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?resize=558%2C292&amp;ssl=1 558w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_1.png?resize=655%2C343&amp;ssl=1 655w\" sizes=\"(max-width: 632px) 100vw, 632px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<pre class=\"lang:objc decode:true\">pod install<\/pre>\n<p>&#8230;&#8230; Leave it, pod will do all for you, Just go away or make couple of coffee for yourself.<\/p>\n<p>When it&#8217;s finished, we will see like this<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_2.png\"><img class=\"aligncenter wp-image-924\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropfilter_2.png?resize=440%2C269\" alt=\"dropfilter_2\" width=\"440\" height=\"269\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_2.png?w=584&amp;ssl=1 584w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_2.png?resize=300%2C183&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropfilter_2.png?resize=558%2C341&amp;ssl=1 558w\" sizes=\"(max-width: 440px) 100vw, 440px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>and open your *.DropFilter.xcworkspace instead of *.xcodeproj.<\/p>\n<h2>Write simple live filter camera<\/h2>\n<p>Before going deeply, we should build\u00a0simple live filter camera first to understand clearly.<\/p>\n<p>Here is\u00a0anatomy. We&#8217;re going to put GPUImageView on top of controller&#8217;s view.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg\"><img class=\"aligncenter wp-image-931\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg?resize=525%2C424\" alt=\"dropFilter_3\" width=\"525\" height=\"424\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg?w=746&amp;ssl=1 746w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg?resize=300%2C242&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg?resize=558%2C450&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_3.jpg?resize=655%2C529&amp;ssl=1 655w\" sizes=\"(max-width: 525px) 100vw, 525px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>GPUImageView is subclass of UIView, so it has useful UIView&#8217;s property. It just warps all of code to handle render data which come from\u00a0camera or filter.<\/p>\n<p>Open storyboard and add UIView on root view controller, and add constrains. To\u00a0guarantee camera screen will full-screen even on any device.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_4.png\"><img class=\"aligncenter wp-image-930\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_4.png?resize=221%2C295\" alt=\"dropFilter_4\" width=\"221\" height=\"295\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_4.png?w=292&amp;ssl=1 292w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_4.png?resize=225%2C300&amp;ssl=1 225w\" sizes=\"(max-width: 221px) 100vw, 221px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Switch to Identity Inspector and configure. Class is <strong>GPUImage<\/strong> and Label is <strong>Top Camera View<\/strong><\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_5.png\"><img class=\"aligncenter size-full wp-image-932\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_5.png?resize=244%2C310\" alt=\"dropFilter_5\" width=\"244\" height=\"310\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_5.png?w=244&amp;ssl=1 244w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_5.png?resize=236%2C300&amp;ssl=1 236w\" sizes=\"(max-width: 244px) 100vw, 244px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>It&#8217;s done with interface, we&#8217;re going to implement code.<\/p>\n<p>1 &#8211; Create new outlet from GPUImage with name <strong>topCameraImageView<\/strong>.<\/p>\n<p>2 &#8211; Added helper code in interface side.<\/p>\n<p>We use GPUImageStillCamera &#8211; subclass of GPUVideoCamera. By reuse it, we don&#8217;t have any\u00a0pain when working directly with AVFoundation and OpenGL ES. Many thanks to BrandLarson.<\/p>\n<p>GPUImageGrayscaleFilter is just simple things to help us apply grayscale to camera easily.<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ GPUImage View\r\n@property (weak, nonatomic) IBOutlet GPUImageView *topCameraImageView;\r\n\r\n\/\/ Still Camera\r\n@property (strong, nonatomic) GPUImageStillCamera *stillCamera;\r\n\r\n\/\/ Filter\r\n@property (strong, nonatomic) GPUImageGrayscaleFilter *grayscaleFilter;<\/pre>\n<p>3 &#8211; Configure them<\/p>\n<pre class=\"lang:objc decode:true \">- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \/\/ Do any additional setup after loading the view, typically from a nib.\r\n    \r\n    [self initCommon];\r\n    \r\n    [self configureCamera];\r\n    \r\n    [self configureFilter];\r\n    \r\n    [self configureImageView];\r\n}\r\n\r\n- (void)didReceiveMemoryWarning\r\n{\r\n    [super didReceiveMemoryWarning];\r\n    \/\/ Dispose of any resources that can be recreated.\r\n}\r\n-(BOOL) prefersStatusBarHidden\r\n{\r\n    return YES;\r\n}\r\n#pragma mark - Cycle view\r\n-(void) viewWillAppear:(BOOL)animated\r\n{\r\n    [super viewWillAppear:animated];\r\n    \r\n    [_stillCamera startCameraCapture];\r\n}\r\n-(void) viewWillDisappear:(BOOL)animated\r\n{\r\n    [super viewWillDisappear:animated];\r\n    \r\n    [_stillCamera stopCameraCapture];\r\n}\r\n#pragma mark - Init\r\n-(void) initCommon\r\n{\r\n    \r\n}\r\n-(void) configureCamera\r\n{\r\n    \/\/ Init Still camera\r\n    _stillCamera = [[GPUImageStillCamera alloc] initWithSessionPreset:AVCaptureSessionPresetHigh cameraPosition:AVCaptureDevicePositionBack];\r\n    _stillCamera.outputImageOrientation = UIInterfaceOrientationPortrait;\r\n}\r\n-(void) configureFilter\r\n{\r\n    \/\/ Gray filter\r\n    _grayscaleFilter = [[GPUImageGrayscaleFilter alloc] init];\r\n}\r\n-(void) configureImageView\r\n{\r\n    \/\/ Top\r\n    [_stillCamera addTarget:_grayscaleFilter];\r\n    [_grayscaleFilter addTarget:_topCameraImageView];\r\n}<\/pre>\n<p>^ as you read, it&#8217;s pretty\u00a0straightforward. We created instance of camera with hight quality, back camera and Portrait mode as default.<\/p>\n<p>Here is flow of raw data in app. GPUImageStillCamera gets raw data from camera and sent to sub-filter to process it. Otherwise, GPUImage implement by Decorator Pattern. It means you\u00a0could\u00a0add many filters as you expect. Finally, just send processed data to GPUImageView, and it will be present on screen.<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg\"><img class=\"aligncenter size-full wp-image-937\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg?resize=634%2C229\" alt=\"dropFilter_9\" width=\"634\" height=\"229\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg?w=634&amp;ssl=1 634w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg?resize=300%2C108&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_9.jpg?resize=558%2C202&amp;ssl=1 558w\" sizes=\"(max-width: 634px) 100vw, 634px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>So, Build and run on your iphone, here is result what we did.<\/p>\n<p><iframe width=\"750\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/hDPb1HE-yeI?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<h2>Two live filters<\/h2>\n<p>We&#8217;re moving to harder part in this blog. From now, we will apply two live filters to camera at same time.\u00a0It&#8217;s said One picture than million words. I prepared some useful photos to explain.<\/p>\n<p>Flow of data : Instead of using one flow, currently, we use 2 flows. One for GrayScaleFilter, one for AmatorkaFilter. All of them will process and send to Top\/BottomImageView and present on screen\u00a0simultaneously.<\/p>\n<p>I admit it costs x 2 CPU\/GPU\u00a0than one filter. But it isn&#8217;t problem now, 4S iphone still has enough power to show it fluently, around 30FPS.\u00a0I benchmarked it,\u00a0trust me \ud83d\ude00<\/p>\n<p><a href=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg\"><img class=\"aligncenter size-full wp-image-940\" src=\"https:\/\/i2.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=850%2C207\" alt=\"dropFilter_11\" width=\"850\" height=\"207\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?w=888&amp;ssl=1 888w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=300%2C73&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=768%2C187&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=806%2C196&amp;ssl=1 806w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=558%2C136&amp;ssl=1 558w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_11.jpg?resize=655%2C159&amp;ssl=1 655w\" sizes=\"(max-width: 850px) 100vw, 850px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>And here is\u00a0view hierarchy. We create new GPUImageView ( call as bottomImageView), and maskLayer.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg\"><img class=\"aligncenter wp-image-942\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=633%2C451\" alt=\"dropFilter_12\" width=\"633\" height=\"451\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?w=1050&amp;ssl=1 1050w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=300%2C214&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=768%2C548&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=1024%2C730&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=806%2C575&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=558%2C398&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_12.jpg?resize=655%2C467&amp;ssl=1 655w\" sizes=\"(max-width: 633px) 100vw, 633px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Mask Layer is just CALayer with frame = { 0 , 0 , width \/ 2 , height }, and assign to topImageView&#8217;s layer. By using it as mask of TopImageView, the mask will hide the portion of the original layer. So we could see bottomImageView.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg\"><img class=\"aligncenter wp-image-943\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=788%2C448\" alt=\"dropFilter_13\" width=\"788\" height=\"448\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?w=901&amp;ssl=1 901w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=300%2C170&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=768%2C436&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=806%2C458&amp;ssl=1 806w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=558%2C317&amp;ssl=1 558w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_13.jpg?resize=655%2C372&amp;ssl=1 655w\" sizes=\"(max-width: 788px) 100vw, 788px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Theory is enough, time to implement it by your hand.<\/p>\n<p>1 &#8211; Open storyboard, add new UIView (call as <strong>bottomImageView<\/strong>, subclass from <strong>GPUImageView<\/strong>), and below TopImageView.<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_14.jpg\"><img class=\"aligncenter size-full wp-image-955\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_14.jpg?resize=311%2C258\" alt=\"dropFilter_14\" width=\"311\" height=\"258\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_14.jpg?w=311&amp;ssl=1 311w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_14.jpg?resize=300%2C249&amp;ssl=1 300w\" sizes=\"(max-width: 311px) 100vw, 311px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>2 &#8211; Open viewcontroller.m and add it as outlet, new mask Layer and new filter.<\/p>\n<pre class=\"lang:objc decode:true \">\/\/ GPUImage View\r\n@property (weak, nonatomic) IBOutlet GPUImageView *bottomCameraView;\r\n\r\n\/\/ Filter\r\n@property (strong, nonatomic) GPUImageAmatorkaFilter *amatorkaFilter;\r\n\r\n\/\/ Mask\r\n@property (strong, nonatomic) CALayer *maskLayer;<\/pre>\n<p>Finally, we change implement section with new code.<\/p>\n<pre class=\"lang:objc decode:true\">- (void)viewDidLoad\r\n{\r\n    [super viewDidLoad];\r\n    \/\/ Do any additional setup after loading the view, typically from a nib.\r\n    \r\n    [self initCommon];\r\n    \r\n    [self configureCamera];\r\n    \r\n    [self configureFilter];\r\n    \r\n    [self configureImageView];\r\n    \r\n    [self initMask];\r\n}\r\n\r\n-(void) configureFilter\r\n{\r\n    \/\/ Gray filter\r\n    _grayscaleFilter = [[GPUImageGrayscaleFilter alloc] init];\r\n    \r\n    \/\/ Amatorka filter\r\n    _amatorkaFilter = [[GPUImageAmatorkaFilter alloc] init];\r\n}\r\n-(void) configureImageView\r\n{\r\n    \/\/ Top\r\n    [_stillCamera addTarget:_grayscaleFilter];\r\n    [_grayscaleFilter addTarget:_topCameraImageView];\r\n    \r\n    \/\/ Botom\r\n    [_stillCamera addTarget:_amatorkaFilter];\r\n    [_amatorkaFilter addTarget:_bottomCameraView];\r\n}\r\n-(void) initMask\r\n{\r\n    if (!_maskLayer)\r\n    {\r\n        _maskLayer = [CALayer layer];\r\n        _maskLayer.frame = CGRectMake(0, 0, self.view.bounds.size.width \/ 2, self.view.bounds.size.height);\r\n        _maskLayer.backgroundColor = [UIColor whiteColor].CGColor;\r\n        \r\n        \/\/ Add\r\n        _topCameraImageView.layer.mask = _maskLayer;\r\n        _topCameraImageView.layer.masksToBounds = YES;\r\n    }\r\n}<\/pre>\n<p>In configureFilter, we initial GPUImageAmatorkaFilter. In configureImageView, still initial bottomImageView. Please notice we should assign \u00a0_amatorkaFilter as _camera&#8217;s target, and bottomImagView is amatorkaFilter&#8217;s target.<\/p>\n<p>Magic happens in initMask method. We created new CALayer and assign it into _topCamraImageView&#8217;s layer. Because Top\/Bottom ImageView is same frame, it&#8217;s just overlay, two filter is rendered simultaneously, so people can&#8217;t notice the magic inside. It works as our expectation \ud83d\ude00<\/p>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg\"><img class=\"aligncenter wp-image-957\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=639%2C547\" alt=\"dropFilter_15\" width=\"639\" height=\"547\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?w=830&amp;ssl=1 830w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=300%2C257&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=768%2C658&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=806%2C690&amp;ssl=1 806w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=558%2C478&amp;ssl=1 558w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_15.jpg?resize=655%2C561&amp;ssl=1 655w\" sizes=\"(max-width: 639px) 100vw, 639px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>On action<\/p>\n<p><iframe width=\"750\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/DnQIbRQJ0bc?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<h2>Make it&#8217;s better<\/h2>\n<p>So, if you passed two section above, i\u00a0guarantee you&#8217;re understand what i&#8217;m doing. But we shouldn&#8217;t release app with only noob\u00a0feature. We should think and improve\u00a0it professionally &#8230;..<\/p>\n<p>I&#8217;m thinking about &#8220;What happen if we could\u00a0experience\u00a0or preview filters by our finger ?&#8221; and &#8221; Instead of rectangle, should we try another shape\u00a0in mask layer ? &#8221;<\/p>\n<p>Yeah, be inde-dev, we should ask ourself with those similar question. Each unique feature will attract people. Think difference is key of\u00a0success.<\/p>\n<p><strong>1 &#8211; Triangle mask<\/strong><br \/>\nI don&#8217;t prefer rectangle mask anymore, try triangle instead \ud83d\ude00 .So replace your initMask with new one.<\/p>\n<pre class=\"lang:objc decode:true\">-(void) initMask\r\n{\r\n    if (!_maskLayer)\r\n    {\r\n        CGFloat width = self.view.bounds.size.width;\r\n        CGFloat height = self.view.bounds.size.height;\r\n        \r\n        _maskLayer = [CAShapeLayer layer];\r\n        _maskLayer.frame = CGRectMake(0, 0, width * 2, height);\r\n        _maskLayer.backgroundColor = [UIColor clearColor].CGColor;\r\n        \r\n        \/\/ Bezier path\r\n        UIBezierPath *triangle = [UIBezierPath bezierPath];\r\n        [triangle moveToPoint:CGPointZero];\r\n        [triangle addLineToPoint:CGPointMake(width, 0)];\r\n        [triangle addLineToPoint:CGPointMake(width * 2, height)];\r\n        [triangle addLineToPoint:CGPointMake(0, height)];\r\n        [triangle addLineToPoint:CGPointZero];\r\n        \r\n        \/\/ Add to mask layer\r\n        _maskLayer.path = triangle.CGPath;\r\n        _maskLayer.fillColor = [UIColor whiteColor].CGColor;\r\n        \r\n        \/\/ Translate to center\r\n        _maskLayer.anchorPoint = CGPointZero;\r\n        _maskLayer.position = CGPointMake( - width * 2, 0);\r\n        \r\n        \/\/ Add\r\n        _topCameraImageView.layer.mask = _maskLayer;\r\n        _topCameraImageView.layer.masksToBounds = YES;\r\n    }\r\n}<\/pre>\n<p><a href=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_16.jpg\"><img class=\"aligncenter wp-image-960\" src=\"https:\/\/i0.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_16.jpg?resize=303%2C539\" alt=\"dropFilter_16\" width=\"303\" height=\"539\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_16.jpg?w=450&amp;ssl=1 450w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_16.jpg?resize=169%2C300&amp;ssl=1 169w\" sizes=\"(max-width: 303px) 100vw, 303px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p><strong>2 &#8211; User&#8217;s gesture<\/strong><br \/>\nAs i said before, i wanna use my finger to preview filter as i want. it&#8217;ll be unique\u00a0experience :D. Let add <strong>UIPanGestureRecognize\u00a0<\/strong>and <strong>FeBasicAnimationBlock<\/strong>\u00a0(helper for warping CABasicAnimation&#8217;s delegate to block)<\/p>\n<p><strong>FeBasicAnimationBlock.h<\/strong><\/p>\n<pre class=\"lang:objc decode:true\">#import &lt;Foundation\/Foundation.h&gt;\r\n#import &lt;QuartzCore\/QuartzCore.h&gt;\r\n\r\ntypedef void (^FeBasicAnimationDidStartBlock)();\r\ntypedef void (^FeBasicAnimationDidStopBlock)();\r\n\r\n@interface FeBasicAnimationBlock : NSObject\r\n@property (copy, nonatomic) FeBasicAnimationDidStartBlock blockDidStart;\r\n@property (copy, nonatomic) FeBasicAnimationDidStopBlock blockDidStop;\r\n\r\n-(void) animationDidStart:(CAAnimation *)anim;\r\n-(void) animationDidStop:(CAAnimation *)anim finished:(BOOL)flag;\r\n@end\r\n<\/pre>\n<p><strong>FeBasicAnimationBlock.m<\/strong><\/p>\n<pre class=\"lang:objc decode:true \">#import \"FeBasicAnimationBlock.h\"\r\n\r\n@implementation FeBasicAnimationBlock\r\n-(void) animationDidStart:(CAAnimation *)anim\r\n{\r\n    if (_blockDidStart)\r\n        _blockDidStart();\r\n}\r\n-(void) animationDidStop:(CAAnimation *)anim finished:(BOOL)flag\r\n{\r\n    if (_blockDidStop)\r\n        _blockDidStop();\r\n}\r\n@end\r\n<\/pre>\n<p>Switch back to ViewController.m<\/p>\n<p>Add PanGesture into @interface<\/p>\n<pre class=\"lang:objc decode:true \">\/\/ Gesture\r\n@property (strong, nonatomic) UIPanGestureRecognizer *panGesture;<\/pre>\n<p>And few new API<\/p>\n<pre class=\"lang:objc decode:true\">-(void) initGesture\r\n{\r\n    _panGesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handlePanGesture:)];\r\n    [self.view addGestureRecognizer:_panGesture];\r\n    \r\n    self.topCameraImageView.userInteractionEnabled = YES;\r\n    self.bottomCameraView.userInteractionEnabled = YES;\r\n}\r\n-(void) handlePanGesture:(UIPanGestureRecognizer *) sender\r\n{\r\n    CGPoint location = [sender locationInView:self.view];\r\n    \r\n    switch (sender.state)\r\n    {\r\n        case UIGestureRecognizerStateBegan:\r\n        case UIGestureRecognizerStateChanged:\r\n        {\r\n            \/\/ Translate maskLayer\r\n            \/\/ We should disable Implecit Animation when assign directly to property of layer\r\n\r\n            CGFloat percent = location.x \/ self.view.bounds.size.width;\r\n            \r\n            [self setPositionWithoutImplicitAnimationAtTransfrom:CATransform3DMakeTranslation (self.view.bounds.size.width * 2 * percent, 0, 0)];\r\n            \r\n            break;\r\n        }\r\n        case UIGestureRecognizerStateCancelled:\r\n        case UIGestureRecognizerStateFailed:\r\n        case UIGestureRecognizerStateEnded:\r\n        {\r\n            CATransform3D transfrom = _maskLayer.transform;\r\n            \r\n            \/\/ m41 is x corrdinatation\r\n            if (transfrom.m41 &gt; self.view.bounds.size.width)\r\n            {\r\n                \/\/ Animate masklayer to right edge\r\n                [self animationMaskLayerToTransform:CATransform3DMakeTranslation(self.view.bounds.size.width * 2, 0, 0)];\r\n            }\r\n            else\r\n            {\r\n                \/\/ Animate masklayer to left edge\r\n                [self animationMaskLayerToTransform:CATransform3DMakeTranslation( 0, 0, 0)];\r\n            }\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n}\r\n\r\n-(void) animationMaskLayerToTransform:(CATransform3D) finalTransform\r\n{\r\n    CABasicAnimation *transalteAnimation = [CABasicAnimation animationWithKeyPath:@\"transform\"];\r\n    transalteAnimation.toValue = (id)[NSValue valueWithCATransform3D:finalTransform];\r\n    transalteAnimation.duration = 0.3f;\r\n    transalteAnimation.timingFunction = [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut];\r\n    transalteAnimation.removedOnCompletion = NO;\r\n    transalteAnimation.fillMode = kCAFillModeForwards;\r\n    \r\n    \/\/ Delegate\r\n    FeBasicAnimationBlock *blockDelegate = [FeBasicAnimationBlock new];\r\n    transalteAnimation.delegate = blockDelegate;\r\n    \r\n    __weak typeof(self) weakSelf = self;\r\n    blockDelegate.blockDidStart = ^{\r\n        typeof(self) strongSelf = weakSelf;\r\n        \r\n        \/\/ Disable gesture\r\n        strongSelf.panGesture.enabled = NO;\r\n    };\r\n    blockDelegate.blockDidStop = ^{\r\n        typeof(self) strongSelf = weakSelf;\r\n        \r\n        \/\/ Enable\r\n        strongSelf.panGesture.enabled = YES;\r\n        \r\n        \/\/ remove\r\n        [strongSelf.maskLayer removeAllAnimations];\r\n        \r\n        \/\/ Set final\r\n        [strongSelf setPositionWithoutImplicitAnimationAtTransfrom:finalTransform];\r\n    };\r\n    \r\n    [_maskLayer addAnimation:transalteAnimation forKey:@\"animation\"];\r\n}\r\n-(void) setPositionWithoutImplicitAnimationAtTransfrom:(CATransform3D ) transform\r\n{\r\n    [CATransaction begin];\r\n    \r\n    \/\/ Disable\r\n    [CATransaction setDisableActions:YES];\r\n    \r\n    \/\/ Point\r\n    _maskLayer.transform = transform;\r\n    \r\n    [CATransaction commit];\r\n}<\/pre>\n<p>Finally, Run on your iphone, and preview live filter\u00a0with your finger \ud83d\ude00<\/p>\n<p><iframe width=\"750\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/0f3xzTNwRgE?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<h2>Filter name<\/h2>\n<p>It would be great if we add some filter name label in each side. Of course, it must be translate depend on your finger. So we should implement some helper API, to calculator center of cross line.<\/p>\n<p>Yeah, to achieve it, time to get your notebook and pencil to come back to high school.<br \/>\nSin, cos,tan,cotan are waiting you \ud83d\ude00<\/p>\n<p>It&#8217;s easy to understand what i wrote. The final answer is find position of O point. It&#8217;s center of cross line.<\/p>\n<p><a href=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg\"><img class=\"aligncenter size-full wp-image-967\" src=\"https:\/\/i1.wp.com\/128.199.214.43\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg?resize=750%2C500\" alt=\"dropFilter_17\" width=\"750\" height=\"500\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg?w=750&amp;ssl=1 750w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg?resize=300%2C200&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg?resize=558%2C372&amp;ssl=1 558w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_17-e1428221741695.jpg?resize=655%2C437&amp;ssl=1 655w\" sizes=\"(max-width: 750px) 100vw, 750px\" data-recalc-dims=\"1\" \/><\/a><\/p>\n<p>Add two label into @interface<\/p>\n<pre class=\"lang:objc decode:true \">\/\/ Label\r\n@property (strong, nonatomic) UILabel *grayscaleLbl;\r\n@property (strong, nonatomic) UILabel *amatorkarLbl;<\/pre>\n<p>Initial two labels<\/p>\n<pre class=\"lang:objc decode:true \">-(void) initLabels\r\n{\r\n    if (!_grayscaleLbl)\r\n    {\r\n        _grayscaleLbl = [[UILabel alloc] init];\r\n        _grayscaleLbl.text = @\"Oldboy\";\r\n        _grayscaleLbl.font = [UIFont fontWithName:@\"HelveticaNeue-Light\" size:60];\r\n        _grayscaleLbl.textColor = [UIColor whiteColor];\r\n        _grayscaleLbl.backgroundColor = [UIColor clearColor];\r\n        _grayscaleLbl.textAlignment = NSTextAlignmentCenter;\r\n        \r\n        [_grayscaleLbl sizeToFit];\r\n    }\r\n    if (!_amatorkarLbl)\r\n    {\r\n        _amatorkarLbl = [[UILabel alloc] init];\r\n        _amatorkarLbl.text = @\"Retro\";\r\n        _amatorkarLbl.font = [UIFont fontWithName:@\"HelveticaNeue-Light\" size:60];\r\n        _amatorkarLbl.textColor = [UIColor whiteColor];\r\n        _amatorkarLbl.backgroundColor = [UIColor clearColor];\r\n        _amatorkarLbl.textAlignment = NSTextAlignmentCenter;\r\n        \r\n        [_amatorkarLbl sizeToFit];\r\n    }\r\n    \r\n    _grayscaleLbl.alpha = 0;\r\n    _amatorkarLbl.alpha = 0;\r\n    \r\n    [self.view addSubview:_grayscaleLbl];\r\n    [self.view addSubview:_amatorkarLbl];\r\n}<\/pre>\n<p>Add 2 line of code in next of\u00a0UIGestureRecognizerStateChanged.<\/p>\n<pre class=\"lang:objc decode:true\">\/\/ Calculate O depend on maskLayer's transform\r\nCGPoint center = [self centerPointerDependTransform:_maskLayer.transform];\r\n\r\n\/\/ Set position of two labels     \r\n[self setLabelsWithCenter:center];<\/pre>\n<p>And here is math.<\/p>\n<pre class=\"lang:objc decode:true \">-(CGPoint) centerPointerDependTransform:(CATransform3D) transform\r\n{\r\n    \/\/ Translate lable\r\n    if (transform.m41 &gt; self.view.bounds.size.width)\r\n    {\r\n        CGFloat width = self.view.bounds.size.width;\r\n        \r\n        CGFloat GA = transform.m41 - width;\r\n        CGFloat AC = width - GA;\r\n        CGFloat AB = AC \/ cos(alphaAngel);\r\n        \r\n        CGFloat AO = AB \/ 2.0f;\r\n        CGFloat y = sin(alphaAngel) * AO;\r\n        CGFloat x = GA + cos(alphaAngel) * AO;\r\n    \r\n        return CGPointMake(x, y);\r\n    }\r\n    else\r\n    {\r\n        CGFloat height = self.view.bounds.size.height;\r\n        \r\n        CGFloat DB =  transform.m41;\r\n        CGFloat belta = M_PI \/ 2 - alphaAngel;\r\n        \r\n        CGFloat AB = DB \/ sin(belta);\r\n        \r\n        CGFloat AO = AB \/ 2.0f;\r\n        CGFloat x = sin(belta) * AO;\r\n        CGFloat y = (height - cos(belta) * AB) + cos(belta) * AO;\r\n        \r\n        NSLog(@\"DB = %.2f\",DB);\r\n        \r\n        return CGPointMake(x, y);\r\n    }\r\n    return CGPointZero;\r\n}<\/pre>\n<p>and<\/p>\n<pre class=\"lang:objc decode:true\">-(void) setLabelsWithCenter:(CGPoint) center\r\n{\r\n    \/\/ Set center\r\n    _grayscaleLbl.center = center;\r\n    _amatorkarLbl.center = center;\r\n    \r\n    \/\/ Rotate\r\n    CATransform3D t1 = CATransform3DIdentity;\r\n    t1 = CATransform3DTranslate(t1, 40, 0, 0);\r\n    t1 = CATransform3DRotate(t1, alphaAngel, 0, 0, 1);\r\n    \r\n    CATransform3D t2 = CATransform3DIdentity;\r\n    t2 = CATransform3DTranslate(t2, -40, 0, 0);\r\n    t2 = CATransform3DRotate(t2, alphaAngel, 0, 0, 1);\r\n    \r\n    _amatorkarLbl.layer.transform = t1;\r\n    _grayscaleLbl.layer.transform = t2;\r\n    \r\n    \/\/ Alpha\r\n    if (center.x &gt; self.view.bounds.size.width \/ 2)\r\n    {\r\n        _grayscaleLbl.alpha = 1;\r\n        \r\n        CGFloat GA = _maskLayer.transform.m41 - self.view.bounds.size.width;\r\n        _amatorkarLbl.alpha = 1 - (GA \/ self.view.bounds.size.width);\r\n        \r\n    }\r\n    else\r\n    {\r\n        _amatorkarLbl.alpha = 1;\r\n        \r\n        CGFloat GA = _maskLayer.transform.m41 - self.view.bounds.size.width;\r\n        GA = fabs(GA);\r\n        _grayscaleLbl.alpha = 1 - (GA \/ self.view.bounds.size.width);\r\n    }\r\n}<\/pre>\n<p>On action<br \/>\n<iframe width=\"750\" height=\"563\" src=\"https:\/\/www.youtube.com\/embed\/qGRTbdT_qxs?feature=oembed\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe><\/p>\n<h2>What&#8217;s next ?<\/h2>\n<p>&#8220;That&#8217;s one small step for you, one giant leap for your career&#8221;\u00a0&#8211; Hear similar with Neli Armstrong&#8217;s quote when he was putting step in moon \u00a0\ud83d\ude00 ? Yup, All we did is just\u00a0is small steps, we if we understand clearly, we could build awesome live filter by your-self \ud83d\ude00<\/p>\n<p>Many things to improve, complex instagram filter and swipe to preview many\u00a0live filters in camera view \ud83d\ude00 Here is\u00a0achievements i&#8217;ve done for 1 months \ud83d\ude00<\/p>\n<p>[su_youtube url=&#8221;https:\/\/www.youtube.com\/watch?v=lNbbB9zqBOI&#8221;]<\/p>\n<p>Thanks for reading \ud83d\ude00<\/p>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/DropFilter&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]Github[\/su_button]<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2015\/04\/dropFilter_icon.png","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 01 Apr 2015 10:54:15 +0000","created_by":1,"updated_at":"Fri, 10 Feb 2017 00:51:00 +0000","updated_by":1,"published_at":"Wed, 01 Apr 2015 10:54:15 +0000","published_by":1},{"id":4024,"title":"Portfolio","slug":"portfolio","markdown":"","html":"","image":null,"featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 07 Nov 2016 10:42:31 +0000","created_by":1,"updated_at":"Sat, 11 Feb 2017 14:26:39 +0000","updated_by":1,"published_at":"Mon, 07 Nov 2016 10:42:31 +0000","published_by":1},{"id":4028,"title":"About Me","slug":"about-me","markdown":"\n\n## **Hi! I\u2019m Nghia Tran (aka Noah).**\n\nI\u2019m an iOS\/macOS craftsman and Sushi Chief at [Proxyman](https:\/\/proxyman.app).\n\nI also write blog as well as working on few\u00a0[pet projects.](https:\/\/github.com\/NghiaTranUIT)\n\nKeep in touch with me at vinhnghiatran[at]gmail[dot]com.\n\n\n## Pet Projects\n\nSome current and past pet-projects:\n\n- **[Proxyman](https:\/\/proxyman.app)**: Founder of Proxyman app, which is an advanced HTTP Proxy debugger.\n- [Uber macOS](http:\/\/uber.megaton.xyz):\u00a0Obviously, you\u2019ve already known what it\u2019s, right?\n- [Titan](https:\/\/github.com\/NghiaTranUIT\/Titan-Postgresql):\u00a0PostgreSQL client for macOS\/iOS. Clean architecture, clean design. Absolutely 100% free and open-source. (in progress).\n- [iOS-awesome-starter-kit](https:\/\/github.com\/NghiaTranUIT\/iOS-Awesome-Starter-Kit)\u00a02016:\u00a0The perfect combination: Clean Swift + ReSwift + PromiseKit.\n- [FeSpinner](https:\/\/github.com\/NghiaTranUIT\/FeSpinner) 2015: ~1.2k star. A collection of custom spinners. Inspiration from various authors I found on\u00a0Dribble and Behance.\n- <span class=\"repo js-repo\" title=\"Responsive-Interaction-Control\">[Responsive-Interaction-Control](https:\/\/github.com\/NghiaTranUIT\/Responsive-Interaction-Control)\u00a02015:\u00a0Bring Android L\u2019s animation to iOS.<\/span>\n- [FeSlideFilter](https:\/\/github.com\/NghiaTranUIT\/FeSlideFilter)\u00a02014:\u00a0Apply\u00a0photo-filter by your fingers.\n\n\n## Hackathon\n\n- [Runner-up prize] at\u00a0EdTech Hanoi 2016. We built a\u00a0[VirtualBook](https:\/\/github.com\/VirtualBook\/VirtualBook).\u00a0It\u2019s an open platform where people can contribute\/submit their knowledge as lectures\/slides in supported 3D VR models and others can use them for educational purposes.\n- [Fail] at Hack&Roll 2016 \u2013 24 hours Hackathon base in NUS, Singapore. Got a scholarship for a free trip from Vietnam. Unfortunately, the first plan was failed (tried to build indoor-location GPS by 12 pieces of\u00a0[Estimote](http:\/\/estimote.com)\u00a0device). So I and Huy came up with [AwesomeButton](https:\/\/devpost.com\/software\/awesomebox).\u00a0Inspired from \u201cIn case of fire \u2026 #Git #Commit\u201d. We built from Photon + IFTTT\u00a0+ Raspberry pi + mobile. Things we can found at\u00a0Hack&Roll\u2019s warehouse. We aimed Useless-Stuff prize, but there is a team built a special pin which \u201cmore\u201d useless than ours\u00a0\ud83d\ude00\n- [Fail] at HCMC Hackathon Vietnam 2014. We built an Online ticket booking service. The best things we built is integrated with Passbook in iOS. Allow people to check-in easier.\n- [Third Prize] at Vietnam Mobile Hackathon 2013. Within 24h, we built StoMo, mean StopMotion. We implemented all things from scratch. Allow us to take a bunch of photos, compose it and render high-quality video. Interestingly enough, we use StoMo to make a short video at the last hour of Hackathon \ud83d\ude00\n- [Second Prize] at Mobile Got Talent \u2013 VTC Academy 2012. It\u2019s the first time I attended a\u00a0competition. I built ILoveQuote with clean design, hundred inspiration quote, and beautiful background.\n\n\n## Things I\u2019ve talked\u00a0about iOS and Swift:\n\n- [iOS-Awesome-Kickstarter-Kit](https:\/\/github.com\/NghiaTranUIT\/iOS-Awesome-Starter-Kit): A presentation to\u00a0share how the startup can ship the first prototype quickly. Built on by\u00a0strong base-foundation by perfect combination: CleanSwift + PromiseKit + ReSwift. Easily to change, extend, improve the features.\u00a0I also\u00a0mention a real problem with MVC and common mistakes when building a project.\n- Build iOS for 24-hours: TekTalk extends\u00a0to Hanoi city. I and my friend create small meet-up and help the people to build an iOS app. We cover from design and bring it to the real app step by step.\n- iOS Best Practice: The first time I\u2019ve been a speaker at\u00a0TekTalk community. Take a look at best practice for iOS developer. It\u2019s real problem I encounter when developing feels app. Make a benchmark for each problem: Such as Caching Manager, Pre-heating, Priority-Image download queue, IMGIX. Implemented basic \u201cSource of truth\u201d for State-management and combine with KVO\n- Clean Swift Architecture at Hanoi: A short talk to demonstrate advantages about Clean Swift Architecture under start-up environment.\n- Diff Algorithm & Practice Vietnam Swift 2017: Discuss LCS, Diff and applying on UITableView\/UICollectionView\n\n\n## Resume\n\n[Google Drive (2018)](https:\/\/docs.google.com\/document\/d\/1y7gSiIO7IwgoRLdK-Y50kUAt8_b3TcDG5qTWhNnZihU\/edit?usp=sharing)\n\n\n","html":"<h2><strong>Hi! I&#8217;m Nghia Tran (aka Noah).<\/strong><\/h2>\n<p>I&#8217;m an iOS\/macOS craftsman and Sushi Chief at <a href=\"https:\/\/proxyman.app\">Proxyman<\/a>.<\/p>\n<p>I also write blog as well as working on few\u00a0<a href=\"https:\/\/github.com\/NghiaTranUIT\">pet projects.<\/a><\/p>\n<p>Keep in touch with me at vinhnghiatran[at]gmail[dot]com.<\/p>\n<h2>Pet Projects<\/h2>\n<p style=\"padding-left: 30px;\">Some current and past pet-projects:<\/p>\n<ul>\n<li><strong><a href=\"https:\/\/proxyman.app\">Proxyman<\/a><\/strong>: Founder of Proxyman app, which is an advanced HTTP Proxy debugger.<\/li>\n<li><a href=\"http:\/\/uber.megaton.xyz\">Uber macOS<\/a>:\u00a0Obviously, you&#8217;ve already known what it&#8217;s, right?<\/li>\n<li><a href=\"https:\/\/github.com\/NghiaTranUIT\/Titan-Postgresql\">Titan<\/a>:\u00a0PostgreSQL client for macOS\/iOS. Clean architecture, clean design. Absolutely 100% free and open-source. (in progress).<\/li>\n<li><a href=\"https:\/\/github.com\/NghiaTranUIT\/iOS-Awesome-Starter-Kit\">iOS-awesome-starter-kit<\/a>\u00a02016:\u00a0The perfect combination: Clean Swift + ReSwift + PromiseKit.<\/li>\n<li><a href=\"https:\/\/github.com\/NghiaTranUIT\/FeSpinner\">FeSpinner<\/a> 2015: ~1.2k star. A collection of custom spinners. Inspiration from various authors I found on\u00a0Dribble and Behance.<\/li>\n<li><span class=\"repo js-repo\" title=\"Responsive-Interaction-Control\"><a class=\"text-bold\" href=\"https:\/\/github.com\/NghiaTranUIT\/Responsive-Interaction-Control\">Responsive-Interaction-Control<\/a>\u00a02015:\u00a0Bring Android L&#8217;s animation to iOS.<\/span><\/li>\n<li><a class=\"text-bold\" href=\"https:\/\/github.com\/NghiaTranUIT\/FeSlideFilter\">FeSlideFilter<\/a>\u00a02014:\u00a0Apply\u00a0photo-filter by your fingers.<\/li>\n<\/ul>\n<h2>Hackathon<\/h2>\n<ul>\n<li>[Runner-up prize] at\u00a0EdTech Hanoi 2016. We built a\u00a0<a href=\"https:\/\/github.com\/VirtualBook\/VirtualBook\">VirtualBook<\/a>.\u00a0It&#8217;s an open platform where people can contribute\/submit their knowledge as lectures\/slides in supported 3D VR models and others can use them for educational purposes.<\/li>\n<li>[Fail] at Hack&amp;Roll 2016 &#8211; 24 hours Hackathon base in NUS, Singapore. Got a scholarship for a free trip from Vietnam. Unfortunately, the first plan was failed (tried to build indoor-location GPS by 12 pieces of\u00a0<a href=\"http:\/\/estimote.com\">Estimote<\/a>\u00a0device). So I and Huy came up with <a href=\"https:\/\/devpost.com\/software\/awesomebox\">AwesomeButton<\/a>.\u00a0Inspired from &#8220;In case of fire &#8230; #Git #Commit&#8221;. We built from Photon + IFTTT\u00a0+ Raspberry pi + mobile. Things we can found at\u00a0Hack&amp;Roll&#8217;s warehouse. We aimed Useless-Stuff prize, but there is a team built a special pin which &#8220;more&#8221; useless than ours\u00a0\ud83d\ude00<\/li>\n<li>[Fail] at HCMC Hackathon Vietnam 2014. We built an Online ticket booking service. The best things we built is integrated with Passbook in iOS. Allow people to check-in easier.<\/li>\n<li>[Third Prize] at Vietnam Mobile Hackathon 2013. Within 24h, we built StoMo, mean StopMotion. We implemented all things from scratch. Allow us to take a bunch of photos, compose it and render high-quality video. Interestingly enough, we use StoMo to make a short video at the last hour of Hackathon \ud83d\ude00<\/li>\n<li>[Second Prize] at Mobile Got Talent &#8211; VTC Academy 2012. It&#8217;s the first time I attended a\u00a0competition. I built ILoveQuote with clean design, hundred inspiration quote, and beautiful background.<\/li>\n<\/ul>\n<h2>Things I&#8217;ve talked\u00a0about iOS and Swift:<\/h2>\n<ul>\n<li><a href=\"https:\/\/github.com\/NghiaTranUIT\/iOS-Awesome-Starter-Kit\">iOS-Awesome-Kickstarter-Kit<\/a>: A presentation to\u00a0share how the startup can ship the first prototype quickly. Built on by\u00a0strong base-foundation by perfect combination: CleanSwift + PromiseKit + ReSwift. Easily to change, extend, improve the features.\u00a0I also\u00a0mention a real problem with MVC and common mistakes when building a project.<\/li>\n<li>Build iOS for 24-hours: TekTalk extends\u00a0to Hanoi city. I and my friend create small meet-up and help the people to build an iOS app. We cover from design and bring it to the real app step by step.<\/li>\n<li>iOS Best Practice: The first time I&#8217;ve been a speaker at\u00a0TekTalk community. Take a look at best practice for iOS developer. It&#8217;s real problem I encounter when developing feels app. Make a benchmark for each problem: Such as Caching Manager, Pre-heating, Priority-Image download queue, IMGIX. Implemented basic &#8220;Source of truth&#8221; for State-management and combine with KVO<\/li>\n<li>Clean Swift Architecture at Hanoi: A short talk to demonstrate advantages about Clean Swift Architecture under start-up environment.<\/li>\n<li>Diff Algorithm &amp; Practice Vietnam Swift 2017: Discuss LCS, Diff and applying on UITableView\/UICollectionView<\/li>\n<\/ul>\n<h2>Resume<\/h2>\n<p><a href=\"https:\/\/docs.google.com\/document\/d\/1y7gSiIO7IwgoRLdK-Y50kUAt8_b3TcDG5qTWhNnZihU\/edit?usp=sharing\">Google Drive (2018)<\/a><\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/09\/gabriel-garcia-marengo-6132.jpg","featured":0,"page":1,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 07 Nov 2016 10:46:08 +0000","created_by":1,"updated_at":"Mon, 22 Oct 2018 15:32:38 +0000","updated_by":1,"published_at":"Mon, 07 Nov 2016 10:46:08 +0000","published_by":1},{"id":4260,"title":"Longest Common Subsequence Diff [Part 1]","slug":"longest-common-subsequence-diff-part-1","markdown":"\nHi, Today is totally\u00a0perfect day to start a new\u00a0series of Algorithm blog. Since I\u2019ve learned data structure & algorithm to prepare for\u00a0next interview. I learnt tons of new amazing things, so I decide to write something for anyone who interesting\u00a0\ud83d\ude09\n\nLongest Common Subsequence (aka Diff) is classic problem in computer science. We\u2019re using it everyday, but we didn\u2019t\u00a0notice. It also widely used by Revision Control System.\n\n- When Github figure it out what\u2019s new line of codes, what\u2019s removed. They use Diff\n- When [DiffChecker](https:\/\/www.diffchecker.com) \u00a0do comparison. They use Diff.\n- Diff Utility use Diff as main core.\n\nIn another hand,\u00a0diff is also useful\u00a0to compare pair of\u00a0images.\n\n- [Kaleidoscope](http:\/\/www.kaleidoscopeapp.com)\u00a0is able to spot the difference of two images with pixel accuracy, and print it out.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/kaleidoscope-300x79.jpg?resize=762%2C201)\n\n- [Facebook iOS Snapshot Test](https:\/\/github.com\/facebook\/ios-snapshot-test-case)\u00a0make diff by drawing both of layer\/view and reference image, then compare each pair of pointer in memory with\u00a0the C function\u00a0`memcmp().\u00a0`This make it extremely quick:\u00a0from 0.013 to 0.086 seconds for fullscreen iPad on Macbook Air ([reference](https:\/\/www.objc.io\/issues\/15-testing\/snapshot-testing\/))\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/snapshots-reference-59b0b96b-300x162.png?resize=754%2C407)\n\n- [IGListKit](https:\/\/github.com\/Instagram\/IGListKit) is amazing open-source, built from Instagram\u00a0Engineering team. According from their blog, IGListKit still use improved Diff (Paul Heckel\u2019s algorithm) to calculate and perform insert\/move\/reload\/delete without crashed with **linear time BigO(n), **it\u2019s really increadible result.\n\n**![](https:\/\/i1.wp.com\/cdn-images-1.medium.com\/max\/1600\/1*7w2BL8pAqAs-qMiDWHLENA.gif?resize=541%2C260&ssl=1)**\n\n\u00a0\n\nTo understand deeply LCS and a apply it to real world. I intent to\u00a0split into 2 parts.\n\n**Part 1:** We will discuss how to implement LSC with **naive solution** and with** Dynamic Programming**, by using Memorization table. I will try to visualize the algorithm of both solution as possible. I will implement by pure swift to make sure everybody can understand before moving to real shit.\n\nThe main goal, we will extend Array<Element>. Put more effort, so it can reusable in any kind of array.\n\n\/\/ Work with generic array \/\/ It will work [Any], which Element must adopt with <Equatable> protocol extension Array where Element: Equatable {}\n\n**Part 2:** It\u2019s real world, we reused the knowledge from part 1.\u00a0Implement Diff, DiffStep to represent each step (insert\/delete\/reload) need to be transform. Also extend UITableView, UICollectionView to calculate optimize transformation, from old to new Data Source\n\nThe goal looks like:\n\n\/\/ Calculate diff and map to each actions let insertionIndexPaths = diff.insertions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) }) let deletionIndexPaths = diff.deletions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) }) \/\/ Perform action tableView.beginUpdates() tableView.insertRows(at: insertionIndexPaths, with: insertionAnimation) tableView.deleteRows(at: deletionIndexPaths, with: deletionAnimation) tableView.endUpdates()\n\n^ see that. Really simple for use. If you calculate the diff **manually\u00a0**by your hand and your pencil, it\u2019s really tricky and risky. If it\u00a0go wrong, your app might crash completely\u00a0and you\u2019re fired =)). Brace\u00a0yourself\n\n\n## 1. What\u2019s classic LCS ?\n\nGiven 2 string, find the length of Longest Common Subsequence (LCS) which present in both of them.\u00a0\u00a0A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.\n\nExample, we have string X = \u201cABCDEFG\u201d. So \u201cABD\u201d, \u201cACD\u201d, \u201cAFG\u201d, \u201cCEFB\u201d, \u201cFG\u201d, \u2026. is one of subsequence of X.\n\nBut \u201cAED\u201d, \u201cEBA\u201d, \u201cGFEDA\u201d \u2026 isn\u2019t correct, because it must be same order.\n\nSo a string with n length, will have n\u00b2 substrings which can construct possible.\n\nLCS of \u201cABCDEF\u201d and \u201cATDEXF\u201d is ADEF, length = 4\n\nLCS of \u201cABC\u201d and \u201cAXYZC\u201d is AC, length = 2\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/Longest-Common-Subsequence-example-300x94.jpg?resize=517%2C162)\n\nor A = \u201cacbaed\u201d, B = \u201cabcadf\u201d => LCS is \u201cacad\u201d, length = 4\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n[su_divider top=\u201dno\u201d divider_color=\u201d#f3f3f3\u2033 link_color=\u201d#f3f3f3\u2033 size=\u201d2\u2033]\n\nBefore walking into Implementation and Explanation section. It would be better if you\u00a0try putting your hand in real shit.\n\nDon\u2019t worry about performance or Big(O) yet, just finish it by yourself.\n\nYou can try online at **[HackerRank](https:\/\/www.hackerrank.com\/challenges\/dynamic-programming-classics-the-longest-common-subsequence)**\u00a0with real test-cases \ud83d\ude09\n\n[su_divider top=\u201dno\u201d divider_color=\u201d#f3f3f3\u2033 link_color=\u201d#f3f3f3\u2033 size=\u201d2\u2033]\n\n*if you don\u2019t have enough patient, just scroll down and \u00a0keep reading *\ud83d\ude2a\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\n## 1.1 Naive approach\n\nThe naive solution we can think in our mind is: Iterate through each character in both of string, and compare each result to get final LCS.\n\nIn given string A with length = n, it might take O(2<sup>n<\/sup>) time to complete. It still work without problem if the string is short, but in particular situation, \u00a0it\u2019s really nightmare if we have\u00a0very long long text.\n\nDon\u2019t worry about it at this time, I will come to naive approach firstly, by using bottom-up recursion.\n\nIf we come with recursion, two important things we should\u00a0to defined is** sub-problem** and **base-recursion(exit)**\n\n### *Sub-problem\n\n**Case 1: Both of character is same.**\n\nExample: Given \u201cADFGT\u201d and \u201cAFOXT\u201d\n\nWe start from bottom, so we get \u201cT\u201d from the first one and \u201cT\u201d from the second one.\n\nIt\u2019s match then T **must be a part of LCS**, so we count up by 1. Then we remove both of those, and run recursive continently.\n\n\/\/ Case 1 - both characters are matched LCS(\"ADFGT\", \"AFOXT\") = 1 + LCS(\"ADFG\", \"AFOX\")\n\n**Case 2: Pair of character isn\u2019t match:**\n\nGiven \u00a0\u201cADFG\u201d and \u201cAFOX\u201d, and as we see\n\n\u201cG\u201d != \u201cX\u201d\n\nIt means G\u00a0maybe part of LCS between \u201cADF**G**\u201d and \u201cAFO\u201d\n\nor X could be part of LCS between \u201cADF\u201d and\u00a0\u201cAFO**X**\u201d\n\nWe don\u2019t know which case is correct.\u00a0So we should call recursion on two possible case and compare the get max value. We can write down like here\n\nLCS(\"ADFG\", \"AFOX\") = Max(LCS(\"ADF\", \"AFOX\"), LCS(\"ADFG\", \"AFO\"))\n\n### Summarize\n\nGive 2 string A[0..i-1], and B[0..j-1] with i and j is length of A\u00a0and\u00a0B\n\n\/\/ Define findLCS func func findLCS(A: String, B: String) {} let m = A.length() let m = B.length() \/\/ Case 1 A[m - 1] == B[n - 1] => findLCS(A, B) = 1 + findLCS(A[0..m-2], B[0..n-2]) \/\/ Case 2 A[m - 1] != B[n - 1] => findLCS(A, B) = MAX(findLCS(A[0..m-2], B[0..n-1]), findLCS(A[0..m-1], B[0..n-2]))\n\n### *Base recursion (exit)\n\nSo, how about exit recursion ? If you\u2019re working on recursion functionality, please, don\u2019t forget the EXIT.\n\nIt\u2019s same habit when you come to large\u00a0building, like CVC cinema or luxury mall, look a EXIT way firstly. In-case of fire, we can get out quickly, and save\u00a0your life. It\u2019s one of must-have survival skill in modern world. So do the same things with Recursion too \ud83d\ude07\n\nReally to figure it out when we should stop: either if any string become **empty string.**\n\nif A.length() == 0 || B.length() == 0 return 0\n\n\n## 1.2 Problem\n\nImagination is really hard, so I will draw a tree to see what\u2019s behind the scene.\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_13-300x117.png?resize=670%2C261)\n\n^ As you can see, there are few sub-problems has been solved many\u00a0times. Time complexity is O(2<sup>n<\/sup>) in worse case when all character of X and Y are mismatch. It will be [exponential](https:\/\/en.wikipedia.org\/wiki\/Exponential_growth) by time.\n\nIn next section, we should come up with **Dynamic Programming** approach.\n\nHere is swift code\n\n\/\/ Hack convention \/\/ Don't mess up with Range from Swift 3 extension String { func charAt(_ i: Int) -> String { return String((self as NSString).character(at: i)) } } \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \/\/ NAIVE APPROACH \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \/\/ Recurvise func to length of LCS func LCS(_ a: String, _ b: String) -> Int{ \/\/ Exit if a.characters.count == 0 || b.characters.count == 0 { return 0 } \/\/ Prepare let lengthA = a.characters.count let lengthB = b.characters.count let aIndex = a.index(a.endIndex, offsetBy: -1) let bIndex = b.index(b.endIndex, offsetBy: -1) \/\/ Sub-problem if a.charAt(lengthA - 1) == b.charAt(lengthB - 1) { \/\/ MATCH return 1 + LCS(a.substring(to: aIndex), b.substring(to: bIndex)) } else { \/\/ NOT MATCH return max(LCS(a.substring(to: aIndex), b), LCS(a, b.substring(to: bIndex))) } } \/\/ Test let a = \"acbaed\" let b = \"abcadf\" print(LCS(a, b)) \/\/ 4 \/\/ Unicode let x = \"\ud83d\ude07\ud83d\ude4c\ud83d\ude09\ud83d\udcb0\ud83c\udfb9\" let y = \"\ud83d\ude4c\ud83c\udf52\ud83d\udcb0\u2708\ufe0f\ud83c\udfb9\ud83d\ude0e\ud83d\udd34\" print(LCS(x, y)) \/\/ 3\n\nSwift Playground [su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/LCS-Swift\/blob\/master\/LCS-Naive-Solution-Part-1.playground\/Contents.swift\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]LCS \u2013 Naive Solution[\/su_button]\n\n\n## 2. Dynamic Programming\n\nBasically, we will use two-dimension array to store the result, reduce time calculate, and reused the result\u00a0when ever needed. This technique call \u00a0as\u00a0Memorization.\n\nUsing memorization table is really useful to avoid Overlapping Substructure when design algorithm, we reused result which calculated before, rather computed over and over. But what is the trade-off ?\n\n1. **It cost more space in memory**. If string is Unicode, it also cost more space than\u00a0ASCII, but if the goal of solution is aiming to time-complexity, so\u00a0memorization-table is best choice right now.\n2. If we implement on low-end computer, it means we have limited memory, so we should consider carefully to apply this approach. Maybe\u00a0slow a bit by using Recursion will be better, and acceptable.\n\nTalk enough, please show me your code \ud83d\ude2a\n\n### 2.1 Memorization table\n\nI will visualize the table step by step now. We will use same given input string from section 1.\n\nA = \u201cADFGT\u201d and B = \u201cAFOXT\u201d, and m is A.length(), n = B.length()\n\nCreate two-dimension LCS\u00a0= [m + 1][n + 1], fill with zero if i == 0 || j == 0\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_1-300x264.png?resize=464%2C408)\n\nThe reason why we fill the zero, because the empty string \u201c\u201d maybe is LCS as well.\n\nFollowing two\u00a0equation we summarized before, but this time, we don\u2019t use recursion, we use 2 nested-loop, and define LCS as 2-dimension array (filled with 0). But still retain the same philosophy.\n\n\/\/ Defind LCS array (filled with 0 firstly) var LCS = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1) var i = 1 var j = 1 \/\/ Case 1: Match A[i - 1] == B[j - 1] => LCS[i][j] = 1 + LCS[i - 1][j - 1] \/\/ Case 2: Not Match A[i - 1] == B[j - 1] => LCS[i][j] = MAX(LCS([i - 1][j]), LCS(LCS[i][j - 1]))\n\nHere is the visualize of them\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_2-266x300.png?resize=264%2C297)![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_4-300x173.png?resize=482%2C278)\n\nSimple af\u00a0right? \u00a0\ud83d\ude09\n\nWe start to iterate over table with i = 1, and j = 1. We have A[i \u2013 1] == \u201cA\u201d, B[j \u2013 1] == \u201cA\u201d => It matches, so we do Case 1\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_5-300x251.png?resize=408%2C341)\n\n=> LCS[1][1] = 1 + LCS[0][0] = 1\n\nContinue with i = 1, j = 2. We compare A[i \u2013 1] != B[j \u2013 1] => \u201cA\u201d != \u201cF\u201d => We do Case 2.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_6-300x252.png?resize=433%2C364)\n\nYeah, so can see, by following case 2, we will compare the value of LCS[1][1] and LCS[0][2].\n\nWe have 1 > 0 => we get **1** as a result, then store in LCS[1][2].\n\nLCS[1][2] = max(LCS[1][1], LCS[0][2])\n\nKeep computing by your hand + brain to the rest of table.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_7-300x257.png?resize=441%2C378)\n\n=> See that \ud83d\ude09 just do it with case 1 again\n\nUntil the end.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_8-300x249.png?resize=449%2C372)\n\nFinally, we got it. So the Length\u00a0of LCS is 3.\n\nWe haven\u2019t stopped at here yet, because the goal of LCS doesn\u2019t stop at print the length of LCS. We should print out the LCS it-self.\n\n### 2.2 Print LCS\n\nTo print LCS in\u00a0memorization table is tricky. Because we should traceback\u00a0the table again, from the **bottom corner** to the **top corner** where we\u2019ve started, by following new simplest rules.\n\n- if A[i] == B[j] => It means, this element must be a part of LCS, so we print it, we will go to diagonal (means last char\u00adac\u00adter of both string has matched, so we reduce the length of both the strings by 1, so we move diag\u00ado\u00adnally)\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9-300x261.png?resize=400%2C348)\n\n- if A[i] != B[j], we have two sub-case here. Please check my code\n\nLCS[i][j] = Max(LCS[i - 1][j], LCS[i][j - 1]); if (LCS[i][j] == LCS[i - 1][j]) { solution[i][j] = \"top\"; } else { solution[i][j] = \"left\"; }\n\nHere is visualize\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10-300x205.png?resize=476%2C325)![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11-300x280.png?resize=343%2C320)\n\nKeep traceback-ing to\u00a0the top of memorization table \ud83e\udd17. We will have somethings like below. Please notice, the Red Cell is the character we need to store somewhere, because it\u2019s part of LCS.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12-300x256.png?resize=413%2C352)\n\nThe final result is AFT \ud83d\ude4c\n\n### 2.3 Time complexity\n\n### Naive solution\n\nBecause we list all possible pair of sub-string between given A and B, and have many overlap sub-problem.\n\nIt costs O(2<sup>n<\/sup>).\n\nIt has big problem if the length of text is really long. Because the time complexity is grow quadratically. So let imagine, if we do trivial naive approach, and we have 64\u00a0character, seem we must make comparison up to 2^64 times. It becomes big deal.\n\n### Dynamic Programming\n\nBy using memorization table to store value calculated, we save a lot of time here. In the implementation code, we only use 2 loop nested.\n\nIt costs O(n\u00b2).\n\nGiven 64 character string, we have 64^64 = **4096** vs\u00a02^64 =\u00a0**1.8E19**\n\nSeem\u00a0O(n\u00b2) looks\u00a0bad, but it\u2019s better 1000\u2026x than\u00a0O(2<sup>n<\/sup>).\n\n\n## 2.4 Improvement\n\n### Reduce the problem set\n\nIn most of real-world scenario, **the beginning and the ends of file rarely changed.\u00a0**If only few string in middle of texts are changed, we can remove\/reduce the begin and end.\n\nBy reducing or bounding the upper\/lower limitation, we can save tons of memory and\u00a0comparison time.\n\nHere is presudo-code\n\nfunc TrimLCS(A: String, B: String) { var start = 0 var aEnd = A.length() var bEnd = B.length() \/\/ Get index of beginning of file while start < aEnd && start < bEnd && A[start] == B[start] { start += 1 } \/\/ Get index of End of file while start \u2264 aEnd and start \u2264 bEnd and A[aEnd] == B[bEnd] { aEnd -= 1 bEnd -= 1 } \/\/ Trim let newA = A.trim(start..aEnd) let newB = B.trim(start..bEnd) \/\/ Keep doing LCS algorithm here for ... }\n\n### Reduce the comparison time\n\nThe most of time costs in naive which come from comparison between two characters. In some case, such as source code diff, we only want to see new line, we don\u2019t need to see each difference character. By comparing\u00a0long text, seem be more effience\n\n### Turn string to hashes\n\nInstead of storing long raw string, we may consider to hash or checksum. If the text\u2019s length from 60 or longer, the hash and checksum will turn it shortly, might be only 8-40 character.\n\nYeah, how about drawback in Hashmap\u00a0? \ud83e\udd14\n\n1. We need more time to preprocess from both of string.\n2. We need more space to be allocated for\u00a0Hashmap\n3. Collision in Hashmap. Since the checksum or Hashmap\u00a0isn\u2019t\u00a0guarantee to be unique. There are small\u00a0chance two value could be reduced to same hash.\n\nFinally, it\u2019s depend on your requirement or place the algorithm will execute. If you\u2019re going to implement LCS on high-end computer, with endless memory, but have limited speed, we should consider about time complexity.\n\nOrthewise, if on low-end device, with really small memory, please take a look a space complexity \ud83d\ude4c\n\n\n## 3. Swift ?\n\nInstead of implement original solution. It means only work with String. We should put more effort, and make a extension on Array. It might be difficult to understand a bit, but LCS can work with custom model as well.\n\nIf you\u2019re not familiar with Generic, Equatable, Element in Array. Don\u2019t hesitate to spend 30 minutes to review base-foundation in [Swift\u00a0Documentation](https:\/\/developer.apple.com\/library\/prerelease\/content\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/Generics.html#\/\/apple_ref\/doc\/uid\/TP40014097-CH26-ID179)\n\nThe extension look like below.\n\n\/\/\/\/ Extension of Array \/\/ But we must ensure, each element must adopt with <Equatable> protocol -> We can make comparision extension Array where Element: Equatable {}\n\n### Memorization table\n\nThe first thing is Memorization table. Please take a look at visualization I draw at previous section.\n\nWe create table: [[Element]] and run two nested loop, and calculate the length of LCS by following 2 case: MATCH and NOT MATCH\n\n\/\/ Memorization table struct MemorizationTable<T: Equatable> { static func buildTable(x: [T], y: [T]) -> [[Int]] { \/\/ Create 2-dimension table, and filled with zero let n = x.count let m = y.count var table = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1) \/\/ Iterate from top-left corner -> bottom-right corner for i in 0...n { for j in 0...m { if i == 0 || j == 0 { table[i][j] = 0 } else if x[i-1] == y[j-1] { \/\/ MATCH table[i][j] = table[i-1][j-1] + 1 } else { \/\/ NOT MATCH table[i][j] = max(table[i-1][j], table[i][j-1]) } } } return table } }\n\nThe code above is really simple af. Just following the table on your notebook, imagine how the i,j iterate over table, check case 1, case 2, move on to next cell.\n\n### LCS with generic Array\n\nIt\u2019s really tricky to run recursion from bottom corner to the top. It\u2019s same approach I mention in section 2.2.\n\n- Start from Bottom\n- If x[i] == y[j] \/\/ Match -> Move\u00a0diag\u00ado\u00adnally\n- else, we check if\u00a0table[i-1][j] > table[i][j-1] -> Go Top\n- else Go Left \ud83d\ude0e\n\nHere is detail code. I tried to write simple as possible. Please notice\u00a0**lcsFromMemorizationTable**\u00a0is private method. Because I don\u2019t want people modify it.\n\n\/\/\/\/ Extension of Array \/\/ But we must ensure, each element must adopt with <Equatable> protocol -> We can make comparision extension Array where Element: Equatable { func LCS(_ other: [Element]) -> [Element] { \/\/ Build memorization table let table = MemorizationTable.buildTable(x: self, y: other) \/\/ Print LCS return self.lcsFromMemorizationTable(table, self, other, self.count, other.count) } fileprivate func lcsFromMemorizationTable(_ table: [[Int]], _ x: [Element], _ y: [Element], _ i: Int, _ j: Int) -> [Element] { \/\/ Exit if i == 0 || j == 0 { return [] } \/\/ Recurvise else if x[i-1] == y[j-1] { \/\/ MATCH -> Get element return lcsFromMemorizationTable(table, x, y, i - 1, j - 1) + [x[i-1]] } else if table[i-1][j] > table[i][j-1] { \/\/ Top return lcsFromMemorizationTable(table, x, y, i - 1, j) } else { \/\/ Left return lcsFromMemorizationTable(table, x, y, i, j - 1) } } }\n\n### Test with string\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \/\/\/\/\/\/ TEST with string \/\/ Convert [CharacterView] -> [String] let a = \"acbaed\".characters.map {String($0)} let b = \"abcadfa\".characters.map {String($0)} let lcs = a.LCS(b) \/\/ print(lcs) \/\/ [\"a\", \"b\", \"a\", \"d\"]\n\nBecause LCS is working with Array<Element>, so we need to map [CharacterView] -> [String].\n\n### Test with array of Custom model\n\n**UserObj** is custom struct, or any kind of class.\u00a0The different thing, we must adopt Equatable.\n\nstruct UserObj: CustomStringConvertible { let name: String! var description: String { return \"{\\(self.name!)}\" } } \/\/ Adopt Equatable extension UserObj: Equatable { public static func ==(lhs: UserObj, rhs: UserObj) -> Bool { return lhs.name == rhs.name } }\n\nDon\u2019t forget to adopt <Equatable> protocol. If you don\u2019t do this. Swift can\u2019t understand how to make a comparison between **UserObj.**\n\nActually, even if you won\u2019t do it on\u00a0purpose, XCode will shot you an error intermediately, at build-time \u274c. It\u2019s one reason why I really love Swift \u2013 type safe language \ud83e\udd17\n\nlet localUsers = [UserObj(name: \"Nghia Tran\"), UserObj(name: \"nghiatran.me\"), UserObj(name: \"SaiGon\"), UserObj(name: \"Algorithm\")] let remoteUsers = [UserObj(name: \"Kamakura\"), UserObj(name: \"Nghia Tran\"), UserObj(name: \"Algorithm\"), UserObj(name: \"SaiGon\"), UserObj(name: \"Somewhere\")] let lcsUser = localUsers.LCS(remoteUsers) print(lcsUser) \/\/ [{Nghia Tran}, {Algorithm}]\n\nSwift Playground [su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/LCS-Swift\/blob\/master\/LCS-Dynamic-Programming-Part-1.playground\/Contents.swift\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]LCS \u2013 Dynamic Programming[\/su_button]\n\n\n## 4. Where to go from here\u00a0?\n\nYou can download full source here\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/LCS-Swift\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]LCS-Swift[\/su_button]\n\nIn this blog, we\u2019ve learn how LCS algorithm actually works, how we can visualize it step by step, and how we implement LCS for generic Array in Swift too \ud83d\ude0e\n\nIn next blog, I will cover how we can apply LCS to iOS development, especially in UITableView and UICollectionView. How we can optimize \u201cthe transform\u201d from DataSourceA to DataSourceB without calling\u00a0reloadData().\n\nThank everybody for reading and blow up your brain \ud83d\udc7b\n\n\n","html":"<p>Hi, Today is totally\u00a0perfect day to start a new\u00a0series of Algorithm blog. Since I&#8217;ve learned data structure &amp; algorithm to prepare for\u00a0next interview. I learnt tons of new amazing things, so I decide to write something for anyone who interesting\u00a0\ud83d\ude09<\/p>\n<p>Longest Common Subsequence (aka Diff) is classic problem in computer science. We&#8217;re using it everyday, but we didn&#8217;t\u00a0notice. It also widely used by Revision Control System.<\/p>\n<ul>\n<li>When Github figure it out what&#8217;s new line of codes, what&#8217;s removed. They use Diff<\/li>\n<li>When <a href=\"https:\/\/www.diffchecker.com\">DiffChecker<\/a> \u00a0do comparison. They use Diff.<\/li>\n<li>Diff Utility use Diff as main core.<\/li>\n<\/ul>\n<p>In another hand,\u00a0diff is also useful\u00a0to compare pair of\u00a0images.<\/p>\n<ul>\n<li><a href=\"http:\/\/www.kaleidoscopeapp.com\">Kaleidoscope<\/a>\u00a0is able to spot the difference of two images with pixel accuracy, and print it out.<\/li>\n<\/ul>\n<p><img class=\" wp-image-4264 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/kaleidoscope-300x79.jpg?resize=762%2C201\" alt=\"\" width=\"762\" height=\"201\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/kaleidoscope.jpg?resize=300%2C79&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/kaleidoscope.jpg?resize=768%2C203&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/kaleidoscope.jpg?resize=1024%2C271&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/kaleidoscope.jpg?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 762px) 100vw, 762px\" data-recalc-dims=\"1\" \/><\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/facebook\/ios-snapshot-test-case\">Facebook iOS Snapshot Test<\/a>\u00a0make diff by drawing both of layer\/view and reference image, then compare each pair of pointer in memory with\u00a0the C function\u00a0<code>memcmp().\u00a0<\/code>This make it extremely quick:\u00a0from 0.013 to 0.086 seconds for fullscreen iPad on Macbook Air (<a href=\"https:\/\/www.objc.io\/issues\/15-testing\/snapshot-testing\/\">reference<\/a>)<\/li>\n<\/ul>\n<p><img class=\"wp-image-4267 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/snapshots-reference-59b0b96b-300x162.png?resize=754%2C407\" alt=\"\" width=\"754\" height=\"407\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/snapshots-reference-59b0b96b.png?resize=300%2C162&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/snapshots-reference-59b0b96b.png?resize=768%2C415&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/snapshots-reference-59b0b96b.png?resize=1024%2C553&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/snapshots-reference-59b0b96b.png?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 754px) 100vw, 754px\" data-recalc-dims=\"1\" \/><\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/Instagram\/IGListKit\">IGListKit<\/a> is amazing open-source, built from Instagram\u00a0Engineering team. According from their blog, IGListKit still use improved Diff (Paul Heckel&#8217;s algorithm) to calculate and perform insert\/move\/reload\/delete without crashed with <strong>linear time BigO(n), <\/strong>it&#8217;s really increadible result.<\/li>\n<\/ul>\n<p><strong><img class=\"aligncenter\" src=\"https:\/\/i1.wp.com\/cdn-images-1.medium.com\/max\/1600\/1*7w2BL8pAqAs-qMiDWHLENA.gif?resize=541%2C260&#038;ssl=1\" width=\"541\" height=\"260\" data-recalc-dims=\"1\" \/><\/strong><\/p>\n<p>&nbsp;<\/p>\n<p>To understand deeply LCS and a apply it to real world. I intent to\u00a0split into 2 parts.<\/p>\n<p><strong>Part 1:<\/strong> We will discuss how to implement LSC with <strong>naive solution<\/strong> and with<strong> Dynamic Programming<\/strong>, by using Memorization table. I will try to visualize the algorithm of both solution as possible. I will implement by pure swift to make sure everybody can understand before moving to real shit.<\/p>\n<p>The main goal, we will extend Array&lt;Element&gt;. Put more effort, so it can reusable in any kind of array.<\/p>\n<pre class=\"lang:swift decode:true\">\/\/ Work with generic array\r\n\/\/ It will work [Any], which Element must adopt with &lt;Equatable&gt; protocol\r\nextension Array where Element: Equatable {}\r\n<\/pre>\n<p><strong>Part 2:<\/strong> It&#8217;s real world, we reused the knowledge from part 1.\u00a0Implement Diff, DiffStep to represent each step (insert\/delete\/reload) need to be transform. Also extend UITableView, UICollectionView to calculate optimize transformation, from old to new Data Source<\/p>\n<p>The goal looks like:<\/p>\n<pre class=\"lang:swift decode:true\" title=\"Part 2 LCS\">\/\/ Calculate diff and map to each actions\r\nlet insertionIndexPaths = diff.insertions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) })\r\nlet deletionIndexPaths = diff.deletions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) })\r\n\r\n\/\/ Perform action\r\ntableView.beginUpdates()\r\ntableView.insertRows(at: insertionIndexPaths, with: insertionAnimation)\r\ntableView.deleteRows(at: deletionIndexPaths, with: deletionAnimation)\r\ntableView.endUpdates()<\/pre>\n<p>^ see that. Really simple for use. If you calculate the diff <strong>manually\u00a0<\/strong>by your hand and your pencil, it&#8217;s really tricky and risky. If it\u00a0go wrong, your app might crash completely\u00a0and you&#8217;re fired =)). Brace\u00a0yourself<\/p>\n<h2>1. What&#8217;s classic LCS ?<\/h2>\n<p>Given 2 string, find the length of Longest Common Subsequence (LCS) which present in both of them.\u00a0\u00a0A subsequence is a sequence that appears in the same relative order, but not necessarily contiguous.<\/p>\n<p>Example, we have string X = &#8220;ABCDEFG&#8221;. So &#8220;ABD&#8221;, &#8220;ACD&#8221;, &#8220;AFG&#8221;, &#8220;CEFB&#8221;, &#8220;FG&#8221;, &#8230;. is one of subsequence of X.<\/p>\n<p>But &#8220;AED&#8221;, &#8220;EBA&#8221;, &#8220;GFEDA&#8221; &#8230; isn&#8217;t correct, because it must be same order.<\/p>\n<p>So a string with n length, will have n\u00b2 substrings which can construct possible.<\/p>\n<p>LCS of &#8220;ABCDEF&#8221; and &#8220;ATDEXF&#8221; is ADEF, length = 4<\/p>\n<p>LCS of &#8220;ABC&#8221; and &#8220;AXYZC&#8221; is AC, length = 2<\/p>\n<p><img class=\" wp-image-4278 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/Longest-Common-Subsequence-example-300x94.jpg?resize=517%2C162\" alt=\"\" width=\"517\" height=\"162\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/Longest-Common-Subsequence-example.jpg?resize=300%2C94&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/Longest-Common-Subsequence-example.jpg?w=654&amp;ssl=1 654w\" sizes=\"(max-width: 517px) 100vw, 517px\" data-recalc-dims=\"1\" \/><\/p>\n<p>or A = &#8220;acbaed&#8221;, B = &#8220;abcadf&#8221; =&gt; LCS is &#8220;acad&#8221;, length = 4<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>[su_divider top=&#8221;no&#8221; divider_color=&#8221;#f3f3f3&#8243; link_color=&#8221;#f3f3f3&#8243; size=&#8221;2&#8243;]<\/p>\n<p>Before walking into Implementation and Explanation section. It would be better if you\u00a0try putting your hand in real shit.<\/p>\n<p>Don&#8217;t worry about performance or Big(O) yet, just finish it by yourself.<\/p>\n<p>You can try online at <strong><a href=\"https:\/\/www.hackerrank.com\/challenges\/dynamic-programming-classics-the-longest-common-subsequence\">HackerRank<\/a><\/strong>\u00a0with real test-cases \ud83d\ude09<\/p>\n<p>[su_divider top=&#8221;no&#8221; divider_color=&#8221;#f3f3f3&#8243; link_color=&#8221;#f3f3f3&#8243; size=&#8221;2&#8243;]<\/p>\n<p><em>if you don&#8217;t have enough patient, just scroll down and \u00a0keep reading <\/em>\ud83d\ude2a<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<h2>1.1 Naive approach<\/h2>\n<p>The naive solution we can think in our mind is: Iterate through each character in both of string, and compare each result to get final LCS.<\/p>\n<p>In given string A with length = n, it might take O(2<sup>n<\/sup>) time to complete. It still work without problem if the string is short, but in particular situation, \u00a0it&#8217;s really nightmare if we have\u00a0very long long text.<\/p>\n<p>Don&#8217;t worry about it at this time, I will come to naive approach firstly, by using bottom-up recursion.<\/p>\n<p>If we come with recursion, two important things we should\u00a0to defined is<strong> sub-problem<\/strong> and <strong>base-recursion(exit)<\/strong><\/p>\n<h3>*Sub-problem<\/h3>\n<p><strong>Case 1: Both of character is same.<\/strong><\/p>\n<p>Example: Given &#8220;ADFGT&#8221; and &#8220;AFOXT&#8221;<\/p>\n<p>We start from bottom, so we get &#8220;T&#8221; from the first one and &#8220;T&#8221; from the second one.<\/p>\n<p>It&#8217;s match then T <strong>must be a part of LCS<\/strong>, so we count up by 1. Then we remove both of those, and run recursive continently.<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Case 1 - both characters are matched\r\nLCS(\"ADFGT\", \"AFOXT\") = 1 + LCS(\"ADFG\", \"AFOX\")<\/pre>\n<p><strong>Case 2: Pair of character isn&#8217;t match:<\/strong><\/p>\n<p>Given \u00a0&#8220;ADFG&#8221; and &#8220;AFOX&#8221;, and as we see<\/p>\n<p>&#8220;G&#8221; != &#8220;X&#8221;<\/p>\n<p>It means G\u00a0maybe part of LCS between &#8220;ADF<strong>G<\/strong>&#8221; and &#8220;AFO&#8221;<\/p>\n<p>or X could be part of LCS between &#8220;ADF&#8221; and\u00a0&#8220;AFO<strong>X<\/strong>&#8221;<\/p>\n<p>We don&#8217;t know which case is correct.\u00a0So we should call recursion on two possible case and compare the get max value. We can write down like here<\/p>\n<pre class=\"lang:default decode:true\">LCS(\"ADFG\", \"AFOX\") = Max(LCS(\"ADF\", \"AFOX\"), LCS(\"ADFG\", \"AFO\"))<\/pre>\n<h3>Summarize<\/h3>\n<p>Give 2 string A[0..i-1], and B[0..j-1] with i and j is length of A\u00a0and\u00a0B<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Define findLCS func\r\nfunc findLCS(A: String, B: String) {}\r\nlet m = A.length()\r\nlet m = B.length()\r\n\r\n\/\/ Case 1\r\nA[m - 1] == B[n - 1] =&gt; findLCS(A, B) = 1 + findLCS(A[0..m-2], B[0..n-2])\r\n\r\n\/\/ Case 2\r\nA[m - 1] != B[n - 1] =&gt; findLCS(A, B) = MAX(findLCS(A[0..m-2], B[0..n-1]), findLCS(A[0..m-1], B[0..n-2]))<\/pre>\n<h3>*Base recursion (exit)<\/h3>\n<p>So, how about exit recursion ? If you&#8217;re working on recursion functionality, please, don&#8217;t forget the EXIT.<\/p>\n<p>It&#8217;s same habit when you come to large\u00a0building, like CVC cinema or luxury mall, look a EXIT way firstly. In-case of fire, we can get out quickly, and save\u00a0your life. It&#8217;s one of must-have survival skill in modern world. So do the same things with Recursion too \ud83d\ude07<\/p>\n<p>Really to figure it out when we should stop: either if any string become <strong>empty string.<\/strong><\/p>\n<pre class=\"lang:sh decode:true\">if A.length() == 0 || B.length() == 0 return 0<\/pre>\n<h2>1.2 Problem<\/h2>\n<p>Imagination is really hard, so I will draw a tree to see what&#8217;s behind the scene.<\/p>\n<p><img class=\" wp-image-4306 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_13-300x117.png?resize=670%2C261\" alt=\"\" width=\"670\" height=\"261\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_13.png?resize=300%2C117&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_13.png?resize=768%2C300&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_13.png?resize=1024%2C400&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_13.png?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 670px) 100vw, 670px\" data-recalc-dims=\"1\" \/><\/p>\n<p>^ As you can see, there are few sub-problems has been solved many\u00a0times. Time complexity is O(2<sup>n<\/sup>) in worse case when all character of X and Y are mismatch. It will be <a href=\"https:\/\/en.wikipedia.org\/wiki\/Exponential_growth\">exponential<\/a> by time.<\/p>\n<p>In next section, we should come up with <strong>Dynamic Programming<\/strong> approach.<\/p>\n<p>Here is swift code<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Hack convention\r\n\/\/ Don't mess up with Range from Swift 3\r\nextension String {\r\n    func charAt(_ i: Int) -&gt; String {\r\n        return String((self as NSString).character(at: i))\r\n    }\r\n}\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ NAIVE APPROACH\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Recurvise func to length of LCS\r\nfunc LCS(_ a: String, _ b: String) -&gt; Int{\r\n    \r\n    \/\/ Exit\r\n    if a.characters.count\r\n        == 0 || b.characters.count == 0 {\r\n        return 0\r\n    }\r\n    \r\n    \/\/ Prepare\r\n    let lengthA = a.characters.count\r\n    let lengthB = b.characters.count\r\n    let aIndex = a.index(a.endIndex, offsetBy: -1)\r\n    let bIndex = b.index(b.endIndex, offsetBy: -1)\r\n\r\n    \/\/ Sub-problem\r\n    if a.charAt(lengthA - 1) == b.charAt(lengthB - 1) {\r\n        \/\/ MATCH\r\n        return 1 + LCS(a.substring(to: aIndex), b.substring(to: bIndex))\r\n    } else {\r\n        \/\/ NOT MATCH\r\n        return max(LCS(a.substring(to: aIndex), b), LCS(a, b.substring(to: bIndex)))\r\n    }\r\n}\r\n\r\n\r\n\/\/ Test\r\nlet a = \"acbaed\"\r\nlet b = \"abcadf\"\r\nprint(LCS(a, b)) \/\/ 4\r\n\r\n\/\/ Unicode\r\nlet x = \"\ud83d\ude07\ud83d\ude4c\ud83d\ude09\ud83d\udcb0\ud83c\udfb9\"\r\nlet y = \"\ud83d\ude4c\ud83c\udf52\ud83d\udcb0\u2708\ufe0f\ud83c\udfb9\ud83d\ude0e\ud83d\udd34\"\r\nprint(LCS(x, y)) \/\/ 3\r\n<\/pre>\n<p>Swift Playground [su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/LCS-Swift\/blob\/master\/LCS-Naive-Solution-Part-1.playground\/Contents.swift&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]LCS &#8211; Naive Solution[\/su_button]<\/p>\n<h2>2. Dynamic Programming<\/h2>\n<p>Basically, we will use two-dimension array to store the result, reduce time calculate, and reused the result\u00a0when ever needed. This technique call \u00a0as\u00a0Memorization.<\/p>\n<p>Using memorization table is really useful to avoid Overlapping Substructure when design algorithm, we reused result which calculated before, rather computed over and over. But what is the trade-off ?<\/p>\n<ol>\n<li><strong>It cost more space in memory<\/strong>. If string is Unicode, it also cost more space than\u00a0ASCII, but if the goal of solution is aiming to time-complexity, so\u00a0memorization-table is best choice right now.<\/li>\n<li>If we implement on low-end computer, it means we have limited memory, so we should consider carefully to apply this approach. Maybe\u00a0slow a bit by using Recursion will be better, and acceptable.<\/li>\n<\/ol>\n<p>Talk enough, please show me your code \ud83d\ude2a<\/p>\n<h3>2.1 Memorization table<\/h3>\n<p>I will visualize the table step by step now. We will use same given input string from section 1.<\/p>\n<p>A = &#8220;ADFGT&#8221; and B = &#8220;AFOXT&#8221;, and m is A.length(), n = B.length()<\/p>\n<p>Create two-dimension LCS\u00a0= [m + 1][n + 1], fill with zero if i == 0 || j == 0<\/p>\n<p><img class=\"wp-image-4285 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_1-300x264.png?resize=464%2C408\" alt=\"\" width=\"464\" height=\"408\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_1.png?resize=300%2C264&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_1.png?resize=768%2C676&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_1.png?resize=1024%2C901&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_1.png?w=1168&amp;ssl=1 1168w\" sizes=\"(max-width: 464px) 100vw, 464px\" data-recalc-dims=\"1\" \/><\/p>\n<p>The reason why we fill the zero, because the empty string &#8220;&#8221; maybe is LCS as well.<\/p>\n<p>Following two\u00a0equation we summarized before, but this time, we don&#8217;t use recursion, we use 2 nested-loop, and define LCS as 2-dimension array (filled with 0). But still retain the same philosophy.<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Defind LCS array (filled with 0 firstly)\r\nvar LCS = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\r\nvar i = 1\r\nvar j = 1\r\n\r\n\/\/ Case 1: Match\r\nA[i - 1] == B[j - 1] =&gt; LCS[i][j] = 1 + LCS[i - 1][j - 1]\r\n\r\n\/\/ Case 2: Not Match\r\nA[i - 1] == B[j - 1] =&gt; LCS[i][j] = MAX(LCS([i - 1][j]), LCS(LCS[i][j - 1]))<\/pre>\n<p>Here is the visualize of them<\/p>\n<p><img class=\"wp-image-4287 alignnone\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_2-266x300.png?resize=264%2C297\" alt=\"\" width=\"264\" height=\"297\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_2.png?resize=266%2C300&amp;ssl=1 266w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_2.png?w=474&amp;ssl=1 474w\" sizes=\"(max-width: 264px) 100vw, 264px\" data-recalc-dims=\"1\" \/><img class=\"wp-image-4289 alignnone\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_4-300x173.png?resize=482%2C278\" alt=\"\" width=\"482\" height=\"278\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_4.png?resize=300%2C173&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_4.png?resize=768%2C443&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_4.png?w=908&amp;ssl=1 908w\" sizes=\"(max-width: 482px) 100vw, 482px\" data-recalc-dims=\"1\" \/><\/p>\n<p style=\"text-align: left;\">Simple af\u00a0right? \u00a0\ud83d\ude09<\/p>\n<p>We start to iterate over table with i = 1, and j = 1. We have A[i &#8211; 1] == &#8220;A&#8221;, B[j &#8211; 1] == &#8220;A&#8221; =&gt; It matches, so we do Case 1<\/p>\n<p><img class=\" wp-image-4296 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_5-300x251.png?resize=408%2C341\" alt=\"\" width=\"408\" height=\"341\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_5.png?resize=300%2C251&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_5.png?resize=768%2C644&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_5.png?resize=1024%2C858&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_5.png?w=1043&amp;ssl=1 1043w\" sizes=\"(max-width: 408px) 100vw, 408px\" data-recalc-dims=\"1\" \/><\/p>\n<p>=&gt; LCS[1][1] = 1 + LCS[0][0] = 1<\/p>\n<p>Continue with i = 1, j = 2. We compare A[i &#8211; 1] != B[j &#8211; 1] =&gt; &#8220;A&#8221; != &#8220;F&#8221; =&gt; We do Case 2.<\/p>\n<p><img class=\"wp-image-4295 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_6-300x252.png?resize=433%2C364\" alt=\"\" width=\"433\" height=\"364\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_6.png?resize=300%2C252&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_6.png?resize=768%2C646&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_6.png?resize=1024%2C862&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_6.png?w=1072&amp;ssl=1 1072w\" sizes=\"(max-width: 433px) 100vw, 433px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Yeah, so can see, by following case 2, we will compare the value of LCS[1][1] and LCS[0][2].<\/p>\n<p>We have 1 &gt; 0 =&gt; we get <strong>1<\/strong> as a result, then store in LCS[1][2].<\/p>\n<p>LCS[1][2] = max(LCS[1][1], LCS[0][2])<\/p>\n<p>Keep computing by your hand + brain to the rest of table.<\/p>\n<p><img class=\"wp-image-4294 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_7-300x257.png?resize=441%2C378\" alt=\"\" width=\"441\" height=\"378\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_7.png?resize=300%2C257&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_7.png?resize=768%2C657&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_7.png?resize=1024%2C876&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_7.png?w=1090&amp;ssl=1 1090w\" sizes=\"(max-width: 441px) 100vw, 441px\" data-recalc-dims=\"1\" \/><\/p>\n<p>=&gt; See that \ud83d\ude09 just do it with case 1 again<\/p>\n<p>Until the end.<\/p>\n<p><img class=\"wp-image-4293 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_8-300x249.png?resize=449%2C372\" alt=\"\" width=\"449\" height=\"372\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_8.png?resize=300%2C249&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_8.png?resize=768%2C637&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_8.png?resize=1024%2C850&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_8.png?w=1104&amp;ssl=1 1104w\" sizes=\"(max-width: 449px) 100vw, 449px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Finally, we got it. So the Length\u00a0of LCS is 3.<\/p>\n<p>We haven&#8217;t stopped at here yet, because the goal of LCS doesn&#8217;t stop at print the length of LCS. We should print out the LCS it-self.<\/p>\n<h3>2.2 Print LCS<\/h3>\n<p>To print LCS in\u00a0memorization table is tricky. Because we should traceback\u00a0the table again, from the <strong>bottom corner<\/strong> to the <strong>top corner<\/strong> where we&#8217;ve started, by following new simplest rules.<\/p>\n<ul>\n<li>if A[i] == B[j] =&gt; It means, this element must be a part of LCS, so we print it, we will go to diagonal (means last char\u00adac\u00adter of both string has matched, so we reduce the length of both the strings by 1, so we move diag\u00ado\u00adnally)<\/li>\n<\/ul>\n<p><img class=\" wp-image-4300 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9-300x261.png?resize=400%2C348\" alt=\"\" width=\"400\" height=\"348\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?resize=300%2C261&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?resize=768%2C668&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?resize=1024%2C890&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?w=1086&amp;ssl=1 1086w\" sizes=\"(max-width: 400px) 100vw, 400px\" data-recalc-dims=\"1\" \/><\/p>\n<ul>\n<li>if A[i] != B[j], we have two sub-case here. Please check my code<\/li>\n<\/ul>\n<pre class=\"lang:swift decode:true\">LCS[i][j] = Max(LCS[i - 1][j], LCS[i][j - 1]);\r\nif (LCS[i][j] == LCS[i - 1][j]) {\r\n    solution[i][j] = \"top\";\r\n} else {\r\n    solution[i][j] = \"left\";\r\n}<\/pre>\n<p>Here is visualize<\/p>\n<p><img class=\"alignnone wp-image-4299\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10-300x205.png?resize=476%2C325\" alt=\"\" width=\"476\" height=\"325\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?resize=300%2C205&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?resize=768%2C525&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?resize=1024%2C700&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 476px) 100vw, 476px\" data-recalc-dims=\"1\" \/><img class=\"alignnone wp-image-4298\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11-300x280.png?resize=343%2C320\" alt=\"\" width=\"343\" height=\"320\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?resize=300%2C280&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?resize=768%2C717&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?resize=1024%2C957&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?w=1064&amp;ssl=1 1064w\" sizes=\"(max-width: 343px) 100vw, 343px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Keep traceback-ing to\u00a0the top of memorization table \ud83e\udd17. We will have somethings like below. Please notice, the Red Cell is the character we need to store somewhere, because it&#8217;s part of LCS.<\/p>\n<p><img class=\" wp-image-4303 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12-300x256.png?resize=413%2C352\" alt=\"\" width=\"413\" height=\"352\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?resize=300%2C256&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?resize=768%2C656&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?resize=1024%2C874&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?w=1094&amp;ssl=1 1094w\" sizes=\"(max-width: 413px) 100vw, 413px\" data-recalc-dims=\"1\" \/><\/p>\n<p>The final result is AFT \ud83d\ude4c<\/p>\n<h3>2.3 Time complexity<\/h3>\n<h3>Naive solution<\/h3>\n<p>Because we list all possible pair of sub-string between given A and B, and have many overlap sub-problem.<\/p>\n<p>It costs O(2<sup>n<\/sup>).<\/p>\n<p>It has big problem if the length of text is really long. Because the time complexity is grow quadratically. So let imagine, if we do trivial naive approach, and we have 64\u00a0character, seem we must make comparison up to 2^64 times. It becomes big deal.<\/p>\n<h3>Dynamic Programming<\/h3>\n<p>By using memorization table to store value calculated, we save a lot of time here. In the implementation code, we only use 2 loop nested.<\/p>\n<p>It costs O(n\u00b2).<\/p>\n<p>Given 64 character string, we have 64^64 = <strong>4096<\/strong> vs\u00a02^64 =\u00a0<strong>1.8E19<\/strong><\/p>\n<p>Seem\u00a0O(n\u00b2) looks\u00a0bad, but it&#8217;s better 1000&#8230;x than\u00a0O(2<sup>n<\/sup>).<\/p>\n<h2>2.4 Improvement<\/h2>\n<h3>Reduce the problem set<\/h3>\n<p>In most of real-world scenario, <strong>the beginning and the ends of file rarely changed.\u00a0<\/strong>If only few string in middle of texts are changed, we can remove\/reduce the begin and end.<\/p>\n<p>By reducing or bounding the upper\/lower limitation, we can save tons of memory and\u00a0comparison time.<\/p>\n<p>Here is presudo-code<\/p>\n<pre class=\"lang:default decode:true\">func TrimLCS(A: String, B: String) {\r\n    var start = 0\r\n    var aEnd = A.length()\r\n    var bEnd = B.length()\r\n\r\n    \/\/ Get index of beginning of file\r\n    while start &lt; aEnd &amp;&amp; start &lt; bEnd &amp;&amp; A[start] == B[start] {\r\n        start += 1\r\n    }\r\n\r\n    \/\/ Get index of End of file\r\n    while start \u2264 aEnd and start \u2264 bEnd and A[aEnd] == B[bEnd] {\r\n        aEnd -= 1\r\n        bEnd -= 1\r\n    } \r\n\r\n    \/\/ Trim \r\n    let newA = A.trim(start..aEnd)\r\n    let newB = B.trim(start..bEnd)\r\n\r\n    \/\/ Keep doing LCS algorithm here\r\n    for ...\r\n}<\/pre>\n<h3>Reduce the comparison time<\/h3>\n<p>The most of time costs in naive which come from comparison between two characters. In some case, such as source code diff, we only want to see new line, we don&#8217;t need to see each difference character. By comparing\u00a0long text, seem be more effience<\/p>\n<h3>Turn string to hashes<\/h3>\n<p>Instead of storing long raw string, we may consider to hash or checksum. If the text&#8217;s length from 60 or longer, the hash and checksum will turn it shortly, might be only 8-40 character.<\/p>\n<p>Yeah, how about drawback in Hashmap\u00a0? \ud83e\udd14<\/p>\n<ol>\n<li>We need more time to preprocess from both of string.<\/li>\n<li>We need more space to be allocated for\u00a0Hashmap<\/li>\n<li>Collision in Hashmap. Since the checksum or Hashmap\u00a0isn&#8217;t\u00a0guarantee to be unique. There are small\u00a0chance two value could be reduced to same hash.<\/li>\n<\/ol>\n<p>Finally, it&#8217;s depend on your requirement or place the algorithm will execute. If you&#8217;re going to implement LCS on high-end computer, with endless memory, but have limited speed, we should consider about time complexity.<\/p>\n<p>Orthewise, if on low-end device, with really small memory, please take a look a space complexity \ud83d\ude4c<\/p>\n<h2>3. Swift ?<\/h2>\n<p>Instead of implement original solution. It means only work with String. We should put more effort, and make a extension on Array. It might be difficult to understand a bit, but LCS can work with custom model as well.<\/p>\n<p>If you&#8217;re not familiar with Generic, Equatable, Element in Array. Don&#8217;t hesitate to spend 30 minutes to review base-foundation in <a href=\"https:\/\/developer.apple.com\/library\/prerelease\/content\/documentation\/Swift\/Conceptual\/Swift_Programming_Language\/Generics.html#\/\/apple_ref\/doc\/uid\/TP40014097-CH26-ID179\">Swift\u00a0Documentation<\/a><\/p>\n<p>The extension look like below.<\/p>\n<pre class=\"lang:swift decode:true\">\/\/\/\/ Extension of Array\r\n\/\/ But we must ensure, each element must adopt with &lt;Equatable&gt; protocol -&gt; We can make comparision\r\nextension Array where Element: Equatable {}\r\n<\/pre>\n<h3>Memorization table<\/h3>\n<p>The first thing is Memorization table. Please take a look at visualization I draw at previous section.<\/p>\n<p>We create table: [[Element]] and run two nested loop, and calculate the length of LCS by following 2 case: MATCH and NOT MATCH<\/p>\n<pre class=\"lang:swift decode:true \">\/\/ Memorization table\r\nstruct MemorizationTable&lt;T: Equatable&gt; {\r\n    \r\n    static func buildTable(x: [T], y: [T]) -&gt; [[Int]] {\r\n        \r\n        \/\/ Create 2-dimension table, and filled with zero\r\n        let n = x.count\r\n        let m = y.count\r\n        var table = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\r\n    \r\n        \/\/ Iterate from top-left corner -&gt; bottom-right corner\r\n        for i in 0...n {\r\n            for j in 0...m {\r\n                if i == 0 || j == 0 {\r\n                    table[i][j] = 0\r\n                }\r\n                else if x[i-1] == y[j-1] { \/\/ MATCH\r\n                    table[i][j] = table[i-1][j-1] + 1\r\n                }\r\n                else { \/\/ NOT MATCH\r\n                    table[i][j] = max(table[i-1][j], table[i][j-1])\r\n                }\r\n            }\r\n        }\r\n        \r\n        return table\r\n    }\r\n}<\/pre>\n<p>The code above is really simple af. Just following the table on your notebook, imagine how the i,j iterate over table, check case 1, case 2, move on to next cell.<\/p>\n<h3>LCS with generic Array<\/h3>\n<p>It&#8217;s really tricky to run recursion from bottom corner to the top. It&#8217;s same approach I mention in section 2.2.<\/p>\n<ul>\n<li>Start from Bottom<\/li>\n<li>If x[i] == y[j] \/\/ Match -&gt; Move\u00a0diag\u00ado\u00adnally<\/li>\n<li>else, we check if\u00a0table[i-1][j] &gt; table[i][j-1] -&gt; Go Top<\/li>\n<li>else Go Left \ud83d\ude0e<\/li>\n<\/ul>\n<p>Here is detail code. I tried to write simple as possible. Please notice\u00a0<strong>lcsFromMemorizationTable<\/strong>\u00a0is private method. Because I don&#8217;t want people modify it.<\/p>\n<pre class=\"lang:swift decode:true\">\/\/\/\/ Extension of Array\r\n\/\/ But we must ensure, each element must adopt with &lt;Equatable&gt; protocol -&gt; We can make comparision\r\nextension Array where Element: Equatable {\r\n    \r\n    func LCS(_ other: [Element]) -&gt; [Element] {\r\n        \r\n        \/\/ Build memorization table\r\n        let table = MemorizationTable.buildTable(x: self, y: other)\r\n        \r\n        \/\/ Print LCS\r\n        return self.lcsFromMemorizationTable(table, self, other, self.count, other.count)\r\n    }\r\n    \r\n    fileprivate func lcsFromMemorizationTable(_ table: [[Int]], _ x: [Element], _ y: [Element], _ i: Int, _ j: Int) -&gt; [Element] {\r\n        \r\n        \/\/ Exit\r\n        if i == 0 || j == 0 {\r\n            return []\r\n        }\r\n        \r\n        \/\/ Recurvise \r\n        else if x[i-1] == y[j-1] { \/\/ MATCH -&gt; Get element\r\n            return lcsFromMemorizationTable(table, x, y, i - 1, j - 1) + [x[i-1]]\r\n        }\r\n        else if table[i-1][j] &gt; table[i][j-1] { \/\/ Top\r\n            return lcsFromMemorizationTable(table, x, y, i - 1, j)\r\n        }\r\n        else { \/\/ Left\r\n            return lcsFromMemorizationTable(table, x, y, i, j - 1)\r\n        }\r\n    }\r\n}<\/pre>\n<h3>Test with string<\/h3>\n<pre class=\"lang:swift decode:true\">\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/\/\/\/\/ TEST with string\r\n\r\n\/\/ Convert [CharacterView] -&gt; [String]\r\nlet a = \"acbaed\".characters.map {String($0)}\r\nlet b = \"abcadfa\".characters.map {String($0)}\r\n\r\nlet lcs = a.LCS(b) \/\/\r\nprint(lcs) \/\/  [\"a\", \"b\", \"a\", \"d\"]<\/pre>\n<p>Because LCS is working with Array&lt;Element&gt;, so we need to map [CharacterView] -&gt; [String].<\/p>\n<h3>Test with array of Custom model<\/h3>\n<p><strong>UserObj<\/strong> is custom struct, or any kind of class.\u00a0The different thing, we must adopt Equatable.<\/p>\n<pre class=\"lang:swift decode:true\">struct UserObj: CustomStringConvertible {\r\n    let name: String!\r\n\r\n    var description: String {\r\n        return \"{\\(self.name!)}\"\r\n    }\r\n}\r\n\r\n\/\/ Adopt Equatable\r\nextension UserObj: Equatable {\r\n    public static func ==(lhs: UserObj, rhs: UserObj) -&gt; Bool {\r\n        return lhs.name == rhs.name\r\n    }\r\n}<\/pre>\n<p>Don&#8217;t forget to adopt &lt;Equatable&gt; protocol. If you don&#8217;t do this. Swift can&#8217;t understand how to make a comparison between <strong>UserObj.<\/strong><\/p>\n<p>Actually, even if you won&#8217;t do it on\u00a0purpose, XCode will shot you an error intermediately, at build-time \u274c. It&#8217;s one reason why I really love Swift &#8211; type safe language \ud83e\udd17<\/p>\n<pre class=\"lang:swift decode:true\">let localUsers = [UserObj(name: \"Nghia Tran\"),\r\n                  UserObj(name: \"nghiatran.me\"),\r\n                  UserObj(name: \"SaiGon\"),\r\n                  UserObj(name: \"Algorithm\")]\r\nlet remoteUsers = [UserObj(name: \"Kamakura\"),\r\n                   UserObj(name: \"Nghia Tran\"),\r\n                   UserObj(name: \"Algorithm\"),\r\n                   UserObj(name: \"SaiGon\"),\r\n                   UserObj(name: \"Somewhere\")]\r\n\r\nlet lcsUser = localUsers.LCS(remoteUsers)\r\nprint(lcsUser) \/\/ [{Nghia Tran}, {Algorithm}]<\/pre>\n<p>Swift Playground [su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/LCS-Swift\/blob\/master\/LCS-Dynamic-Programming-Part-1.playground\/Contents.swift&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]LCS &#8211; Dynamic Programming[\/su_button]<\/p>\n<h2>4. Where to go from here\u00a0?<\/h2>\n<p>You can download full source here<\/p>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/LCS-Swift&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]LCS-Swift[\/su_button]<\/p>\n<p>In this blog, we&#8217;ve learn how LCS algorithm actually works, how we can visualize it step by step, and how we implement LCS for generic Array in Swift too \ud83d\ude0e<\/p>\n<p>In next blog, I will cover how we can apply LCS to iOS development, especially in UITableView and UICollectionView. How we can optimize &#8220;the transform&#8221; from DataSourceA to DataSourceB without calling\u00a0reloadData().<\/p>\n<p>Thank everybody for reading and blow up your brain \ud83d\udc7b<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/02\/gnu2altkusq-clem-onojeghuo.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 16 Feb 2017 14:04:46 +0000","created_by":1,"updated_at":"Sat, 18 Feb 2017 18:21:05 +0000","updated_by":1,"published_at":"Thu, 16 Feb 2017 14:04:46 +0000","published_by":1},{"id":4349,"title":"Swifty PostgreSQL","slug":"swifty-postgresql","markdown":"\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?w=100%25)\n\nI would like to announce my pet project which I\u2019m currently working on \ud83e\udd17\n\n\n## Swifty PostgreSQL\n\nSwifty PostgreSQL is PostgreSQL driver, written by Swift 3.0, run flawlessly in macOS 10.12.\n\nThe Swifty warpper PostgreSQL\u2019s pointer and C functions, and handle allocate\/dellocate memory automatically.\n\nOffer ability to connect many database simultaneously, modeling all PostgreSQL\u2019s enum and constants.\n\nField model adopt Presentable protocol, so you can get rawString or realData depend on kind of data eaiser, all expensive operations are lazy computed as well.\n\nIt\u2019s also a small component in [Titan app](https:\/\/github.com\/NghiaTranUIT\/Titan-Postgresql) (an PostgreSQL client).\n\n![](https:\/\/img.shields.io\/badge\/Swift-3.0-blue.svg?style=flat)\u00a0![](https:\/\/img.shields.io\/badge\/Carthage-compatible-4BC51D.svg?style=flat)\u00a0![](https:\/\/img.shields.io\/npm\/l\/express.svg?style=flat)\u00a0![](https:\/\/img.shields.io\/badge\/platform-osx-green.svg?style=flat)\n\n\n## Features\n\n- PostgreSQL 9.6 driver\n- Written purely Swift 3.0\n- Implement base model: Table, Row, Field, Decoder, Connection, Database, Query Result, Connection Result, \u2026\n- Following by Protocol-Oriented Programming as possible.\n- Prefix searching\n- Auto-complete query\n- Fully Test (Quick + Nimble)\n\n\n## Roadmap\n\n\u2013 [x] Sketch  \n \u2013 [x] Base Foundation (50%)  \n \u2013 [ ] Fully Common PostgreSQL  \n \u2013 [ ] Prefix searching \u2013 implement by Prefix Tree  \n \u2013 [ ] Smart Query  \n \u2013 [ ] Write Test\n\n\n## Github\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/Swifty-PostgreSQL\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]Swifty PostgreSQL[\/su_button]\n\n\n## Contributor\n\nIt would be greatly appreciated when you make a pull-quest \ud83e\udd17\n\n\n## License\n\nSwifty PostgreSQL is available under the MIT license. See the LICENSE file for more info.\n\n\u00a0\n\n\n","html":"<p><img class=\"size-medium wp-image-4352 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?w=100%25\" alt=\"\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?w=1800&amp;ssl=1 1800w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?resize=300%2C100&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?resize=768%2C256&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?resize=1024%2C341&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/background.png?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 850px) 100vw, 850px\" data-recalc-dims=\"1\" \/><\/p>\n<p>I would like to announce my pet project which I&#8217;m currently working on \ud83e\udd17<\/p>\n<h2>Swifty PostgreSQL<\/h2>\n<p>Swifty PostgreSQL is PostgreSQL driver, written by Swift 3.0, run flawlessly in macOS 10.12.<\/p>\n<p>The Swifty warpper PostgreSQL&#8217;s pointer and C functions, and handle allocate\/dellocate memory automatically.<\/p>\n<p>Offer ability to connect many database simultaneously, modeling all PostgreSQL&#8217;s enum and constants.<\/p>\n<p>Field model adopt Presentable protocol, so you can get rawString or realData depend on kind of data eaiser, all expensive operations are lazy computed as well.<\/p>\n<p>It&#8217;s also a small component in <a href=\"https:\/\/github.com\/NghiaTranUIT\/Titan-Postgresql\">Titan app<\/a> (an PostgreSQL client).<\/p>\n<p><img class=\"alignnone size-medium\" src=\"https:\/\/img.shields.io\/badge\/Swift-3.0-blue.svg?style=flat\" width=\"64\" height=\"20\" \/>\u00a0<img class=\"alignnone size-medium\" src=\"https:\/\/img.shields.io\/badge\/Carthage-compatible-4BC51D.svg?style=flat\" width=\"132\" height=\"20\" \/>\u00a0<img class=\"alignnone size-medium\" src=\"https:\/\/img.shields.io\/npm\/l\/express.svg?style=flat\" width=\"78\" height=\"20\" \/>\u00a0<img class=\"alignnone size-medium\" src=\"https:\/\/img.shields.io\/badge\/platform-osx-green.svg?style=flat\" width=\"86\" height=\"20\" \/><\/p>\n<h2>Features<\/h2>\n<ul>\n<li>PostgreSQL 9.6 driver<\/li>\n<li>Written purely Swift 3.0<\/li>\n<li>Implement base model: Table, Row, Field, Decoder, Connection, Database, Query Result, Connection Result, &#8230;<\/li>\n<li>Following by Protocol-Oriented Programming as possible.<\/li>\n<li>Prefix searching<\/li>\n<li>Auto-complete query<\/li>\n<li>Fully Test (Quick + Nimble)<\/li>\n<\/ul>\n<h2>Roadmap<\/h2>\n<p>&#8211; [x] Sketch<br \/>\n&#8211; [x] Base Foundation (50%)<br \/>\n&#8211; [ ] Fully Common PostgreSQL<br \/>\n&#8211; [ ] Prefix searching &#8211; implement by Prefix Tree<br \/>\n&#8211; [ ] Smart Query<br \/>\n&#8211; [ ] Write Test<\/p>\n<h2>Github<\/h2>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/Swifty-PostgreSQL&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]Swifty PostgreSQL[\/su_button]<\/p>\n<h2>Contributor<\/h2>\n<p>It would be greatly appreciated when you make a pull-quest \ud83e\udd17<\/p>\n<h2>License<\/h2>\n<p>Swifty PostgreSQL is available under the MIT license. See the LICENSE file for more info.<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/02\/swifty-postgre.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Tue, 28 Feb 2017 16:41:55 +0000","created_by":1,"updated_at":"Wed, 01 Mar 2017 15:29:43 +0000","updated_by":1,"published_at":"Tue, 28 Feb 2017 16:41:55 +0000","published_by":1},{"id":4335,"title":"Diff in iOS [Part 2]","slug":"diff-in-real-world-ios-part-2","markdown":"\nHi, it\u2019s part 2 of my LCS series. Hope you have a great day \ud83d\ude07\n\nIn this blog, I would like to cover how we can apply LCS (aka. Diff) into iOS Development. It\u2019s so boring if I\u00a0keep writing blog with \u201cdeep\u201d theory, and no place for enjoying.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/98b322c7bf5992110646420866f72f492bc8706eb4769179676149ad713251d3-300x168.jpg?resize=482%2C270)\n\nBefore diving, we should try a real problem I ensure everybody will encounter if you\u2019re iOS\u00a0S.E.\n\nLet imagine, we have an app, same philosophy with Instagram. We have Feed screen, where we can see all post of your friends, your following.\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_screenshot_app-169x300.jpg?resize=235%2C417)\n\nOn the top-right\u00a0of navigation bar. We have pull-to-refresh button. Whenever you tap it. It will get new data from server, then filling data into UITableView.\n\nYour requirement is figured it out the way to \u201creload\u201d table view with **less effort** as much as **possible**. \ud83d\ude09\n\n### Solution 1: Force reloadData()\n\nDon\u2019t care any things, just call\n\nself.tableView.reloadData()\n\nIn particular scenario, it might be the best solution if you have < 10 items, and the hierarchy\u00a0of cell\u2019s\u00a0subviews are\u00a0simple. But what if your app grows up quickly, and have around 100 items, each TableViewRow\u00a0has tons of complex subviews, such as UIStackView, UICollectionView,\u2026\n\nBy forcing **reloadData**(). It means UITableView will re-draw and calculate dynamic size of 100 cells again -> It hits your CPU and reduces performance as well. It\u2019s painful.\n\nI will more detail in Benchmark section to show you how it\u2019s bad.\n\n### Solution 2: Do manually\n\nMany people will come up with solution 2. Instead of calling reloadData(). They will calculate the difference (insert\/delete\/reload) **manually**\u00a0and warp into tableView.performAction{}\n\nSome things like this\n\n\/\/ Prepare data let oldData = self.data let newData = feedResponse.data \/\/ Check diff manually \/\/ How do it if the order of newData is completely difference with oldData ? \u274c let insertIndexPaths = \/\/ If-then stuff let deleteIndexPaths = \/\/ if-then stuff \/\/ Reload self.tableView.beginUpdates() self.tableView.insertRows(at: insertIndexPaths, with: .none) self.tableView.deleteRows(at: deleteIndexPaths, with: .none) self.tableView.endUpdates()\n\n#### Pros\n\n- By calling reload\/insert\/delete on particular cell. You reduces time to re-draw cell. It\u2019s good point.\n- You can apply specific animation for each kind of transform easily.\n\n#### Cons\n\n- By calculating the diff manually, it means by your hand and brain. It\u2019s still a nightmare if you have a many new item, and the order of new item is completely difference than previous items.\n- If you have enough patient, and careful. You could do it, but who know your solution is the best optimization? Maybe there is someone out there who\u00a0come up with another comparison, have less \u201ctransform\u201d than your result? \ud83e\udd14 Working manually is not optimize approach.\n- If you make a mistake, your app crash\u00a0with some kind of error like this\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-error-300x38.jpg?resize=648%2C82)\n\nIt always happens you indexPaths doesn\u2019t match with data source.\n\n### Solution 3: Diff Algorithm\n\nHow about LCS (Diff). Good news, we can reuse what we actually\u00a0did on [LCS Part 1](http:\/\/nghiatran.me\/longest-common-subsequence-diff-part-1\/). By using modified Diff algorithm, we can extract \u201ctransform\u201d from memorization table. We can know which items are removed,\u00a0added, or reloaded. All of messy tasks will compute automatically. You don\u2019t need put more effort, or get nervous when app crashes anymore.\n\nThe final result.\n\n\/\/ Calculate diff and map to each actions \/\/ Does automatically \ud83d\udcaf let insertionIndexPaths = diff.insertions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) }) let deletionIndexPaths = diff.deletions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) }) \/\/ Perform action tableView.beginUpdates() tableView.insertRows(at: insertionIndexPaths, with: insertionAnimation) tableView.deleteRows(at: deletionIndexPaths, with: deletionAnimation) tableView.endUpdates()\n\nThose codes are self-explanatory, sound interesting enough? \ud83d\ude0d\n\nBesides that, I will do benchmark by\u00a0each solution on my old iPhone 5, give you overall perspective.\n\n\n## 1.\u00a0Diff Algorithm\n\n### 1.1 Memorization table\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12-300x256.png?resize=441%2C376)\n\nIf you\u2019re not familiar with that memorization-table. I would like to recommend to read\u00a0[LCS-Diff Part 1](http:\/\/nghiatran.me\/longest-common-subsequence-diff-part-1\/)\u00a0before going next.\n\nLet me remind in case you\u2019ve forgotten. LCS is one of classic computer science problems.\n\nGiven string A = ADFGT, string B = AFOXT.\u00a0The LCS of A and B is **AFT**.\n\nBut we need more than LCS, we should need \u201chow\u201d A can transform into B. Fortunately, from the table above, we can \u201cextract\u201d transform easily too. Memorization-Table is a new King \ud83d\ude0e\n\n### 1.2 DiffTransform enum\n\nTo understand what\u2019s is transform stand for, I will create new generic enum\n\n\/\/ Transform enum DiffTransform<T> { \/\/ Represent for reload\/insert\/delete in tableView \/\/ Int: index need to be transform \/\/ T: generic data case reload(Int, T) case insert(Int, T) case delete(Int, T) }\n\nWe created DiffTransform enum for representing a \u201ctransform\u201d. Please notice one thing, I prefer use Enum with **Generic** and **associated-value** than struct\/class. Because if we come with Struct\/Class, we also need to define another Enum to handle kind of Transform. It\u2019s duplicated work.\n\nWith DiffTransform, we can store \u201ckind of transform\u201d, the index, and the real data at the same\u00a0object, with less code as possible \ud83d\ude09\n\nIn few\u00a0trivial programming language like Java or Objective-C, it\u2019s impossible unfortunately. We must create class and enum, but from\u00a0Swift 2.0, we can do it. It\u2019s save me a lot of redundancy code. Less code, less bug. You know \ud83e\udd18\ud83c\udffd\n\nIn case it\u2019s first time you\u2019ve heard it. Take a look at [Generic Enum](https:\/\/appventure.me\/2015\/10\/17\/advanced-practical-enum-examples\/#sec-2-3)\u00a0and [Enum with associated-value](https:\/\/appventure.me\/2015\/10\/17\/advanced-practical-enum-examples\/#sec-1-5)\n\nI also implement\u00a0few helper to quick access data in future.\n\n\/\/ Helper extension DiffTransform: CustomStringConvertible, CustomDebugStringConvertible { \/\/ Value - quick access var value: T { switch self { case .reload( _, let value): return value case .insert( _, let value): return value case .delete( _, let value): return value } } \/\/ index - quick access var index: Int { switch self { case .reload(let index, _): return index case .insert(let index, _): return index case .delete(let index, _): return index } } \/\/ CustomStringConvertible var description: String { return self.toString } \/\/ CustomDebugStringConvertible var debugDescription: String { return self.toString } \/\/ [Private] To string private var toString: String { switch self { case .reload(let index, let value): return \"Reload((\\(index))[\\(value)])\" case .insert(let index, let value): return \"Insert((\\(index))[\\(value)])\" case .delete(let index, let value): return \"Delete((\\(index))[\\(value)])\" } } }\n\nFrom previous\u00a0LCS blog, we have 3 rules. I will remind in each step, also make a sightly modification.\n\nWe will traceback\u00a0from right-bottom corner to left-top corner.\n\n- If A[i] == B[j] ->It means, A[i] is part of LCS. Then we move\u00a0diagonal by i\u2013, j\u2013\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9-300x261.png?resize=386%2C336)\n\n**T** from string A convert to **T** from string B -> There is no difference, we just reload it.\n\nThe \u201ctransform\u201d simple is\n\nlet reload = DiffTransform.reload(i, A[i-1])\n\n- if A[i] != B[i], we have two sub-case\n\nif table[i][j] == table[i-1][j] { \/\/ Go top \/\/ Delete at i-1 } else if table[i][j] == table[i][j-1] { \/\/ Go Left \/\/ Insert at j-1 }\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10-300x205.png?resize=380%2C260)\n\nAs you can see, G != X. It means,\u00a0G\u00a0needs to be removed from A.\n\nlet delete = DiffTransform.delete(i-1, A[i-1])\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11-300x280.png?resize=346%2C323)\n\nF != X. It means, X need to be added.\n\nlet insert = DiffTransform.insert(i-1, B[j-1])\n\n- i == 0 || j ==0\n\nIt\u2019s two special case we should mention. Because we need to figure it out the transform, don\u2019t miss this case\n\nif i == 0 { \/\/ Insert at j-1 let insert = DiffTransform.insert(j-1, B[j-1]) } else j == 0 { \/\/ Remove at i-1 let remove = DiffTransform.delete(i-1, A[i-1]) }\n\n#### Summary\n\nBy following 4 cases, we can determine when transform is applied.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-1-300x195.png?resize=465%2C302)\n\nHere is final instruction.\n\nlet reload = DiffTransform.reload(5, A[4]) \/\/ at (i,j) = (5,5) let delete = DiffTransform.delete(3, A[3]) \/\/ at (4,4) let insert = DiffTransform.insert(3, B[3]) \/\/ at (3,4) let insert = DiffTransform.insert(2, B[2]) \/\/ at (3,3) let reload = DiffTransform.reload(3, A[2]) \/\/ at (3,2) let delete = DiffTransform.delete(1, A[1]) \/\/ at (2,1) let reload = DiffTransform.reload(1, A[0]) \/\/ at (1,1) \/\/ Stop recursive at (0,0)\n\n### 1.3 Diff\n\nThis time to implement the container for storing all DiffTransforms which we calculated by hand \ud83d\ude09\n\n\/\/ Diff Container struct Diff<T> { \/\/ Shortcut Element typealias Element = DiffTransform<T> \/\/ Result private var _result: [Element] = [] var result: [Element] { return self._result } \/\/ Insertion var insertion: [Element] { return self.result.filter({ $0.isInsertion }) } \/\/ Deletion var deletion: [Element] { return self.result.filter({ $0.isDeletion }) } \/\/ Reload var reload: [Element] { return self.result.filter({ $0.isReload }) } mutating func append(item: Element) { self._result.append(item) } } \/\/ Override + : Diff + DiffTransform func +<T> ( left: Diff<T>, right: DiffTransform<T>) -> Diff<T> { var left = left left.append(item: right) return left }\n\nA Diff is a simple struct. It contains array of DiffTransform. I prefer to use Generic all time as possible. I suppose it\u2019s hard to read at the first time, but if you\u2019re familiar enough, it\u2019s quite simple. Generic is really flexible for container as well.\n\nI defined Diff<T> and DiffTransform<T> is same Generic on purpose. So both of model store same kind of value.\n\nBeside that, I also implement few helper methods, it helps us get insertion\/deletion\/reload quickly, and override + operation too.\n\n### 1.4 Warp it up\n\nTime to combine all separately things into one part. I\u2019m still following same approach from Part 1, extend Array, generate MemorizationTable, recursive the table and calculate the DiffTransform.\n\n#### Memorization table\n\n\/\/ Memorization table struct MemorizationTable<T: Equatable> { static func buildTable(x: [T], y: [T]) -> [[Int]] { \/\/ Create 2-dimension table, and filled with zero let n = x.count let m = y.count var table = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1) \/\/ Iterate from top-left corner -> bottom-right corner for i in 0...n { for j in 0...m { if i == 0 || j == 0 { table[i][j] = 0 } else if x[i-1] == y[j-1] { \/\/ MATCH table[i][j] = table[i-1][j-1] + 1 } else { \/\/ NOT MATCH table[i][j] = max(table[i-1][j], table[i][j-1]) } } } return table } }\n\n#### Calculate DiffTransfrom, Diff\n\n\/\/ But we must ensure, each element must adopt with <Equatable> protocol -> We can make comparision extension Array where Element: Equatable { func diff(_ other: [Element]) -> Diff<Element> { \/\/ Build memorization table let table = MemorizationTable.buildTable(x: self, y: other) \/\/ Print Diff return Array.diffFromMemorizationTable(table, self, other, self.count, other.count) } fileprivate static func diffFromMemorizationTable(_ table: [[Int]], _ x: [Element], _ y: [Element], _ i: Int, _ j: Int) -> Diff<Element> { \/\/ Exit if i == 0 && j == 0 { return Diff<Element>() } else if i == 0 { \/\/ Insert return diffFromMemorizationTable(table, x, y, i, j-1) + DiffTransform.insert(j-1, y[j-1]) } else if j == 0 { \/\/ Delete return diffFromMemorizationTable(table, x, y, i-1, j) + DiffTransform.delete(i-1, x[i-1]) } else if table[i][j] == table[i-1][j] { \/\/ Delete return diffFromMemorizationTable(table, x, y, i-1, j) + DiffTransform.delete(i-1, x[i-1]) } else if table[i][j] == table[i][j-1] { \/\/ Insert return diffFromMemorizationTable(table, x, y, i, j-1) + DiffTransform.insert(j-1, y[j-1]) } else { \/\/ Reload return diffFromMemorizationTable(table, x, y, i-1, j-1) + DiffTransform.reload(i-1, x[i-1]) } } }\n\nIt\u2019s sightly modification than the original LCS Algorithm. Instead of trace-back and print LCS string, we check small case and determine when \u201cTransform\u201d and warp into DiffTransform.\n\nThe heart of Diff\u00a0is at\u00a0**diffFromMemorizationTable\u00a0**func. It\u2019s recursion method, and base-recursion return Diff(), then adding DiffTransform from prior recursive func. The finally result will be an Diff instance, with result is all transforms.\n\n#### Apply Diff\n\n\/\/ Apply Diff func apply(diff: Diff<Element>) -> [Element] { var copy = self \/\/ Delete first for delete in diff.deletion { copy.remove(at: delete.index) } \/\/ Insert for insert in diff.insertion { copy.insert(insert.value, at: insert.index) } return copy }\n\nIt\u2019s place for magic happen. [A] transform to [B] by applying DiffTransform one by one. We start with Deletion Transform firstly, then Insertion Transform. We also able to apply ReloadTransform, but it this case, we\u2019re working on String, we don\u2019t need to reload it-self.\n\n### Test with String\n\n\/\/ Test let a = [\"A\", \"D\", \"F\", \"G\", \"T\"] let b = [\"A\", \"F\", \"O\", \"X\", \"T\"] let diff = a.diff(b) \/\/ diff = [Reload((0)[A]), Delete((1)[D]), Reload((2)[F]), Insert((2)[O]), Insert((3)[X]), Delete((3)[G]), Reload((4)[T])] let c = a.apply(diff) print(c) \/\/ c = [\"A\", \"F\", \"O\", \"X\", \"T\"]\n\nSound easy, right? \ud83d\ude09 The Diff is the optimize way as possible, and it does 100% automatically. Life is easy now \ud83e\udd17\n\n\n## 2. Integration with UITableView\n\nWe create DiffCalculator struct to handle all transform logic for UITableView. It stores tableview as weak variable (We don\u2019t want to make cycle-retain right?), and data model.\n\nThe especially things is Setter of data. We calculate the DiffTransform for Insertion\/Deletion\/Reload, then performing the transform in <beginUpdate> and <endUpdate>\n\n\/\/ UITable View Integration struct DiffCalculator<T: Equatable> { \/\/ Weak table view weak var tableView: UITableView? \/\/ Data private var _data: [T] = [] var data: [T] { get {return self._data} set { let old = self._data let diff = old.diff(newValue) \/\/ Set self._data = newValue \/\/ Transform self.applyTransform(with: diff) } } \/\/ \/\/ MARK: - Init init(tableView: UITableView, data: [T]) { self.tableView = tableView self._data = data } \/\/ Apply Transfrom fileprivate func applyTransform<T: Equatable>(with diff: Diff<T>) { \/\/ Update transform guard diff.result.count > 0 else {return} guard let tableView = self.tableView else {return} tableView.beginUpdates() \/\/ Map indexPath let insertion = diff.insertion.map({ IndexPath(row: $0.index, section: 0) }) let deletion = diff.deletion.map({ IndexPath(row: $0.index, section: 0) }) let reload = diff.reload.map({ IndexPath(row: $0.index, section: 0) }) \/\/ Delete tableView.deleteRows(at: deletion, with: .automatic) tableView.insertRows(at: insertion, with: .automatic) tableView.reloadRows(at: reload, with: .automatic) tableView.endUpdates() } }\n\nUsing DiffCaculator is really simple.\n\n\/\/ Example let tableView = UITableView() let data = [\"Nghia Tran\", \"nghiatran.me\", \"Saigon\", \"Singapore\", \"Bangkok\"] var diffCalculator = DiffCalculator<String>(tableView: tableView, data: data) \/\/ Using diffCalculator.data as dataSource for UITableView. \/\/ Pull to refresh with new data let newData = [\"Nghia Tran\", \"Uni\", \"nghiatran.me\", \"Ha Noi\", \"KL\", \"Singapore\", \"Bangkok\", \"Finland\"] \/\/ Update new data \/\/ Table reload with optimize way. diffCalculator.data = newData\n\n\n## 3. Benchmark\n\nFor demonstration, I write a simple app with smallDataSource (10 rows) and reload with large DataSource (20 rows) (simulate it\u2019s from API).\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_app-169x300.jpg?resize=293%2C521)\n\nOn my purpose, the size of cells are dynamic, and collectionView inside each cell and the quality of images are high. Because we want to see the benchmark clearly. So make it\u2019s more complex.\n\nThe Sample app has 3 tabs, stand for each approach we\u2019ve discussed: Force Reload, manually calculate, and Diff algorithm.\n\nOn this benchmark, I will test on my **iPhone 5**, gain accurate results, it will reflect efficiency for each solution.\n\n### 3.1 Force reloadData()\n\nBy calling tableView.reloadData() is naive solution we could do. As you can see clearly, the first peak intends for the first time we reload and fill data into UITableView.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_reload_2-267x300.jpg?resize=330%2C371)\n\nNoticeable, the second peak really impacts our performance. It costs **47%**. Because the table view must calculate the dynamic size on runtime, get minimum size which matched cell\u2019s constraints, it depends on length of comment string. And reload the collectionview built-in the cell.\n\n\/\/ My Purpose \/\/ Don't Cache image in memory \/\/ Just make it complex to render -> Easier to analytic in Instrustment let path = Bundle.main.path(forResource: imageName, ofType: \"jpg\")! let image = UIImage(contentsOfFile: path) self.imageView.image = image\n\nPlease bear in mind, I did it on my purpose. Because in a\u00a0real world, the layout of cells are\u00a0most complex. And of course, as\u00a0more as complex we can see the result clearly.\n\n### 3.2 Do manually\n\nHere is sample data: The data source of Feed screen doesn\u2019t order by created_at, it looks like random, depend on the \u201cscore\u201d of each Item.\n\nlet initalData = [data_1, data_2, data_3, data_4, data_5, data_6, data_7, data_8, data_9, data_10] let newData = [data_1, data_4, data_5, data_6, data_3, data_9, data_2]\n\nHow could I do manually? \ud83e\udd14\n\nHow could I get **insertIndexPaths**\u00a0and\u00a0**deleteIndexPaths** then passing into insertRows\/DeleteRows \ud83e\udd14\n\n\/\/ Reload self.tableView.beginUpdates() self.tableView.insertRows(at: insertIndexPaths, with: .none) self.tableView.deleteRows(at: deleteIndexPaths, with: .none) self.tableView.endUpdates()\n\nReally hard, right? \ud83e\udd14\n\nYeah, if you\u2019re struggling to solve it, there are no change to make sure your result is optimization. Or you might get mistake, and your app is crashed completely.\n\nDiff algorithm is a rescue now \ud83e\udd17\n\n### 3.3 Diff algorithm\n\nIt\u2019s the perfect time to reused DiffCalculator which we implemented in the beginning.\n\n\/\/ Initial diff self.diffCalculator = DiffCalculator<FeedObj>(tableView: self.tableView, data: self.feedObjs) \/\/ From API let newData = FeedObj.pullNewLargeDataSource() self.feedObjs = newData \/\/ Make Dif and reload automatically + optimazation self.diffCalculator.data = newData\n\nIt\u2019s completely straight-forward. Just initialize self.diffCalculator and set data with new data from API. DiffCalculator will do difficult part for us.\n\n[Delete((1)[Diff.FeedObj]), Delete((2)[Diff.FeedObj]), Insert((4)[Diff.FeedObj]), Delete((6)[Diff.FeedObj]), Delete((7)[Diff.FeedObj]),Insert((6)[Diff.FeedObj]), Delete((9)[Diff.FeedObj])]\n\nWe only need 6 steps to transform. It\u2019s optimization approach for now \ud83e\udd17\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_small_data_source-270x300.jpg?resize=354%2C393)\n\nThe result doesn\u2019t make us disappointed. From **47%**, we reduce to **21%**. Good point \ud83d\udcaf\n\n### Summary\n\n- Get perfect transform between 2 data source, absolutely optimize than doing by hand manually\n- 100% calculate automatically.\n- Avoid crash unexpected.\n- Suitable for complex tableview\/collectionview.\n\n\n## 4. Drawback\n\nEverything has two sides, it\u2019s unfair if we only mention the bright side. Does Diff algorithm (based on LCS) have any disadvantage? \ud83e\udd14\n\nLet try on large set of data. The initial data has 100 item, and new data has 210 item, and do each step which same we did.\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_large_data_source-300x256.jpg?resize=446%2C381)\n\nWow, **56%** CPU for Diff. What\u2019s wrong here \ud83e\udd14. As big as data source\u2019s length could be, the time for Diff\u00a0increases significantly.\n\nThe problem is time complexity of Diff is **O(n *\u00a0m)**. So we have 100*210 = 210,000 cell in\u00a0memorization-table, and of course, cost more CPU\u00a0to iterate through the\u00a0table.\n\nDiff algorithm which we discussed is based on **LCS** [Part 1]. \u00a0So it\u2019s not best algorithm we could implement. I choice this approach because it\u2019s simple, and it\u2019s relevant with [Part 1](http:\/\/nghiatran.me\/longest-common-subsequence-diff-part-1\/).\n\n\n## 5. What\u2019s next?\n\nIn next chapter, we will discuss\u00a0**Paul Heckel\u2019s Diff**.\n\nThis algorithm finds all the possible update that UITableView needs in **linear time **O(n) . It\u2019s most efficiently approach which widely used in applications. Moreover, [IGListKit](https:\/\/engineering.instagram.com\/open-sourcing-iglistkit-3d66f1e4e9aa#.p8ojr79an) also uses it as back core as well. \ud83e\udd17\n\n\n## 6. Where to go from here?\n\nSource [su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/LCS-Swift\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]Diff on iOS[\/su_button]\n\nHope you enjoy my blog about LCS and Diff on iOS Development \ud83d\udc4d\n\nDiff algorithm and integration with UITableView which I cover, it\u2019s not perfect optimize solution. It\u2019s perfect place for beginner. There are various\u00a0algorithms to improve the time complexity. One of them\u00a0is [Paul Heckel\u2019s Diff](https:\/\/gist.github.com\/ndarville\/3166060) (was published 1978).\n\nIf you would like to take a deep research, take a look at [IGListKit](https:\/\/github.com\/Instagram\/IGListKit) by Instagram Engineer, and [their blog](https:\/\/engineering.instagram.com\/open-sourcing-iglistkit-3d66f1e4e9aa#.4xyqertyv).\n\nIf you need more challenge. Here is the puzzle:\n\nDiffCalculator has limited when only working with UITableView. How about UICollectionView, maybe we're missing it ? Challenge yourself and implement DiffCalculate generic protocol instead of struct. Make a default extension, and adopt it with both of TableView\/CollectionView. Final result: DiffCalculateProtocol will work with UITableView and UICollectionView or any with less duplicated code, reusable. Let do it \ud83d\ude0e\n\n\u00a0\n\n\u00a0\n\n\n","html":"<p>Hi, it&#8217;s part 2 of my LCS series. Hope you have a great day \ud83d\ude07<\/p>\n<p>In this blog, I would like to cover how we can apply LCS (aka. Diff) into iOS Development. It&#8217;s so boring if I\u00a0keep writing blog with &#8220;deep&#8221; theory, and no place for enjoying.<\/p>\n<p><img class=\" wp-image-4343 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/98b322c7bf5992110646420866f72f492bc8706eb4769179676149ad713251d3-300x168.jpg?resize=482%2C270\" alt=\"\" width=\"482\" height=\"270\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/98b322c7bf5992110646420866f72f492bc8706eb4769179676149ad713251d3.jpg?resize=300%2C168&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/98b322c7bf5992110646420866f72f492bc8706eb4769179676149ad713251d3.jpg?w=625&amp;ssl=1 625w\" sizes=\"(max-width: 482px) 100vw, 482px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Before diving, we should try a real problem I ensure everybody will encounter if you&#8217;re iOS\u00a0S.E.<\/p>\n<p>Let imagine, we have an app, same philosophy with Instagram. We have Feed screen, where we can see all post of your friends, your following.<\/p>\n<p><img class=\" wp-image-4366 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_screenshot_app-169x300.jpg?resize=235%2C417\" alt=\"\" width=\"235\" height=\"417\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_screenshot_app.jpg?resize=169%2C300&amp;ssl=1 169w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_screenshot_app.jpg?w=375&amp;ssl=1 375w\" sizes=\"(max-width: 235px) 100vw, 235px\" data-recalc-dims=\"1\" \/><\/p>\n<p>On the top-right\u00a0of navigation bar. We have pull-to-refresh button. Whenever you tap it. It will get new data from server, then filling data into UITableView.<\/p>\n<p>Your requirement is figured it out the way to &#8220;reload&#8221; table view with <strong>less effort<\/strong> as much as <strong>possible<\/strong>. \ud83d\ude09<\/p>\n<h3>Solution 1: Force reloadData()<\/h3>\n<p>Don&#8217;t care any things, just call<\/p>\n<pre class=\"lang:default decode:true\">self.tableView.reloadData()<\/pre>\n<p>In particular scenario, it might be the best solution if you have &lt; 10 items, and the hierarchy\u00a0of cell&#8217;s\u00a0subviews are\u00a0simple. But what if your app grows up quickly, and have around 100 items, each TableViewRow\u00a0has tons of complex subviews, such as UIStackView, UICollectionView,&#8230;<\/p>\n<p>By forcing <strong>reloadData<\/strong>(). It means UITableView will re-draw and calculate dynamic size of 100 cells again -&gt; It hits your CPU and reduces performance as well. It&#8217;s painful.<\/p>\n<p>I will more detail in Benchmark section to show you how it&#8217;s bad.<\/p>\n<h3>Solution 2: Do manually<\/h3>\n<p>Many people will come up with solution 2. Instead of calling reloadData(). They will calculate the difference (insert\/delete\/reload) <strong>manually<\/strong>\u00a0and warp into tableView.performAction{}<\/p>\n<p>Some things like this<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Prepare data\r\nlet oldData = self.data\r\nlet newData = feedResponse.data\r\n\r\n\/\/ Check diff manually\r\n\/\/ How do it if the order of newData is completely difference with oldData ? \u274c\r\nlet insertIndexPaths = \/\/ If-then stuff\r\nlet deleteIndexPaths = \/\/ if-then stuff\r\n\r\n\/\/ Reload\r\nself.tableView.beginUpdates()\r\n\r\nself.tableView.insertRows(at: insertIndexPaths, with: .none)\r\nself.tableView.deleteRows(at: deleteIndexPaths, with: .none)\r\n\r\nself.tableView.endUpdates()<\/pre>\n<h4>Pros<\/h4>\n<ul>\n<li>By calling reload\/insert\/delete on particular cell. You reduces time to re-draw cell. It&#8217;s good point.<\/li>\n<li>You can apply specific animation for each kind of transform easily.<\/li>\n<\/ul>\n<h4>Cons<\/h4>\n<ul>\n<li>By calculating the diff manually, it means by your hand and brain. It&#8217;s still a nightmare if you have a many new item, and the order of new item is completely difference than previous items.<\/li>\n<li>If you have enough patient, and careful. You could do it, but who know your solution is the best optimization? Maybe there is someone out there who\u00a0come up with another comparison, have less &#8220;transform&#8221; than your result? \ud83e\udd14 Working manually is not optimize approach.<\/li>\n<li>If you make a mistake, your app crash\u00a0with some kind of error like this<\/li>\n<\/ul>\n<p><img class=\" wp-image-4347 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-error-300x38.jpg?resize=648%2C82\" alt=\"\" width=\"648\" height=\"82\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-error.jpg?resize=300%2C38&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-error.jpg?resize=768%2C96&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-error.jpg?resize=1024%2C128&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-error.jpg?w=1598&amp;ssl=1 1598w\" sizes=\"(max-width: 648px) 100vw, 648px\" data-recalc-dims=\"1\" \/><\/p>\n<p>It always happens you indexPaths doesn&#8217;t match with data source.<\/p>\n<h3>Solution 3: Diff Algorithm<\/h3>\n<p>How about LCS (Diff). Good news, we can reuse what we actually\u00a0did on <a href=\"http:\/\/nghiatran.me\/longest-common-subsequence-diff-part-1\/\">LCS Part 1<\/a>. By using modified Diff algorithm, we can extract &#8220;transform&#8221; from memorization table. We can know which items are removed,\u00a0added, or reloaded. All of messy tasks will compute automatically. You don&#8217;t need put more effort, or get nervous when app crashes anymore.<\/p>\n<p>The final result.<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Calculate diff and map to each actions\r\n\/\/ Does automatically \ud83d\udcaf\r\nlet insertionIndexPaths = diff.insertions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) })\r\nlet deletionIndexPaths = diff.deletions.map({ IndexPath(row: $0.idx, section: self.sectionIndex) })\r\n\r\n\/\/ Perform action\r\ntableView.beginUpdates()\r\ntableView.insertRows(at: insertionIndexPaths, with: insertionAnimation)\r\ntableView.deleteRows(at: deletionIndexPaths, with: deletionAnimation)\r\ntableView.endUpdates()<\/pre>\n<p>Those codes are self-explanatory, sound interesting enough? \ud83d\ude0d<\/p>\n<p>Besides that, I will do benchmark by\u00a0each solution on my old iPhone 5, give you overall perspective.<\/p>\n<h2>1.\u00a0Diff Algorithm<\/h2>\n<h3>1.1 Memorization table<\/h3>\n<p><img class=\" wp-image-4303 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12-300x256.png?resize=441%2C376\" alt=\"\" width=\"441\" height=\"376\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?resize=300%2C256&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?resize=768%2C656&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?resize=1024%2C874&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_12.png?w=1094&amp;ssl=1 1094w\" sizes=\"(max-width: 441px) 100vw, 441px\" data-recalc-dims=\"1\" \/><\/p>\n<p>If you&#8217;re not familiar with that memorization-table. I would like to recommend to read\u00a0<a href=\"http:\/\/nghiatran.me\/longest-common-subsequence-diff-part-1\/\">LCS-Diff Part 1<\/a>\u00a0before going next.<\/p>\n<p>Let me remind in case you&#8217;ve forgotten. LCS is one of classic computer science problems.<\/p>\n<p>Given string A = ADFGT, string B = AFOXT.\u00a0The LCS of A and B is <strong>AFT<\/strong>.<\/p>\n<p>But we need more than LCS, we should need &#8220;how&#8221; A can transform into B. Fortunately, from the table above, we can &#8220;extract&#8221; transform easily too. Memorization-Table is a new King \ud83d\ude0e<\/p>\n<h3>1.2 DiffTransform enum<\/h3>\n<p>To understand what&#8217;s is transform stand for, I will create new generic enum<\/p>\n<pre class=\"lang:swift decode:true\">\/\/ Transform\r\nenum DiffTransform&lt;T&gt; {\r\n    \r\n    \/\/ Represent for reload\/insert\/delete in tableView\r\n    \/\/ Int: index need to be transform\r\n    \/\/ T: generic data\r\n    case reload(Int, T)\r\n    case insert(Int, T)\r\n    case delete(Int, T)\r\n}<\/pre>\n<p>We created DiffTransform enum for representing a &#8220;transform&#8221;. Please notice one thing, I prefer use Enum with <strong>Generic<\/strong> and <strong>associated-value<\/strong> than struct\/class. Because if we come with Struct\/Class, we also need to define another Enum to handle kind of Transform. It&#8217;s duplicated work.<\/p>\n<p>With DiffTransform, we can store &#8220;kind of transform&#8221;, the index, and the real data at the same\u00a0object, with less code as possible \ud83d\ude09<\/p>\n<p>In few\u00a0trivial programming language like Java or Objective-C, it&#8217;s impossible unfortunately. We must create class and enum, but from\u00a0Swift 2.0, we can do it. It&#8217;s save me a lot of redundancy code. Less code, less bug. You know \ud83e\udd18\ud83c\udffd<\/p>\n<p>In case it&#8217;s first time you&#8217;ve heard it. Take a look at <a href=\"https:\/\/appventure.me\/2015\/10\/17\/advanced-practical-enum-examples\/#sec-2-3\">Generic Enum<\/a>\u00a0and <a href=\"https:\/\/appventure.me\/2015\/10\/17\/advanced-practical-enum-examples\/#sec-1-5\">Enum with associated-value<\/a><\/p>\n<p>I also implement\u00a0few helper to quick access data in future.<\/p>\n<pre class=\"lang:swift decode:true\">\/\/ Helper\r\nextension DiffTransform: CustomStringConvertible, CustomDebugStringConvertible {\r\n    \r\n    \/\/ Value - quick access\r\n    var value: T {\r\n        switch self {\r\n        case .reload( _, let value):\r\n            return value\r\n        case .insert( _, let value):\r\n            return value\r\n        case .delete( _, let value):\r\n            return value\r\n        }\r\n    }\r\n    \r\n    \/\/ index - quick access\r\n    var index: Int {\r\n        switch self {\r\n        case .reload(let index, _):\r\n            return index\r\n        case .insert(let index, _):\r\n            return index\r\n        case .delete(let index, _):\r\n            return index\r\n        }\r\n    }\r\n    \r\n    \/\/ CustomStringConvertible\r\n    var description: String {\r\n        return self.toString\r\n    }\r\n    \r\n    \/\/ CustomDebugStringConvertible\r\n    var debugDescription: String {\r\n        return self.toString\r\n    }\r\n    \r\n    \/\/ [Private] To string\r\n    private var toString: String {\r\n        switch self {\r\n        case .reload(let index, let value):\r\n            return \"Reload((\\(index))[\\(value)])\"\r\n        case .insert(let index, let value):\r\n            return \"Insert((\\(index))[\\(value)])\"\r\n        case .delete(let index, let value):\r\n            return \"Delete((\\(index))[\\(value)])\"\r\n        }\r\n    }\r\n}<\/pre>\n<p>From previous\u00a0LCS blog, we have 3 rules. I will remind in each step, also make a sightly modification.<\/p>\n<p>We will traceback\u00a0from right-bottom corner to left-top corner.<\/p>\n<ul>\n<li>If A[i] == B[j] -&gt;It means, A[i] is part of LCS. Then we move\u00a0diagonal by i&#8211;, j&#8211;<\/li>\n<\/ul>\n<p><img class=\" wp-image-4300 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9-300x261.png?resize=386%2C336\" alt=\"\" width=\"386\" height=\"336\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?resize=300%2C261&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?resize=768%2C668&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?resize=1024%2C890&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_9.png?w=1086&amp;ssl=1 1086w\" sizes=\"(max-width: 386px) 100vw, 386px\" data-recalc-dims=\"1\" \/><\/p>\n<p><strong>T<\/strong> from string A convert to <strong>T<\/strong> from string B -&gt; There is no difference, we just reload it.<\/p>\n<p>The &#8220;transform&#8221; simple is<\/p>\n<pre class=\"lang:swift decode:true\">let reload = DiffTransform.reload(i, A[i-1])<\/pre>\n<ul>\n<li>if A[i] != B[i], we have two sub-case<\/li>\n<\/ul>\n<pre class=\"lang:default decode:true\">if table[i][j] == table[i-1][j] {\r\n    \/\/ Go top\r\n    \/\/ Delete at i-1\r\n}\r\nelse if table[i][j] == table[i][j-1] {\r\n    \/\/ Go Left\r\n    \/\/ Insert at j-1\r\n}<\/pre>\n<p><img class=\" wp-image-4299 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10-300x205.png?resize=380%2C260\" alt=\"\" width=\"380\" height=\"260\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?resize=300%2C205&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?resize=768%2C525&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?resize=1024%2C700&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_10.png?w=1360&amp;ssl=1 1360w\" sizes=\"(max-width: 380px) 100vw, 380px\" data-recalc-dims=\"1\" \/><\/p>\n<p>As you can see, G != X. It means,\u00a0G\u00a0needs to be removed from A.<\/p>\n<pre class=\"lang:default decode:true\">let delete = DiffTransform.delete(i-1, A[i-1])<\/pre>\n<p><img class=\" wp-image-4298 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11-300x280.png?resize=346%2C323\" alt=\"\" width=\"346\" height=\"323\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?resize=300%2C280&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?resize=768%2C717&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?resize=1024%2C957&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/table_11.png?w=1064&amp;ssl=1 1064w\" sizes=\"(max-width: 346px) 100vw, 346px\" data-recalc-dims=\"1\" \/><\/p>\n<p>F != X. It means, X need to be added.<\/p>\n<pre class=\"lang:default decode:true\">let insert = DiffTransform.insert(i-1, B[j-1])<\/pre>\n<ul>\n<li>i == 0 || j ==0<\/li>\n<\/ul>\n<p>It&#8217;s two special case we should mention. Because we need to figure it out the transform, don&#8217;t miss this case<\/p>\n<pre class=\"lang:default decode:true\">if i == 0 {\r\n    \/\/ Insert at j-1\r\n    let insert = DiffTransform.insert(j-1, B[j-1])\r\n}\r\nelse j == 0 {\r\n    \/\/ Remove at i-1\r\n    let remove = DiffTransform.delete(i-1, A[i-1])\r\n}<\/pre>\n<h4>Summary<\/h4>\n<p>By following 4 cases, we can determine when transform is applied.<\/p>\n<p><img class=\" wp-image-4344 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-1-300x195.png?resize=465%2C302\" alt=\"\" width=\"465\" height=\"302\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-1.png?resize=300%2C195&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-1.png?resize=768%2C499&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/02\/lcs-part-2-1.png?resize=1024%2C666&amp;ssl=1 1024w\" sizes=\"(max-width: 465px) 100vw, 465px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Here is final instruction.<\/p>\n<pre class=\"lang:default decode:true\">let reload = DiffTransform.reload(5, A[4]) \/\/ at (i,j) = (5,5)\r\nlet delete = DiffTransform.delete(3, A[3]) \/\/ at (4,4)\r\nlet insert = DiffTransform.insert(3, B[3]) \/\/ at (3,4)\r\nlet insert = DiffTransform.insert(2, B[2]) \/\/ at (3,3)\r\nlet reload = DiffTransform.reload(3, A[2]) \/\/ at (3,2)\r\nlet delete = DiffTransform.delete(1, A[1]) \/\/ at (2,1)\r\nlet reload = DiffTransform.reload(1, A[0]) \/\/ at (1,1)\r\n\/\/ Stop recursive at (0,0)<\/pre>\n<h3>1.3 Diff<\/h3>\n<p>This time to implement the container for storing all DiffTransforms which we calculated by hand \ud83d\ude09<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Diff Container\r\nstruct Diff&lt;T&gt; {\r\n    \r\n    \/\/ Shortcut Element\r\n    typealias Element = DiffTransform&lt;T&gt;\r\n    \r\n    \/\/ Result\r\n    private var _result: [Element] = []\r\n    var result: [Element] {\r\n        return self._result\r\n    }\r\n    \r\n    \/\/ Insertion\r\n    var insertion: [Element] {\r\n        return self.result.filter({ $0.isInsertion })\r\n    }\r\n    \r\n    \/\/ Deletion\r\n    var deletion: [Element] {\r\n        return self.result.filter({ $0.isDeletion })\r\n    }\r\n    \r\n    \/\/ Reload\r\n    var reload: [Element] {\r\n        return self.result.filter({ $0.isReload })\r\n    }\r\n    \r\n    mutating func append(item: Element) {\r\n        self._result.append(item)\r\n    }\r\n}\r\n\r\n\/\/ Override + : Diff + DiffTransform\r\nfunc +&lt;T&gt; ( left: Diff&lt;T&gt;, right: DiffTransform&lt;T&gt;) -&gt; Diff&lt;T&gt; {\r\n    var left = left\r\n    left.append(item: right)\r\n    return left\r\n}<\/pre>\n<p>A Diff is a simple struct. It contains array of DiffTransform. I prefer to use Generic all time as possible. I suppose it&#8217;s hard to read at the first time, but if you&#8217;re familiar enough, it&#8217;s quite simple. Generic is really flexible for container as well.<\/p>\n<p>I defined Diff&lt;T&gt; and DiffTransform&lt;T&gt; is same Generic on purpose. So both of model store same kind of value.<\/p>\n<p>Beside that, I also implement few helper methods, it helps us get insertion\/deletion\/reload quickly, and override + operation too.<\/p>\n<h3>1.4 Warp it up<\/h3>\n<p>Time to combine all separately things into one part. I&#8217;m still following same approach from Part 1, extend Array, generate MemorizationTable, recursive the table and calculate the DiffTransform.<\/p>\n<h4>Memorization table<\/h4>\n<pre class=\"lang:default decode:true\">\/\/ Memorization table\r\nstruct MemorizationTable&lt;T: Equatable&gt; {\r\n    \r\n    static func buildTable(x: [T], y: [T]) -&gt; [[Int]] {\r\n        \r\n        \/\/ Create 2-dimension table, and filled with zero\r\n        let n = x.count\r\n        let m = y.count\r\n        var table = Array(repeating: Array(repeating: 0, count: m + 1), count: n + 1)\r\n    \r\n        \/\/ Iterate from top-left corner -&gt; bottom-right corner\r\n        for i in 0...n {\r\n            for j in 0...m {\r\n                if i == 0 || j == 0 {\r\n                    table[i][j] = 0\r\n                }\r\n                else if x[i-1] == y[j-1] { \/\/ MATCH\r\n                    table[i][j] = table[i-1][j-1] + 1\r\n                }\r\n                else { \/\/ NOT MATCH\r\n                    table[i][j] = max(table[i-1][j], table[i][j-1])\r\n                }\r\n            }\r\n        }\r\n        \r\n        return table\r\n    }\r\n}<\/pre>\n<h4>Calculate DiffTransfrom, Diff<\/h4>\n<pre class=\"lang:default decode:true\">\/\/ But we must ensure, each element must adopt with &lt;Equatable&gt; protocol -&gt; We can make comparision\r\nextension Array where Element: Equatable {\r\n    \r\n    func diff(_ other: [Element]) -&gt; Diff&lt;Element&gt; {\r\n        \r\n        \/\/ Build memorization table\r\n        let table = MemorizationTable.buildTable(x: self, y: other)\r\n        \r\n        \/\/ Print Diff\r\n        return Array.diffFromMemorizationTable(table, self, other, self.count, other.count)\r\n    }\r\n    \r\n    fileprivate static func diffFromMemorizationTable(_ table: [[Int]], _ x: [Element], _ y: [Element], _ i: Int, _ j: Int) -&gt; Diff&lt;Element&gt; {\r\n        \r\n        \/\/ Exit\r\n        if i == 0 &amp;&amp; j == 0 {\r\n            return Diff&lt;Element&gt;()\r\n        }\r\n        else if i == 0 { \/\/ Insert\r\n            return diffFromMemorizationTable(table, x, y, i, j-1) + DiffTransform.insert(j-1, y[j-1])\r\n        }\r\n        else if j == 0 { \/\/ Delete\r\n            return diffFromMemorizationTable(table, x, y, i-1, j) + DiffTransform.delete(i-1, x[i-1])\r\n        }\r\n        else if table[i][j] == table[i-1][j] { \/\/ Delete\r\n            return diffFromMemorizationTable(table, x, y, i-1, j) + DiffTransform.delete(i-1, x[i-1])\r\n        }\r\n        else if table[i][j] == table[i][j-1] { \/\/ Insert\r\n            return diffFromMemorizationTable(table, x, y, i, j-1) + DiffTransform.insert(j-1, y[j-1])\r\n        }\r\n        else { \/\/ Reload\r\n            return diffFromMemorizationTable(table, x, y, i-1, j-1) + DiffTransform.reload(i-1, x[i-1])\r\n        }\r\n    }\r\n}<\/pre>\n<p>It&#8217;s sightly modification than the original LCS Algorithm. Instead of trace-back and print LCS string, we check small case and determine when &#8220;Transform&#8221; and warp into DiffTransform.<\/p>\n<p>The heart of Diff\u00a0is at\u00a0<strong>diffFromMemorizationTable\u00a0<\/strong>func. It&#8217;s recursion method, and base-recursion return Diff(), then adding DiffTransform from prior recursive func. The finally result will be an Diff instance, with result is all transforms.<\/p>\n<h4>Apply Diff<\/h4>\n<pre class=\"lang:default decode:true\">\/\/ Apply Diff \r\nfunc apply(diff: Diff&lt;Element&gt;) -&gt; [Element] {\r\n    var copy = self\r\n    \r\n    \/\/ Delete first\r\n    for delete in diff.deletion {\r\n        copy.remove(at: delete.index)\r\n    }\r\n    \r\n    \/\/ Insert\r\n    for insert in diff.insertion {\r\n        copy.insert(insert.value, at: insert.index)\r\n    }\r\n    \r\n    return copy\r\n}<\/pre>\n<p>It&#8217;s place for magic happen. [A] transform to [B] by applying DiffTransform one by one. We start with Deletion Transform firstly, then Insertion Transform. We also able to apply ReloadTransform, but it this case, we&#8217;re working on String, we don&#8217;t need to reload it-self.<\/p>\n<h3>Test with String<\/h3>\n<pre class=\"lang:default decode:true\">\/\/ Test\r\nlet a = [\"A\", \"D\", \"F\", \"G\", \"T\"]\r\nlet b = [\"A\", \"F\", \"O\", \"X\", \"T\"]\r\n\r\nlet diff = a.diff(b) \r\n\/\/ diff = [Reload((0)[A]), Delete((1)[D]), Reload((2)[F]), Insert((2)[O]),\r\nInsert((3)[X]), Delete((3)[G]), Reload((4)[T])]\r\n\r\nlet c = a.apply(diff)\r\nprint(c) \/\/ c = [\"A\", \"F\", \"O\", \"X\", \"T\"]<\/pre>\n<p>Sound easy, right? \ud83d\ude09 The Diff is the optimize way as possible, and it does 100% automatically. Life is easy now \ud83e\udd17<\/p>\n<h2>2. Integration with UITableView<\/h2>\n<p>We create DiffCalculator struct to handle all transform logic for UITableView. It stores tableview as weak variable (We don&#8217;t want to make cycle-retain right?), and data model.<\/p>\n<p>The especially things is Setter of data. We calculate the DiffTransform for Insertion\/Deletion\/Reload, then performing the transform in &lt;beginUpdate&gt; and &lt;endUpdate&gt;<\/p>\n<pre class=\"lang:default decode:true\">\/\/ UITable View Integration\r\nstruct DiffCalculator&lt;T: Equatable&gt; {\r\n    \r\n    \/\/ Weak table view\r\n    weak var tableView: UITableView?\r\n    \r\n    \/\/ Data\r\n    private var _data: [T] = []\r\n    var data: [T] {\r\n        get {return self._data}\r\n        set {\r\n            let old = self._data\r\n            let diff = old.diff(newValue)\r\n            \r\n            \/\/ Set\r\n            self._data = newValue\r\n            \r\n            \/\/ Transform\r\n            self.applyTransform(with: diff)\r\n        }\r\n    }\r\n    \/\/\r\n    \/\/ MARK: - Init\r\n    init(tableView: UITableView, data: [T]) {\r\n        self.tableView = tableView\r\n        self._data = data\r\n    }\r\n    \r\n    \/\/ Apply Transfrom\r\n    fileprivate func applyTransform&lt;T: Equatable&gt;(with diff: Diff&lt;T&gt;) {\r\n        \r\n        \/\/ Update transform\r\n        guard diff.result.count &gt; 0 else {return}\r\n        guard let tableView = self.tableView else {return}\r\n        \r\n        tableView.beginUpdates()\r\n        \r\n        \/\/ Map indexPath\r\n        let insertion = diff.insertion.map({ IndexPath(row: $0.index, section: 0) })\r\n        let deletion = diff.deletion.map({ IndexPath(row: $0.index, section: 0) })\r\n        let reload = diff.reload.map({ IndexPath(row: $0.index, section: 0) })\r\n        \r\n        \/\/ Delete\r\n        tableView.deleteRows(at: deletion, with: .automatic)\r\n        tableView.insertRows(at: insertion, with: .automatic)\r\n        tableView.reloadRows(at: reload, with: .automatic)\r\n        \r\n        tableView.endUpdates()\r\n    }\r\n}<\/pre>\n<p>Using DiffCaculator is really simple.<\/p>\n<pre class=\"lang:default decode:true \">\/\/ Example\r\nlet tableView = UITableView()\r\nlet data = [\"Nghia Tran\", \"nghiatran.me\", \"Saigon\", \"Singapore\", \"Bangkok\"]\r\nvar diffCalculator = DiffCalculator&lt;String&gt;(tableView: tableView, data: data)\r\n\r\n\/\/ Using diffCalculator.data as dataSource for UITableView.\r\n\r\n\/\/ Pull to refresh with new data\r\nlet newData = [\"Nghia Tran\", \"Uni\", \"nghiatran.me\", \"Ha Noi\", \"KL\", \"Singapore\", \"Bangkok\", \"Finland\"]\r\n\r\n\/\/ Update new data\r\n\/\/ Table reload with optimize way.\r\ndiffCalculator.data = newData<\/pre>\n<h2>3. Benchmark<\/h2>\n<p>For demonstration, I write a simple app with smallDataSource (10 rows) and reload with large DataSource (20 rows) (simulate it&#8217;s from API).<\/p>\n<p><img class=\"wp-image-4359 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_app-169x300.jpg?resize=293%2C521\" alt=\"\" width=\"293\" height=\"521\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_app.jpg?resize=169%2C300&amp;ssl=1 169w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_app.jpg?resize=576%2C1024&amp;ssl=1 576w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_app.jpg?w=750&amp;ssl=1 750w\" sizes=\"(max-width: 293px) 100vw, 293px\" data-recalc-dims=\"1\" \/><\/p>\n<p>On my purpose, the size of cells are dynamic, and collectionView inside each cell and the quality of images are high. Because we want to see the benchmark clearly. So make it&#8217;s more complex.<\/p>\n<p>The Sample app has 3 tabs, stand for each approach we&#8217;ve discussed: Force Reload, manually calculate, and Diff algorithm.<\/p>\n<p>On this benchmark, I will test on my <strong>iPhone 5<\/strong>, gain accurate results, it will reflect efficiency for each solution.<\/p>\n<h3>3.1 Force reloadData()<\/h3>\n<p>By calling tableView.reloadData() is naive solution we could do. As you can see clearly, the first peak intends for the first time we reload and fill data into UITableView.<\/p>\n<p><img class=\" wp-image-4361 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_reload_2-267x300.jpg?resize=330%2C371\" alt=\"\" width=\"330\" height=\"371\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_reload_2.jpg?resize=267%2C300&amp;ssl=1 267w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_reload_2.jpg?resize=768%2C862&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_reload_2.jpg?w=912&amp;ssl=1 912w\" sizes=\"(max-width: 330px) 100vw, 330px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Noticeable, the second peak really impacts our performance. It costs <strong>47%<\/strong>. Because the table view must calculate the dynamic size on runtime, get minimum size which matched cell&#8217;s constraints, it depends on length of comment string. And reload the collectionview built-in the cell.<\/p>\n<pre class=\"lang:default decode:true\">\/\/ My Purpose\r\n\/\/ Don't Cache image in memory\r\n\/\/ Just make it complex to render -&gt; Easier to analytic in Instrustment\r\nlet path = Bundle.main.path(forResource: imageName, ofType: \"jpg\")!\r\nlet image = UIImage(contentsOfFile: path)\r\n\r\nself.imageView.image = image<\/pre>\n<p>Please bear in mind, I did it on my purpose. Because in a\u00a0real world, the layout of cells are\u00a0most complex. And of course, as\u00a0more as complex we can see the result clearly.<\/p>\n<h3>3.2 Do manually<\/h3>\n<p>Here is sample data: The data source of Feed screen doesn&#8217;t order by created_at, it looks like random, depend on the &#8220;score&#8221; of each Item.<\/p>\n<pre class=\"lang:default decode:true\">let initalData = [data_1, data_2, data_3, data_4, data_5, data_6, data_7, data_8, data_9, data_10]\r\nlet newData = [data_1, data_4, data_5, data_6, data_3, data_9, data_2]<\/pre>\n<p>How could I do manually? \ud83e\udd14<\/p>\n<p>How could I get <strong>insertIndexPaths<\/strong>\u00a0and\u00a0<strong>deleteIndexPaths<\/strong> then passing into insertRows\/DeleteRows \ud83e\udd14<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Reload\r\nself.tableView.beginUpdates()\r\nself.tableView.insertRows(at: insertIndexPaths, with: .none)\r\nself.tableView.deleteRows(at: deleteIndexPaths, with: .none)\r\nself.tableView.endUpdates()<\/pre>\n<p>Really hard, right? \ud83e\udd14<\/p>\n<p>Yeah, if you&#8217;re struggling to solve it, there are no change to make sure your result is optimization. Or you might get mistake, and your app is crashed completely.<\/p>\n<p>Diff algorithm is a rescue now \ud83e\udd17<\/p>\n<h3>3.3 Diff algorithm<\/h3>\n<p>It&#8217;s the perfect time to reused DiffCalculator which we implemented in the beginning.<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Initial diff\r\nself.diffCalculator = DiffCalculator&lt;FeedObj&gt;(tableView: self.tableView, data: self.feedObjs)\r\n\r\n\/\/ From API\r\nlet newData = FeedObj.pullNewLargeDataSource()\r\nself.feedObjs = newData\r\n\r\n\/\/ Make Dif and reload automatically + optimazation\r\nself.diffCalculator.data = newData<\/pre>\n<p>It&#8217;s completely straight-forward. Just initialize self.diffCalculator and set data with new data from API. DiffCalculator will do difficult part for us.<\/p>\n<pre class=\"lang:default decode:true\">[Delete((1)[Diff.FeedObj]), Delete((2)[Diff.FeedObj]), Insert((4)[Diff.FeedObj]),\r\n Delete((6)[Diff.FeedObj]), Delete((7)[Diff.FeedObj]),Insert((6)[Diff.FeedObj]),\r\n Delete((9)[Diff.FeedObj])]<\/pre>\n<p>We only need 6 steps to transform. It&#8217;s optimization approach for now \ud83e\udd17<\/p>\n<p><img class=\" wp-image-4363 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_small_data_source-270x300.jpg?resize=354%2C393\" alt=\"\" width=\"354\" height=\"393\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_small_data_source.jpg?resize=270%2C300&amp;ssl=1 270w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_small_data_source.jpg?resize=768%2C854&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_small_data_source.jpg?resize=921%2C1024&amp;ssl=1 921w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_small_data_source.jpg?w=930&amp;ssl=1 930w\" sizes=\"(max-width: 354px) 100vw, 354px\" data-recalc-dims=\"1\" \/><\/p>\n<p>The result doesn&#8217;t make us disappointed. From <strong>47%<\/strong>, we reduce to <strong>21%<\/strong>. Good point \ud83d\udcaf<\/p>\n<h3>Summary<\/h3>\n<ul>\n<li>Get perfect transform between 2 data source, absolutely optimize than doing by hand manually<\/li>\n<li>100% calculate automatically.<\/li>\n<li>Avoid crash unexpected.<\/li>\n<li>Suitable for complex tableview\/collectionview.<\/li>\n<\/ul>\n<h2>4. Drawback<\/h2>\n<p>Everything has two sides, it&#8217;s unfair if we only mention the bright side. Does Diff algorithm (based on LCS) have any disadvantage? \ud83e\udd14<\/p>\n<p>Let try on large set of data. The initial data has 100 item, and new data has 210 item, and do each step which same we did.<\/p>\n<p><img class=\" wp-image-4362 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_large_data_source-300x256.jpg?resize=446%2C381\" alt=\"\" width=\"446\" height=\"381\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_large_data_source.jpg?resize=300%2C256&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_large_data_source.jpg?resize=768%2C655&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/diff_benchmark_large_data_source.jpg?w=994&amp;ssl=1 994w\" sizes=\"(max-width: 446px) 100vw, 446px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Wow, <strong>56%<\/strong> CPU for Diff. What&#8217;s wrong here \ud83e\udd14. As big as data source&#8217;s length could be, the time for Diff\u00a0increases significantly.<\/p>\n<p>The problem is time complexity of Diff is <strong>O(n *\u00a0m)<\/strong>. So we have 100*210 = 210,000 cell in\u00a0memorization-table, and of course, cost more CPU\u00a0to iterate through the\u00a0table.<\/p>\n<p>Diff algorithm which we discussed is based on <strong>LCS<\/strong> [Part 1]. \u00a0So it&#8217;s not best algorithm we could implement. I choice this approach because it&#8217;s simple, and it&#8217;s relevant with <a href=\"http:\/\/nghiatran.me\/longest-common-subsequence-diff-part-1\/\">Part 1<\/a>.<\/p>\n<h2>5. What&#8217;s next?<\/h2>\n<p>In next chapter, we will discuss\u00a0<strong>Paul Heckel&#8217;s Diff<\/strong>.<\/p>\n<p>This algorithm finds all the possible update that UITableView needs in <strong>linear time <\/strong>O(n) . It&#8217;s most efficiently approach which widely used in applications. Moreover, <a href=\"https:\/\/engineering.instagram.com\/open-sourcing-iglistkit-3d66f1e4e9aa#.p8ojr79an\">IGListKit<\/a> also uses it as back core as well. \ud83e\udd17<\/p>\n<h2>6. Where to go from here?<\/h2>\n<p>Source [su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/LCS-Swift&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]Diff on iOS[\/su_button]<\/p>\n<p>Hope you enjoy my blog about LCS and Diff on iOS Development \ud83d\udc4d<\/p>\n<p>Diff algorithm and integration with UITableView which I cover, it&#8217;s not perfect optimize solution. It&#8217;s perfect place for beginner. There are various\u00a0algorithms to improve the time complexity. One of them\u00a0is <a href=\"https:\/\/gist.github.com\/ndarville\/3166060\">Paul Heckel&#8217;s Diff<\/a> (was published 1978).<\/p>\n<p>If you would like to take a deep research, take a look at <a href=\"https:\/\/github.com\/Instagram\/IGListKit\">IGListKit<\/a> by Instagram Engineer, and <a href=\"https:\/\/engineering.instagram.com\/open-sourcing-iglistkit-3d66f1e4e9aa#.4xyqertyv\">their blog<\/a>.<\/p>\n<p>If you need more challenge. Here is the puzzle:<\/p>\n<pre class=\"lang:default decode:true\">DiffCalculator has limited when only working with UITableView.\r\nHow about UICollectionView, maybe we're missing it ?\r\n\r\nChallenge yourself and implement DiffCalculate generic protocol instead of struct.\r\nMake a default extension, and adopt it with both of TableView\/CollectionView.\r\n\r\nFinal result: DiffCalculateProtocol will work with UITableView and UICollectionView or any  with less duplicated code, reusable.\r\n\r\nLet do it \ud83d\ude0e<\/pre>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/02\/igor-ovsyannykov-165874-e1487608521256.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Sat, 04 Mar 2017 10:52:22 +0000","created_by":1,"updated_at":"Sat, 04 Mar 2017 21:23:22 +0000","updated_by":1,"published_at":"Sat, 04 Mar 2017 10:52:22 +0000","published_by":1},{"id":4384,"title":"Deck.gl - Data Visualization","slug":"deck-gl-data-visualization","markdown":"\nHi everyone.\u00a0Today is the last time I\u2019ve worked at feels. I decided to spend whole weekend to do experiment which I haven\u2019t done before.\n\nI remember to [deck.gl](https:\/\/uber.github.io\/deck.gl\/#\/), popular opensource published by Uber. Why don\u2019t we get a try ? \ud83d\ude09\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_28-300x196.jpg?resize=391%2C255)\n\nI tried installing Deck.gl, MapBox, implement some code, take a deep understand in GLSL. Tried to visualize VisaH1B static, Flight record, Taxi route. All datasets are available on Kaggle which under CC license.\n\nAnd now, it\u2019s time to write blog for sharing my experiment.\n\nHope you enjoy it :]\n\n\n## 1. Data Visualization\n\nData Visualization is quite fun. Perhaps when you see the term \u201cData Visualization\u201d, you might remember to ugly Microsoft Excel\u2019s spreadsheet chart. In real world, there are many situations we need to visualize the data.\n\n- If you\u2019re student, before going to big final semester presentation, you would like to be stand out. What would you do?\n- If you\u2019re founder, I believe you had one time that shows off your growth user over the world to potential investors, and you want\u00a0to make impression\u00a0on the first sight. What do you do?\n\nI believe we\u2019re using the same chart like below. It\u2019s so common, trivial.\n\n![](https:\/\/i0.wp.com\/www.excel-easy.com\/data-analysis\/images\/charts\/column-chart.png?w=850)\n\nThere are millions of people did that. If you would like to be stand out. Please don\u2019t do the same way with hundred people did before. \ud83d\ude0e\n\n#### Brave world\n\n![](https:\/\/i2.wp.com\/s-media-cache-ak0.pinimg.com\/originals\/22\/32\/22\/22322282dac474a138666b7e79cd5bd1.jpg?resize=431%2C310&ssl=1)![](https:\/\/i0.wp.com\/data-ink.com\/wp-content\/uploads\/2016\/12\/Cancer-Deaths-by-County.png?resize=386%2C319)\n\nAs you can see, data visualization is really catch-eye.\n\n### Props\n\n- It can be accessed quickly by a wider audience.\n- It conveys a lot of information in a small space.\n- It makes your report more visually appealing.\n\n### Cons\n\n- You must put more **effort**.\n\nIt\u2019s boring if we keep doing every time. I would be better if we put myself into a dangerous zone, try somethings new, push to boundary.\n\n\n## 2. Roadmap\n\nThis experiment will show you how to visualize million of records in world-map.\n\nYou will understand\n\n- How to use vector-based Mapbox SDK, and able to custom map with own style.\n- How to use Deck.gl, a WebGL-powerful framework for visual exploratory data analysis of large datasets.\n- Visualize the location of 1 million trees in New York city with ScreenGridLayer\n- Experiment on Heatmap\n- Visualize the flight record data by using\u00a0FlightLayer\n- Combination: GLSL shaders and Deck.gl to achieve dynamic-map.\n\nHere are screenshots.\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_1-300x171.jpg?resize=800%2C456)**683.788** trees in NY by ScreenGridLayer, run smoothly at 60FPS\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_2-300x172.jpg?resize=799%2C458)\n\nThe square,\u00a0brighter\u00a0green colors, means more trees round up.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_4-300x172.jpg?resize=800%2C459)\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_3-300x173.jpg?resize=801%2C462)\n\nHeat-map for better look\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/Data-visualization-thumbnail-300x165.jpeg?resize=790%2C434)\n\nFlight record data with Flightlayer (Static)\n\n[su_youtube url=\u201dhttps:\/\/youtu.be\/kgcJ0rftIUA?t=1m6s\u201d]\n\nDynamic visualization with GLSL shader\n\n\n## 3. Technologies\n\n### 3.1 React-redux\n\nBefore writing actually code. It\u2019s better if I cover and mention all technologies we\u2019re using.\n\n[**IMPORTANT**] I assume you\u2019ve already had experience on [React](https:\/\/facebook.github.io\/react\/) and [Redux](https:\/\/github.com\/reactjs\/redux). If not, don\u2019t be shy to follow tutorials on google.\n\n### 3.2 MapBox\n\n[Mapbox](https:\/\/www.mapbox.com) is a large provider of custom online maps for websites such as Foursquare, Pinterest, Evernote, the Financial Times, The Weather Channel and Uber Technologies.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_5-300x96.jpg?resize=684%2C219)\n\nMapbox offers a million way to custom your map. Fit with many contextures: Drones, Finance Government, Logistics Media Natural resources, Outdoors, Real estate, Security, Transportation, Travel, \u2026 Each kind of maps have difference look\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_6-300x170.jpg?resize=802%2C454)\n\nMapbox also provides amazing studio, then you can create owner map as well as.\n\nInstead of using mapbox.js officially, I intend to use [react-map-gl](https:\/\/github.com\/uber\/react-map-gl). It\u2019s React friendly API wrapper around MapboxGL JS. It\u2019s one of popular library was published by Uber recently with 2.2k \u2b50\ufe0f.\n\n### 3.3 Deck.gl\n\nBeside react-map-gl. Uber also publish\u00a0[deck.gl](https:\/\/uber.github.io\/deck.gl)\u00a0tool.\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_7-300x300.jpg?resize=512%2C512)\n\nThere are 3 highlight factors you might consider.\n\n1. Organize the complex data by following Layered Approach. Makes it easy to package and share new visualizations as reusable layers.\n2. High-Precision computations in the GPU:\u00a0By emulating 64-bit floating point computations in the GPU. Deck.gl renders datasets with unparalleled accuracy and performance.\n3. React and Mapbox GL Integrations: Great match with React, supporting efficient WebGL rendering under the Reactive programming paradigm.\n\n[Deck.gl](https:\/\/github.com\/uber\/deck.gl) deserves more than 1.8k \u2b50\ufe0f on\u00a0[Github](https:\/\/github.com\/uber\/deck.gl)\u00a0\ud83d\udcaf\n\n### 3.4 Kaggle\n\nIt\u2019s incompliance if we don\u2019t have much data for visualization. [Kaggle](https:\/\/www.kaggle.com) is the best place to get huge data. They offer open datasets on everything from government, health, and science to popular games and dating trends. It\u2019s really valuable treasure for data mining or training model for deep learning machine \ud83e\udd18\n\nAs part of this blog. I used [2015 Tree Census in NewYork city](https:\/\/www.kaggle.com\/nycparks\/tree-census) and \u00a0[ 2015 Flight Delay and Cancellation](https:\/\/www.kaggle.com\/usdot\/flight-delays). All of them are released under\u00a0[CC0: Public Domain License](https:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/). So you can read\/write, modify, distribute the data whatever you like. It\u2019s cool \ud83d\udc4d\n\n### 3.5 GLSL Shader\n\nI also cover a bit about GLSL Shader. If you\u2019re learned OpenGL, you must be familiar with this term. I will keep it simple as possible because I don\u2019t have time to explain deeper.\n\nBasically, GLSL has a syntax similar to C, which is executed directly by the graphics pipeline. There are two types \u2014 **Vertex Shaders** transforms shape positions to real 3D drawing coordinates. And **Fragment Shaders**\u00a0helps to render colors and other attributes.\n\nBy using GLSL, we can achieve high performance with millions\u00a0of data on map \ud83d\ude0e\n\n\n## 4. Time for coding\n\n### 4.1 Stater kit\n\nFor saving time, I won\u2019t show you how to install Node, deck.gl or react-map-gl. It\u2019s waste of time. If you\u2019re patient, feels free to start new project by yourself. I recommend cloning\u00a0[react-redux-starter-kit](https:\/\/github.com\/davezuko\/react-redux-starter-kit)\u00a0project. It includes React, Redux, React-router too as basic starter kit.\n\nTo begin, please [download starter pack](https:\/\/github.com\/NghiaTranUIT\/data-visualization-deck-gl\/tree\/starter-pack-updated) which I prepared. It contains base React-Redux, LayerInfo, MapSelection, react-map-gl, tween, luml.gl, as well as data from Kaggle.\u00a0\u2026 all you need are ready \ud83e\udd18\n\nAfter clone starter-pack. Please make sure you run\n\nnpm install npm start\n\nIt opens *localhost* automatically, and notice the control at left-bottom. It\u2019s all we do now \ud83d\udc4d\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_17-300x206.jpg?resize=387%2C266)\n\nBefore going through the tutorial, we should take a look at project structure in detail.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_18-134x300.jpg?resize=384%2C860)\n\nWe have project structure here.\n\n- **.\/info:** LayerInfo layer\n- **.\/modules:** Include action.js and reducer.js of redux\n- **overlays:** flight_overlay.js, tree_heatmap_overlay, tree_screengrid_layer, taxi_overlay.js. All of them are layer which we implement.\n- **main.js:**\u00a0The logic of this example. We will fill render() func to show map and overlay layer off. \ud83d\udc4d\n- **map-selection**: MapSelection control.\n\n#### constants.js\n\nDefine constants, such as MapBoxAccessToken, data source name.\n\nexport const MapMode = { NONE: 'NONE', TREES: 'TREES', TREES_HEATMAP: 'TREES_HEATMAP', FLIGHT: 'FLIGHT', TAXI: 'TAXI' } export const MAPBOX_ACCESS_TOKEN = '<insert-your-mapbox-public-token>' export const FLIGHT_DATA = '.\/example\/data\/flight-data.csv' export const AIRPORT_DATA = '.\/example\/data\/airports.csv' export const TREE_DATA = '.\/example\/data\/tree_census.csv' export const TAXI_TRIP_DATA = '.\/example\/data\/taxi-trip.json'\n\n#### INITIAL_STATE\n\nconst INITIAL_STATE = { mapViewState: { latitude: NY_LOCATION.latitude, longitude: NY_LOCATION.longitude, zoom: 11.5, pitch: 0, bearing: 0 }, flightArcs: null, airports: null, trees: null, taxi: null, mapMode: MapMode.NONE, };\n\nINITIAL_STATE defines the main variables. It\u2019s self-explanatory. When dealing with map, we usually encounter bunch of map context, such as Latitude, longitude, zoom, pitch, bearing. If you don\u2019t know one of them. Please do short search on google. \ud83d\ude09\n\nIn addition, flightArcs, airports, tress, text and mapMode are main variables which we\u2019re storing data from CSV or JSON later.\n\n#### render()\n\nNavigate to bottom of main.js, you will see the render function.\n\nrender() { const { flightArcs, trees, mapMode, airports } = this.props const layerInfoProps = { numberFlights: this._getLength(flightArcs), numberTrees: this._getLength(trees), numberAirport: this._getLength(airports), mode: mapMode, } const mapSelectionProps = { mapMode: this.props.mapMode, selectModeFunc: this._handleSelectMode, stopTimerFunc: this._handleStopTimer, } return ( <div> { this._renderMap() } <div className='overlay-contol-container'> <MapSelection {...mapSelectionProps}\/> <LayerInfo {...layerInfoProps}\/> <\/div> <\/div> ) },\n\nrender() is simply render the map as well as MapSelection and LayerInfo.\n\n#### To be implemented\n\n_renderMap() { \/\/ Implement here return null },\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_19-300x159.jpg?resize=374%2C198)\n\nHere are 4 files we need to write real code. Please open each file, and look at temporary functions which I prepared for you.\n\n\/* Flight layer *\/ export function _renderFlightOverlay(param) { \/\/ Implement here return null } function _renderFlightLayer(param) { return [] } \/* Tree layer *\/ export function _renderTreesHeatMapOverlay(param) { \/\/ Implement here return null } export function _renderTreesOverlay(param) { \/\/ Implement here return null } \/* Tree heatmap layer *\/ function _renderTreeLayer(props) { return [] }\n\nDon\u2019t worry about this too much right now. I\u2019ve covered all in next chapter \ud83d\udc4d\n\n### 4.2 Data Source\u2019s structure\n\n#### Trees in New York\n\nYou can download [tree_new_york.csv](https:\/\/www.kaggle.com\/nycparks\/tree-census)**\u00a0**source from [Kaggle](https:\/\/www.kaggle.com\/nycparks\/tree-census).\n\ntree_id,block_id,borough,latitude,longitude,latin_name,common_name,location,status,health,tree_diameter,stump_diameter,root_stone,root_grate,root_other,trunk_wire,trunk_light,trunk_other,branch_light,branch_shoe,branch_other 277269,100002,Manhattan,40.70237278,-74.01143532,Metasequoia glyptostroboides,Dawn Redwood,On Curb,Alive,Fair,1,0,No,No,No,No,No,No,No,No,No\n\nThe size is around 80Mb, contains ~700.000 records. The structure of **tree_new_york.csv**\u00a0is really simple. But today, we should focus on **latitude** and **longitude**\n\n#### Flight Delay and Cancellation\n\nDownload [flight_record.csv](https:\/\/www.kaggle.com\/usdot\/flight-delays)\u00a0and [airport.csv](https:\/\/www.kaggle.com\/usdot\/flight-delays) from Kaggle too. It\u2019s largest file, around 192Mb zipped, 600Mb after extraction.\n\nIATA_CODE,AIRPORT,CITY,STATE,COUNTRY,LATITUDE,LONGITUDE ABE,Lehigh Valley International Airport,Allentown,PA,USA,40.65236,-75.44040\n\nYEAR,MONTH,DAY,DAY_OF_WEEK,AIRLINE,FLIGHT_NUMBER,TAIL_NUMBER,ORIGIN_AIRPORT,DESTINATION_AIRPORT,SCHEDULED_DEPARTURE,DEPARTURE_TIME,DEPARTURE_DELAY,TAXI_OUT,WHEELS_OFF,SCHEDULED_TIME,ELAPSED_TIME,AIR_TIME,DISTANCE,WHEELS_ON,TAXI_IN,SCHEDULED_ARRIVAL,ARRIVAL_TIME,ARRIVAL_DELAY,DIVERTED,CANCELLED,CANCELLATION_REASON,AIR_SYSTEM_DELAY,SECURITY_DELAY,AIRLINE_DELAY,LATE_AIRCRAFT_DELAY,WEATHER_DELAY 2015,1,1,4,AS,98,N407AS,ANC,SEA,0005,2354,-11,21,0015,205,194,169,1448,0404,4,0430,0408,-22,0,0,,,,,,\n\nIn flight_record.csv, they didn\u2019t include lat\/long. So we need to write helper code to map departure\/arrival airport\u2019s coordination.\n\nThe valuable is departure_delay, distance, air_time field. It brings to us an important point. Useful for calculating the color of flight route (depend on how long departure_delay), velocity, and airplane position in the sky real-time (we do by GLSL later).\n\nMaybe take a second to mull that over. By understanding the data structure, we could process and manipulate the data easier.\n\n![](https:\/\/i0.wp.com\/koenig-media.raywenderlich.com\/uploads\/2016\/03\/iThinkIveGotThis.png?resize=557%2C265&ssl=1)\n\n### 4.3 Mapbox\n\nThe first goal we should achieve is figured out the way to present the map. According to my mention before, we use MapBox through this tutorial. Please navigate to **_renderMap()** in main.js, and implement below code\n\n_renderMap() { const { mapViewState, mapMode } = this.props const { width, height } = this.state const isActiveOverlay = mapMode !== MapMode.NONE return ( <MapboxGLMap mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} width={width} height={height} mapStyle='mapbox:\/\/styles\/mapbox\/dark-v9' perspectiveEnabled { ...mapViewState } onChangeViewport={this._handleViewportChanged}> {isActiveOverlay && this._renderVisualizationOverlay()} <FPSStats isActive\/> <\/MapboxGLMap> ); },\n\nIt\u2019s really straight-forward, we pass width, height, mapStyle, and mapViewState into **<MapboxGLMap>**. You can get further info at [mapbox\u2019s documentations](https:\/\/www.mapbox.com\/mapbox-gl-js\/api\/). The important point is isActiveOverlay. It will render the VisualizationOverlay if we choice any mode from MapSelection.\n\n_renderVisualizationOverlay() { const { flightArcs, airports, mapMode, trees } = this.props \/\/ wait until data is ready before rendering if (flightArcs === null|| airports === null || trees === null) { return [] } const param = { props: this.props, state: this.state, onWebGLInitialized: this._onWebGLInitialized, effects: this._effects, } return ( <div> { mapMode === MapMode.TREES && _renderTreesOverlay(param) } { mapMode === MapMode.TREES_HEATMAP && _renderTreesHeatMapOverlay(param) } { mapMode === MapMode.FLIGHT && _renderFlightOverlay(param) } { mapMode === MapMode.TAXI && _renderTaxiOverlay(param) } <\/div> ) },\n\nI wrote it for you. It automatic switches and render individually overlay depend on mapMode we\u2019re selecting.\n\n**_handleViewportChanged** will be triggered whenever the viewport changed, and update the viewState as well as rendering the overlay again. If we don\u2019t re-render overlay layer with new state of map, the layers are still same old state. It\u2019s incorrect behavior.\n\n_handleViewportChanged(mapViewState) { if (mapViewState.pitch > 60) { mapViewState.pitch = 60 } this.props.dispatch(updateMap(mapViewState)) },\n\n#### Mapbox Public Token\n\nDon\u2019t forget to get your Mapbox Public Token\u00a0from [Mapbox\u2019s Dashboard](https:\/\/www.mapbox.com\/studio\/)\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_11-300x171.jpg?resize=800%2C456)\n\nFeels free to spent 5 mins for experiment [Mapbox\u2019s map editor](https:\/\/www.mapbox.com\/studio\/styles\/). It\u2019s amazing tool, allow you to edit\/modify the layout of map depends on your purpose.\n\n### 4.4 Visualize trees in New York\n\n#### Parsing tree_new_york.csv\n\n_loadData() { \/\/ Load Tree this._loadCsvFile(TREE_DATA, (data)=>{this.props.dispatch(loadTrees(data))}) },\n\n_loadCsvFile is helper func I wrote for you. It reads csv file and parsing into array. Then dispatching **loadTrees** action to ReduxStore\n\ncase 'LOAD_TREES': { let trees = action.data.map((item)=>{ const lat = item.latitude const long = item.longitude return { position: [Number(long), Number(lat)] } }) return {...state, trees} }\n\nThe purpose of our tutorial is representing the distribution of tree. So we ignore unnecessary fields, we only care long\/lat. It\u2019s why I .map() to transform items into position object. Then returning the result into mainState. It\u2019s not hard If you\u2019re familiar with React+Redux.\n\n#### TreeScreenGridOverlay.js\n\nScreenGridLayer is built-in Deck.gl. It\u2019s similar with Heatmap.\u00a0The ScreenGridLayer takes in an array of latitude and longitude coordinate points, aggregates them into histogram bins and renders as a grid.\n\nPlease navigate to **tree_screengrid_overlay.js** in **overlay** folder.\n\nexport function _renderTreesOverlay(param) { const { mapViewState, trees } = param.props const { width, height } = param.state return ( <DeckGL id=\"default-deckgl-overlay\" width={width} height={height} debug {...mapViewState} onWebGLInitialized={param.onWebGLInitialized} layers={_renderTreeLayer(param.props)} effects={param.effects} \/> ) }\n\nIt\u2019s perfect time to implement **_renderTreesOverlay()** func. Initialize DeckGL with specific width\/height. The layer\u2019s parameter is passed from **_renderTreeLayer()**. Be care here. We return ScreenGridLayer associate with trees model.\n\nfunction _renderTreeLayer(props) { const { trees } = props return [ new ScreenGridLayer({ id: 'gird', data: trees, minColor: [0, 0, 0, 0], unitWidth: 10, unitHeight: 10, }) ]; }\n\n#### Results\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_12-300x172.jpg?resize=800%2C459)\n\nRun on terminal.\n\nyarn start\n\nThe result works like a charm. Despite 683.788 trees, Deck.gl still handles perfectly, around 40-60 FPS.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_14-300x171.jpg?resize=768%2C438)\n\nThe aggregation is done in screen space, so the data prop needs to be reaggregated by the layer whenever the map is zoomed or panned. This means that this layer is best used with small data set, however, the visuals when used with the right data set can be quite effective.\n\nThe frame will be dropped gradually when zooming in\/out, but it\u2019s acceptable result \ud83d\udcaf\n\nScreenGirdLayer is perfect choose if you would like to visualize the distribution of user\/object on a map. \ud83e\udd18\n\n### 4.5 Heat-map\n\n[Heatmap](https:\/\/github.com\/vicapow\/react-map-gl-heatmap-overlay) is a graphical representation of data where the individual values contained in a\u00a0[matrix](https:\/\/en.wikipedia.org\/wiki\/Matrix_(mathematics) \"Matrix (mathematics)\")\u00a0are represented as colors.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_15-300x137.jpg?resize=795%2C363)\n\nIt\u2019s extremely useful to present the large data over the world.\u00a0There are many different\u00a0[color schemes](https:\/\/en.wikipedia.org\/wiki\/Color_scheme \"Color scheme\")\u00a0that can be used to illustrate the heatmap, with perceptual advantages and disadvantages for each.\n\nIt\u2019s time to bring heatmap. Come back at _renderTreesHeatMapOverlay in **tree_heatmap_overlay.js** and put it down.\n\nexport function _renderTreesHeatMapOverlay(param) { const { mapViewState, trees } = param.props const { width, height } = param.state return ( <HeatmapOverlay locations={trees} {...mapViewState} width={width} height={height} lngLatAccessor={(tree) => [tree['position'][0], tree['position'][1]]} \/> ) }\n\n**lngLatAccessor**\u00a0: Data accessors can be provided if your data doesn\u2019t fit the expected form`{longitude, latitude}`.\n\n![](https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_16-300x172.jpg?resize=800%2C459)\n\nI admit react-map-gl-heat overlay handled performance for 700.00 is\u00a0worse.\n\ngradientColors={Immutable.List(['blue', 'red'])}\n\nReact-map-gl-heat also provides gradientColors, you can customize your look easier. [ColorBrewer](http:\/\/colorbrewer2.org\/#type=sequential&scheme=OrRd&n=3) offer GUI to pick color-scheme.\n\n### \u00a04.6 Conclusion\n\nIn section 4, I mention two of layers which built-in Deck.gl. They also have\u00a0Arc Layer,\u00a0Choropleth Layer,\u00a0Line Layer,\u00a0Scatterplot Layer. Trying all of layers is better idea \ud83d\udc7b\n\n\n## 5. FlightLayer\n\n### 5.1 Overall\n\nIt\u2019s time for the exciting part. We\u2019re going to extend deck.gl\u2019s Layer, customize it for representing Flight Route. Because of deck.gl don\u2019t offer FlightLayer, so the one way is to implement it by our hand.\n\nWe\u2019re dealing with GLSL shader, please confirmed you\u2019re installed\u00a0**glslify** correctly. If now, please run below code.\n\nnpm install --save glslify\n\n### 5.2 Extend deck.gl\u2019s Layer.\n\nFlightLayer is a curve from **sourcePoint** to **tartgetPoint**. As you can see the screenshot below, it\u2019s actually [parabola](https:\/\/en.wikipedia.org\/wiki\/Parabola) we\u2019ve learn in Secondary school right \ud83d\ude09\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_20-300x207.jpg?resize=801%2C553)\n\nLook closer. I admit it doesn\u2019t look like flight route. Because the flight routes are extremely complexity in real-life. We assume it\u2019s simply parabola.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_21-300x227.jpg?resize=800%2C606)\n\nSo the FlightLayer takes 3 parameters: **sourcePosition**, **targetPosition** as well as a **color**.\n\n### 5.3 Processing flight record data\n\nBefore visualizing, we need to process the flight data to fit with our requirement.\n\nLoad flight-data.csv, airport.csv\n\n\/\/ Load Flight Data this._loadCsvFile(AIRPORT_DATA, (data)=>{ this.props.dispatch(loadAirport(data)) this._loadCsvFile(FLIGHT_DATA, (data)=>{this.props.dispatch(loadFlightDataPoints(data))}) });\n\nin reducer\n\ncase 'LOAD_FLIGHT_POINT': { const flightArcs = action.points.map((item)=>{ const originalAirport = item.ORIGIN_AIRPORT const destinationAirport = item.DESTINATION_AIRPORT return { sourcePosition: state.airports[originalAirport], targetPosition: state.airports[destinationAirport], } }) return {...state, flightArcs} } case 'LOAD_AIRPORT': { let airports = {} action.airports.forEach((item, index)=>{ airports[item.IATA_CODE] = [Number(item.LONGITUDE), Number(item.LATITUDE)] }) return {...state, airports} }\n\nPlease take a notice at **LOAD_AIRPORT** action, I convert airport array to hash-map. Because time complexity for searching key in\u00a0generally is O(1). It\u2019s really useful for **LOAD_FLIGHT_POINT** action, when mapping coordinate for original\/destination airport.\n\n### 5.4 Creating custom layer: Flight layer\n\n![](https:\/\/i1.wp.com\/media.giphy.com\/media\/d3mlE7uhX8KFgEmY\/source.gif?w=850&ssl=1)\n\nTime for hacking your brain \ud83d\ude09\n\n#### Layer life-cycle\n\nBelow is graph I summarize layer\u2019s lifecycle.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_22-300x193.jpg?resize=600%2C386)\n\nFully documentation [here](https:\/\/uber.github.io\/deck.gl\/#\/documentation\/creating-custom-layers\/layer-lifecycle)\u00a0. Because of we extend from Layer, so we only override Layer.initializeState(), Layer.draw({uniform}) and\u00a0Layer.updateState() (optional).\n\n- **Layer.initializeState()**: This method is called only once for each layer (as defined by the\u00a0id\u00a0property), to set up the initial state for that layer. deck.gl will already have created the\u00a0state\u00a0object at this time, and added the\u00a0gl\u00a0context and the\u00a0attributeManager\u00a0context.\n- **Layer.draw({uniform})**:\u00a0Allows a layer to \u201crender\u201d or generate one or more deck.gl Layers passing in its own state as props. The layers will be rendered after the rendering layer, but before the next layer in the list. renderLayers will be called on the new layers, allowing the decomposition of the drawing of a complex data set into \u201cprimitive\u201d layers.\n- **Layer.updateState()**:\u00a0Called when a new layer has been matched with a layer from the previous render cycle (resulting in new props being passed to that layer), or when context has changed and layers are about to be drawn.\n\n#### Implement FlightLayer\n\nPlease navigate to** ..\/scr\/layers\/core\/flight-data\/flight-data.js.\u00a0**I prepared all for saving time \ud83e\udd17\n\nin flight-data.js\n\nupdateState({props, changeFlags: {dataChanged}}) { \/\/ Implement here } initializeState() { \/\/ Implement here } draw({uniforms}) { \/\/ Implement here } _createModel(gl) { \/\/ Implement here } calculateInstanceSourcePositions(attribute) { \/\/ Implement here } calculateInstanceTargetPositions(attribute) { \/\/ Implement here } calculateInstanceSourceColors(attribute) { \/\/ Implement here } calculateInstanceTargetColors(attribute) { \/\/ Implement here } getShaders() { return { vs: readFileSync(join(__dirname, '.\/flight-layer-vertex.glsl'), 'utf8'), fs: readFileSync(join(__dirname, '.\/flight-layer-fragment.glsl'), 'utf8') }; }\n\nAll we need are here.\n\n#### Create gl model\n\n_createModel(gl) { let positions = []; const NUM_SEGMENTS = 50; for (let i = 0; i < NUM_SEGMENTS; i++) { positions = [...positions, i, i, i]; } return new Model({ gl, ...assembleShaders(gl, this.getShaders()), geometry: new Geometry({ drawMode: GL.LINE_STRIP, positions: new Float32Array(positions) }), isInstanced: true }); }\n\n**NUM_SEGMENTS** is a number of small segment we draw parabola. The reason is, In OpenGL world, we can\u2019t draw arc line, we need to draw each segment and line it together. As more as\u00a0**NUM_SEGMENTS** is, the flight route is more smoothly.\n\nFinally, we create Model and Geometry internally, **GL.LINE_STIP** and position as input agreement.\n\npositions = [...positions, i, i, i];\n\nWhat\u2019s it? It\u2019s placeholder array for representing index of segment. We passed <i> 3 times because we store vec3. It\u2019s using in **vertex.glsl** to determine which index of segments \ud83d\udc4d\n\nDon\u2019t forget to take a look at **this.getShader()**. I wrote for you. It\u2019s simply to read shader files in same directory.\n\ngetShaders() { return { vs: readFileSync(join(__dirname, '.\/flight-layer-vertex.glsl'), 'utf8'), fs: readFileSync(join(__dirname, '.\/flight-layer-fragment.glsl'), 'utf8') }; }\n\n#### initializeState()\n\ninitializeState() is one method you must implement to create OpenGL resource you need to render layer. Deck.gl looks for the variable **model** on your state, and if set expects it to be an instance of a [luma.gl] Model class.\n\nSo we passed model we created before to this.state. According to [Deck.gl\u2019s attributeManager recommendation](https:\/\/uber.github.io\/deck.gl\/#\/documentation\/creating-custom-layers\/attribute-management), we should define the attribute for vertex.glsl file.\n\nWe defined\n\n- instanceSourcePositions, instanceSourcePositions is **[vector3]** as x,y,z.\n- instanceSourceColors,\u00a0instanceTargetColors is **[vector4]** as r,g,b,a and unsigned_byte.\n\nThe complete code is below.\n\ninitializeState() { const {gl} = this.context; this.setState({model: this._createModel(gl)}); const {attributeManager} = this.state; attributeManager.addInstanced({ instanceSourcePositions: {size: 3, update: this.calculateInstanceSourcePositions}, instanceTargetPositions: {size: 3, update: this.calculateInstanceTargetPositions}, instanceSourceColors: { type: GL.UNSIGNED_BYTE, size: 4, update: this.calculateInstanceSourceColors }, instanceTargetColors: { type: GL.UNSIGNED_BYTE, size: 4, update: this.calculateInstanceTargetColors } }); }\n\n#### Calculate position vec3\n\nIt\u2019s time for implementing helper function to calculate source\/target position and color as well.\n\ncalculateInstanceSourcePositions(attribute) { const {data, getSourcePosition, getTargetPosition} = this.props; const {value, size} = attribute; let i = 0; for (const object of data) { const sourcePosition = getSourcePosition(object); value[i + 0] = sourcePosition[0]; value[i + 1] = sourcePosition[1]; value[i + 2] = 0; i += size; } } calculateInstanceTargetPositions(attribute) { const {data, getSourcePosition, getTargetPosition} = this.props; const {value, size} = attribute; let i = 0; for (const object of data) { const targetPosition = getTargetPosition(object); value[i + 0] = targetPosition[0]; value[i + 1] = targetPosition[1]; value[i + 2] = 0; i += size; } }\n\nIt\u2019s not easy to understand if you\u2019re not familiar WebGL or OpenGL in general. The main idea is to create array for each attribute (in vertex shader file)\n\nconst sourcePosition = getSourcePosition(object); value[i + 0] = sourcePosition[0]; value[i + 1] = sourcePosition[1]; value[i + 2] = 0;\n\nWe get source position. get longitude and latitude which stand for\u00a0sourcePosition[0] and\u00a0sourcePosition[1], then passing to value array. Please z = 0, because it\u2019s on earth ground.\n\nIt\u2019s hacky solution because we can\u2019t pass our object from javascript directly into vertex.glsl. The common approach is using array to pass long\/lat indirectly and processing those data later. Actually, we could pass struct, but at this time, I won\u2019t mention it.\n\n#### Calculate colors vec4\n\ncalculateInstanceSourceColors(attribute) { const {data, getSourceColor} = this.props; const {value, size} = attribute; let i = 0; for (const object of data) { const color = getSourceColor(object) || DEFAULT_COLOR; value[i + 0] = color[0]; value[i + 1] = color[1]; value[i + 2] = color[2]; value[i + 3] = isNaN(color[3]) ? DEFAULT_COLOR[3] : color[3]; i += size; } } calculateInstanceTargetColors(attribute) { const {data, getTargetColor} = this.props; const {value, size} = attribute; let i = 0; for (const object of data) { const color = getTargetColor(object) || DEFAULT_COLOR; value[i + 0] = color[0]; value[i + 1] = color[1]; value[i + 2] = color[2]; value[i + 3] = isNaN(color[3]) ? DEFAULT_COLOR[3] : color[3]; i += size; } }\n\nWe do same philosophy with color as well.\n\n#### Layer.draw()\n\ndraw({uniforms}) { const {gl} = this.context; const {trailLength, currentTime, timestamp} = this.props; console.log(currentTime); this.state.model.render(Object.assign({}, uniforms, { trailLength, currentTime, timestamp })); }\n\nDraw layer and passing our data uniform into shader file is self-explanatory. We also pass trailLength, currentTime, timestamp as uniform too. We will use it later, for animation \ud83e\udd17\n\n### 5.5\u00a0GLSL (OpenGL Shading Language)\n\n![](https:\/\/i0.wp.com\/graytotebox.com\/wp-content\/uploads\/2014\/02\/braceyourself.jpg?resize=376%2C282)\n\nIf you don\u2019t have basic knowledge about GLSL, feels free to skip this section.\n\nGLSLis a high-level shading language with a syntax based on the C programming language. Give developers more direct control of the graphics pipeline without having to use ARB assembly language or hardware-specific languages.\n\n#### flight-layer-vertex.glsl\n\n#define SHADER_NAME flight-layer-vertex-shader const float N = 49.0; attribute vec3 positions; attribute vec4 instanceSourceColors; attribute vec4 instanceTargetColors; attribute vec3 instanceSourcePositions; attribute vec3 instanceTargetPositions; attribute vec3 instancePickingColors; uniform float opacity; uniform float renderPickingBuffer; uniform float currentTime; uniform float trailLength; uniform float timestamp; varying float vTime; varying vec4 vColor; float paraboloid(vec2 source, vec2 target, float ratio) { vec2 x = mix(source, target, ratio); vec2 center = mix(source, target, 0.5); float dSourceCenter = distance(source, center); float dXCenter = distance(x, center); return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter); } void main(void) { \/\/ 1 vec2 source = preproject(instanceSourcePositions.xy); vec2 target = preproject(instanceTargetPositions.xy); \/\/ 2 float segmentRatio = smoothstep(0.0, 1.0, positions.x \/ N); \/\/ 3 float vertex_height = paraboloid(source, target, segmentRatio); if (vertex_height < 0.0) vertex_height = 0.0; vec3 p = vec3( \/\/ xy: linear interpolation of source & target mix(source, target, segmentRatio), \/\/ z: paraboloid interpolate of source & target sqrt(vertex_height) ); \/\/ 4 \/\/ the magic de-flickering factor float _timestamp = (positions.x * 15.0) \/ 2000.0; vec4 shift = vec4(0., 0., mod(_timestamp, trailLength) * 1e-4, 0.); gl_Position = project(vec4(p, 1.0)) + shift; \/\/ Color vColor = mix(instanceSourceColors, instanceTargetColors, segmentRatio) \/ 255.; \/\/ 5 vTime = 1.0 - (currentTime - _timestamp) \/ trailLength; }\n\n1. [preproject](https:\/\/uber.github.io\/deck.gl\/#\/documentation\/advanced-topics\/coordinate-systems)**:\u00a0**All positions must be passed through the\u00a0preproject\u00a0function (available both in JavaScript and GLSL) to convert non-linear web-mercator coordinates to linear Mercator \u201cworld\u201d or \u201cpixel\u201d coordinates, that can be passed to the projection matrix. At this time, we convert long\/lat coordinate to pixel in our webview.\n2. [smoothstep](https:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/gl4\/html\/smoothstep.xhtml)\u00a0is built-in method in OpenGL.\u00a0perform Hermite interpolation between two values. The segmentRatio depends on index of segment. So it\u2019s perfect time to get value from **positions** we created before.\n3. We implement paraboloid to calculate the height of parabola.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_25-300x207.jpg?resize=800%2C552)\n\nIllustration each segment in parabola curve\n\n\u00a0 \u00a0 4. Calculate the shift depend on currentTime, then passing to gl_Position.\n\n5. vTime is varying variable will pass to fragment file. We calculate the time has been passed.\n\n#### glLineWidth problem\n\nDo you notice the width of flightLayer is too slim? I tried to put **gl.widthLine(100)** in draw() func. It didn\u2019t work unfortunately. It takes me few hours to understand why **gl.lineWidth** didn\u2019t work. Here is [problem](https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/WebGLRenderingContext\/lineWidth).\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_23-300x80.jpg?resize=521%2C139)\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_24-300x91.jpg?resize=498%2C151)\n\nWe have backup plan to implement the width line, by drawing a rectangle with height is width line. I won\u2019t cover it.\n\n#### flight-layer-fragment.glsl\n\nAfter finished vertex.glsh, we should move to fragment. The fragment is essential file, the main purpose is handling all color mapping for each vertex.\n\n#define SHADER_NAME flight-layer-fragment-shader #ifdef GL_ES precision highp float; #endif varying float vTime; varying vec4 vColor; void main(void) { if (vTime > 1.0 || vTime < 0.0) { discard; } gl_FragColor = vec4(vColor.rgb, vColor.a * vTime); }\n\nPlease notice, vTime is passed from vertex.glsl. At this time, we will turn it by mutipling with color\u2019s alpha.\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_27-300x264.jpg?resize=576%2C507)\n\nLook cool right? \ud83d\ude0d\n\n#### Tween timer\n\nIf you try running example at this time, you only see the fully parabola over the map. Now we\u2019re adding timer to achieve animation. Navigate to startTweenTimer() in main.js\n\nstartTweenTimer() { this._tween = new TWEEN.Tween({time: 0}) .to({time: 3600}, 120000) .onUpdate((data)=>{ this.setState({ time: data }) }) .repeat(Infinity).start() this.animate() }, animate(time) { window.requestAnimationFrame(this.animate) TWEEN.update(); },\n\nthen\n\ncomponentWillReceiveProps: function(nextProps) { const { mapMode } = this.props const { isStartedTimer } = this.state if ((nextProps.mapMode === MapMode.FLIGHT || nextProps.mapMode === MapMode.TAXI ) && nextProps.mapMode !== mapMode && isStartedTimer === false) { this.startTweenTimer() this.setState({ isStartedTimer: true }) } },\n\nIt triggers tweenTimer automatically whenever we select new mapMode. I also have if condition to prevent duplicated fired.\n\n#### One more thing\n\nNotify attributeManager in flight-layer.js to invalidate all vertex, and re-render with new currentTime attribute.\n\nupdateState({props, changeFlags: {dataChanged}}) { if (dataChanged) { this.state.attributeManager.invalidateAll(); } }\n\n### 5.6 Finally\n\n![](https:\/\/i0.wp.com\/img.memesuper.com\/21b10a8a10c5427cec63e3ed65d9d77e_leonardo-dicaprio-cheers-meme-memes-on-success_600-400.jpeg?w=850&ssl=1)\n\nTime for going back to terminal and type holy spell.\n\n\/\/ To make sure you've installed packages correctly yarn install yarn start\n\n[su_youtube url=\u201dhttps:\/\/youtu.be\/kgcJ0rftIUA\u201d]\n\nFeels free to switch between each map mode. I belive you will be impressed what we\u2019ve done \ud83d\udcaf\n\n\n## 7. Source code\n\nI published all source in my github account. Feels free to clone and create contribution if you have any great idea \ud83d\ude09\n\n[su_button url=\u201dhttps:\/\/github.com\/NghiaTranUIT\/data-visualization-deck-gl\u201d target=\u201dblank\u201d style=\u201dflat\u201d size=\u201d6\u2033 icon=\u201dicon: github-alt\u201d]Data Visualization \u2013 Github[\/su_button]\n\n\n## 7. What things are we forgetting?\n\nIf you have bright eyes, you might notice that all flights were flew and land at destination airport at the same time, whatever the distance of airport is far away or near. It looks unreal, right? \ud83e\udd14\n\nYeah, I did it on my purpose, it\u2019s time for your experiment, your exercise \ud83e\udd17\n\nGiven flight_data.csv with air_time field. Assumption the velecity of airplain is 999km\/h. How do we improve flight-layer-vertex.glsl to simulate it ? \/\/ Hint: Take a look at \/\/ vec4 shift = vec4(0., 0., mod(_timestamp, trailLength) * 1e-4, 0.). \/\/ It's all you need \ud83d\udc4d\n\n\n## 8. Where\u2019s go from now?\n\nIf you like and have impression how we visualize the huge data into the map. Don\u2019t be hostile to take a look at [Deck.gl](http:\/\/deck.gl). Pick your favorite data at Kaggle.\n\nLearning and understanding GLSL is really useful if you want to take directly to GPU.\n\nHope you have greate\u00a0time to ignite your lazy brain \u00a0\ud83d\udc7b\n\n\n","html":"<p>Hi everyone.\u00a0Today is the last time I&#8217;ve worked at feels. I decided to spend whole weekend to do experiment which I haven&#8217;t done before.<\/p>\n<p>I remember to <a href=\"https:\/\/uber.github.io\/deck.gl\/#\/\">deck.gl<\/a>, popular opensource published by Uber. Why don&#8217;t we get a try ? \ud83d\ude09<\/p>\n<p><img class=\" wp-image-4437 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_28-300x196.jpg?resize=391%2C255\" alt=\"\" width=\"391\" height=\"255\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_28.jpg?resize=300%2C196&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_28.jpg?resize=768%2C502&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_28.jpg?w=832&amp;ssl=1 832w\" sizes=\"(max-width: 391px) 100vw, 391px\" data-recalc-dims=\"1\" \/><\/p>\n<p>I tried installing Deck.gl, MapBox, implement some code, take a deep understand in GLSL. Tried to visualize VisaH1B static, Flight record, Taxi route. All datasets are available on Kaggle which under CC license.<\/p>\n<p>And now, it&#8217;s time to write blog for sharing my experiment.<\/p>\n<p>Hope you enjoy it :]<\/p>\n<h2>1. Data Visualization<\/h2>\n<p>Data Visualization is quite fun. Perhaps when you see the term &#8220;Data Visualization&#8221;, you might remember to ugly Microsoft Excel&#8217;s spreadsheet chart. In real world, there are many situations we need to visualize the data.<\/p>\n<ul>\n<li>If you&#8217;re student, before going to big final semester presentation, you would like to be stand out. What would you do?<\/li>\n<li>If you&#8217;re founder, I believe you had one time that shows off your growth user over the world to potential investors, and you want\u00a0to make impression\u00a0on the first sight. What do you do?<\/li>\n<\/ul>\n<p>I believe we&#8217;re using the same chart like below. It&#8217;s so common, trivial.<\/p>\n<p><img class=\"aligncenter\" src=\"https:\/\/i0.wp.com\/www.excel-easy.com\/data-analysis\/images\/charts\/column-chart.png?w=850\" data-recalc-dims=\"1\" \/><\/p>\n<p>There are millions of people did that. If you would like to be stand out. Please don&#8217;t do the same way with hundred people did before. \ud83d\ude0e<\/p>\n<h4>Brave world<\/h4>\n<p><img class=\"\" src=\"https:\/\/i2.wp.com\/s-media-cache-ak0.pinimg.com\/originals\/22\/32\/22\/22322282dac474a138666b7e79cd5bd1.jpg?resize=431%2C310&#038;ssl=1\" width=\"431\" height=\"310\" data-recalc-dims=\"1\" \/><img class=\"\" src=\"https:\/\/i0.wp.com\/data-ink.com\/wp-content\/uploads\/2016\/12\/Cancer-Deaths-by-County.png?resize=386%2C319\" width=\"386\" height=\"319\" data-recalc-dims=\"1\" \/><\/p>\n<p>As you can see, data visualization is really catch-eye.<\/p>\n<h3>Props<\/h3>\n<ul>\n<li>It can be accessed quickly by a wider audience.<\/li>\n<li>It conveys a lot of information in a small space.<\/li>\n<li>It makes your report more visually appealing.<\/li>\n<\/ul>\n<h3>Cons<\/h3>\n<ul>\n<li>You must put more <strong>effort<\/strong>.<\/li>\n<\/ul>\n<p>It&#8217;s boring if we keep doing every time. I would be better if we put myself into a dangerous zone, try somethings new, push to boundary.<\/p>\n<h2>2. Roadmap<\/h2>\n<p>This experiment will show you how to visualize million of records in world-map.<\/p>\n<p>You will understand<\/p>\n<ul>\n<li>How to use vector-based Mapbox SDK, and able to custom map with own style.<\/li>\n<li>How to use Deck.gl, a WebGL-powerful framework for visual exploratory data analysis of large datasets.<\/li>\n<li>Visualize the location of 1 million trees in New York city with ScreenGridLayer<\/li>\n<li>Experiment on Heatmap<\/li>\n<li>Visualize the flight record data by using\u00a0FlightLayer<\/li>\n<li>Combination: GLSL shaders and Deck.gl to achieve dynamic-map.<\/li>\n<\/ul>\n<p>Here are screenshots.<\/p>\n<p style=\"text-align: center;\"><img class=\" wp-image-4398 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_1-300x171.jpg?resize=800%2C456\" alt=\"\" width=\"800\" height=\"456\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_1.jpg?resize=300%2C171&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_1.jpg?resize=768%2C439&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_1.jpg?resize=1024%2C585&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_1.jpg?w=1438&amp;ssl=1 1438w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><strong>683.788<\/strong> trees in NY by ScreenGridLayer, run smoothly at 60FPS<\/p>\n<p><img class=\"wp-image-4400 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_2-300x172.jpg?resize=799%2C458\" alt=\"\" width=\"799\" height=\"458\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_2.jpg?resize=300%2C172&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_2.jpg?resize=768%2C439&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_2.jpg?resize=1024%2C586&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_2.jpg?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 799px) 100vw, 799px\" data-recalc-dims=\"1\" \/><\/p>\n<p style=\"text-align: center;\">The square,\u00a0brighter\u00a0green colors, means more trees round up.<\/p>\n<p><img class=\"wp-image-4402 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_4-300x172.jpg?resize=800%2C459\" alt=\"\" width=\"800\" height=\"459\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_4.jpg?resize=300%2C172&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_4.jpg?resize=768%2C441&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_4.jpg?resize=1024%2C587&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_4.jpg?w=1440&amp;ssl=1 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/p>\n<p><img class=\"wp-image-4403 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_3-300x173.jpg?resize=801%2C462\" alt=\"\" width=\"801\" height=\"462\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_3.jpg?resize=300%2C173&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_3.jpg?resize=768%2C443&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_3.jpg?resize=1024%2C591&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_3.jpg?w=1434&amp;ssl=1 1434w\" sizes=\"(max-width: 801px) 100vw, 801px\" data-recalc-dims=\"1\" \/><\/p>\n<p style=\"text-align: center;\">Heat-map for better look<\/p>\n<p><img class=\" wp-image-4438 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/Data-visualization-thumbnail-300x165.jpeg?resize=790%2C434\" alt=\"\" width=\"790\" height=\"434\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/Data-visualization-thumbnail.jpeg?resize=300%2C165&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/Data-visualization-thumbnail.jpeg?resize=768%2C423&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/Data-visualization-thumbnail.jpeg?w=862&amp;ssl=1 862w\" sizes=\"(max-width: 790px) 100vw, 790px\" data-recalc-dims=\"1\" \/><\/p>\n<p style=\"text-align: center;\">Flight record data with Flightlayer (Static)<\/p>\n<p style=\"text-align: center;\">[su_youtube url=&#8221;https:\/\/youtu.be\/kgcJ0rftIUA?t=1m6s&#8221;]<\/p>\n<p style=\"text-align: center;\">Dynamic visualization with GLSL shader<\/p>\n<h2>3. Technologies<\/h2>\n<h3>3.1 React-redux<\/h3>\n<p>Before writing actually code. It&#8217;s better if I cover and mention all technologies we&#8217;re using.<\/p>\n<p>[<strong>IMPORTANT<\/strong>] I assume you&#8217;ve already had experience on <a href=\"https:\/\/facebook.github.io\/react\/\">React<\/a> and <a href=\"https:\/\/github.com\/reactjs\/redux\">Redux<\/a>. If not, don&#8217;t be shy to follow tutorials on google.<\/p>\n<h3>3.2 MapBox<\/h3>\n<p><a href=\"https:\/\/www.mapbox.com\">Mapbox<\/a> is a large provider of custom online maps for websites such as Foursquare, Pinterest, Evernote, the Financial Times, The Weather Channel and Uber Technologies.<\/p>\n<p><img class=\"wp-image-4406 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_5-300x96.jpg?resize=684%2C219\" alt=\"\" width=\"684\" height=\"219\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_5.jpg?resize=300%2C96&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_5.jpg?resize=768%2C246&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_5.jpg?resize=1024%2C327&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_5.jpg?w=1270&amp;ssl=1 1270w\" sizes=\"(max-width: 684px) 100vw, 684px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Mapbox offers a million way to custom your map. Fit with many contextures: Drones, Finance Government, Logistics Media Natural resources, Outdoors, Real estate, Security, Transportation, Travel, &#8230; Each kind of maps have difference look<\/p>\n<p><img class=\" wp-image-4407 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_6-300x170.jpg?resize=802%2C454\" alt=\"\" width=\"802\" height=\"454\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_6.jpg?resize=300%2C170&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_6.jpg?resize=768%2C434&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_6.jpg?resize=1024%2C579&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_6.jpg?w=1150&amp;ssl=1 1150w\" sizes=\"(max-width: 802px) 100vw, 802px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Mapbox also provides amazing studio, then you can create owner map as well as.<\/p>\n<p>Instead of using mapbox.js officially, I intend to use <a href=\"https:\/\/github.com\/uber\/react-map-gl\">react-map-gl<\/a>. It&#8217;s React friendly API wrapper around MapboxGL JS. It&#8217;s one of popular library was published by Uber recently with 2.2k \u2b50\ufe0f.<\/p>\n<h3>3.3 Deck.gl<\/h3>\n<p>Beside react-map-gl. Uber also publish\u00a0<a href=\"https:\/\/uber.github.io\/deck.gl\">deck.gl<\/a>\u00a0tool.<\/p>\n<p><img class=\" wp-image-4408 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_7-300x300.jpg?resize=512%2C512\" alt=\"\" width=\"512\" height=\"512\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_7.jpg?resize=300%2C300&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_7.jpg?resize=150%2C150&amp;ssl=1 150w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_7.jpg?w=725&amp;ssl=1 725w\" sizes=\"(max-width: 512px) 100vw, 512px\" data-recalc-dims=\"1\" \/><\/p>\n<p>There are 3 highlight factors you might consider.<\/p>\n<ol>\n<li>Organize the complex data by following Layered Approach. Makes it easy to package and share new visualizations as reusable layers.<\/li>\n<li>High-Precision computations in the GPU:\u00a0By emulating 64-bit floating point computations in the GPU. Deck.gl renders datasets with unparalleled accuracy and performance.<\/li>\n<li>React and Mapbox GL Integrations: Great match with React, supporting efficient WebGL rendering under the Reactive programming paradigm.<\/li>\n<\/ol>\n<p><a href=\"https:\/\/github.com\/uber\/deck.gl\">Deck.gl<\/a> deserves more than 1.8k \u2b50\ufe0f on\u00a0<a href=\"https:\/\/github.com\/uber\/deck.gl\">Github<\/a>\u00a0\ud83d\udcaf<\/p>\n<h3>3.4 Kaggle<\/h3>\n<p>It&#8217;s incompliance if we don&#8217;t have much data for visualization. <a href=\"https:\/\/www.kaggle.com\">Kaggle<\/a> is the best place to get huge data. They offer open datasets on everything from government, health, and science to popular games and dating trends. It&#8217;s really valuable treasure for data mining or training model for deep learning machine \ud83e\udd18<\/p>\n<p>As part of this blog. I used <a href=\"https:\/\/www.kaggle.com\/nycparks\/tree-census\">2015 Tree Census in NewYork city<\/a> and \u00a0<a href=\"https:\/\/www.kaggle.com\/usdot\/flight-delays\"> 2015 Flight Delay and Cancellation<\/a>. All of them are released under\u00a0<a href=\"https:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/\">CC0: Public Domain License<\/a>. So you can read\/write, modify, distribute the data whatever you like. It&#8217;s cool \ud83d\udc4d<\/p>\n<h3>3.5 GLSL Shader<\/h3>\n<p>I also cover a bit about GLSL Shader. If you&#8217;re learned OpenGL, you must be familiar with this term. I will keep it simple as possible because I don&#8217;t have time to explain deeper.<\/p>\n<p>Basically, GLSL has a syntax similar to C, which is executed directly by the graphics pipeline. There are two types \u2014 <strong>Vertex Shaders<\/strong> transforms shape positions to real 3D drawing coordinates. And <strong>Fragment Shaders<\/strong>\u00a0helps to render colors and other attributes.<\/p>\n<p>By using GLSL, we can achieve high performance with millions\u00a0of data on map \ud83d\ude0e<\/p>\n<h2>4. Time for coding<\/h2>\n<h3>4.1 Stater kit<\/h3>\n<p>For saving time, I won&#8217;t show you how to install Node, deck.gl or react-map-gl. It&#8217;s waste of time. If you&#8217;re patient, feels free to start new project by yourself. I recommend cloning\u00a0<a href=\"https:\/\/github.com\/davezuko\/react-redux-starter-kit\">react-redux-starter-kit<\/a>\u00a0project. It includes React, Redux, React-router too as basic starter kit.<\/p>\n<p>To begin, please <a href=\"https:\/\/github.com\/NghiaTranUIT\/data-visualization-deck-gl\/tree\/starter-pack-updated\">download starter pack<\/a> which I prepared. It contains base React-Redux, LayerInfo, MapSelection, react-map-gl, tween, luml.gl, as well as data from Kaggle.\u00a0&#8230; all you need are ready \ud83e\udd18<\/p>\n<p>After clone starter-pack. Please make sure you run<\/p>\n<pre class=\"lang:default decode:true\">npm install\r\nnpm start<\/pre>\n<p>It opens <em>localhost<\/em> automatically, and notice the control at left-bottom. It&#8217;s all we do now \ud83d\udc4d<\/p>\n<p><img class=\" wp-image-4423 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_17-300x206.jpg?resize=387%2C266\" alt=\"\" width=\"387\" height=\"266\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_17.jpg?resize=300%2C206&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_17.jpg?w=518&amp;ssl=1 518w\" sizes=\"(max-width: 387px) 100vw, 387px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Before going through the tutorial, we should take a look at project structure in detail.<\/p>\n<p><img class=\"wp-image-4424 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_18-134x300.jpg?resize=384%2C860\" alt=\"\" width=\"384\" height=\"860\" data-recalc-dims=\"1\" \/><\/p>\n<p>We have project structure here.<\/p>\n<ul>\n<li><strong>.\/info:<\/strong> LayerInfo layer<\/li>\n<li><strong>.\/modules:<\/strong> Include action.js and reducer.js of redux<\/li>\n<li><strong>overlays:<\/strong> flight_overlay.js, tree_heatmap_overlay, tree_screengrid_layer, taxi_overlay.js. All of them are layer which we implement.<\/li>\n<li><strong>main.js:<\/strong>\u00a0The logic of this example. We will fill render() func to show map and overlay layer off. \ud83d\udc4d<\/li>\n<li><strong>map-selection<\/strong>: MapSelection control.<\/li>\n<\/ul>\n<h4>constants.js<\/h4>\n<p>Define constants, such as MapBoxAccessToken, data source name.<\/p>\n<pre class=\"lang:default decode:true\">export const MapMode = {\r\n  NONE:             'NONE',\r\n  TREES:            'TREES',\r\n  TREES_HEATMAP:    'TREES_HEATMAP',\r\n  FLIGHT:           'FLIGHT',\r\n  TAXI:             'TAXI'\r\n}\r\n\r\nexport const MAPBOX_ACCESS_TOKEN = '&lt;insert-your-mapbox-public-token&gt;'\r\n\r\nexport const FLIGHT_DATA = '.\/example\/data\/flight-data.csv'\r\n\r\nexport const AIRPORT_DATA = '.\/example\/data\/airports.csv'\r\n\r\nexport const TREE_DATA = '.\/example\/data\/tree_census.csv'\r\n\r\nexport const TAXI_TRIP_DATA = '.\/example\/data\/taxi-trip.json'\r\n<\/pre>\n<h4>INITIAL_STATE<\/h4>\n<pre class=\"lang:default decode:true\">const INITIAL_STATE = {\r\n  mapViewState: {\r\n    latitude: NY_LOCATION.latitude,\r\n    longitude: NY_LOCATION.longitude,\r\n    zoom: 11.5,\r\n    pitch: 0,\r\n    bearing: 0\r\n  },\r\n  flightArcs: null,\r\n  airports: null,\r\n  trees: null,\r\n  taxi: null,\r\n  mapMode: MapMode.NONE,\r\n};<\/pre>\n<p>INITIAL_STATE defines the main variables. It&#8217;s self-explanatory. When dealing with map, we usually encounter bunch of map context, such as Latitude, longitude, zoom, pitch, bearing. If you don&#8217;t know one of them. Please do short search on google. \ud83d\ude09<\/p>\n<p>In addition, flightArcs, airports, tress, text and mapMode are main variables which we&#8217;re storing data from CSV or JSON later.<\/p>\n<h4>render()<\/h4>\n<p>Navigate to bottom of main.js, you will see the render function.<\/p>\n<pre class=\"lang:default decode:true\">render() {\r\n  const { flightArcs, trees, mapMode, airports } = this.props\r\n  const layerInfoProps = {\r\n    numberFlights: this._getLength(flightArcs),\r\n    numberTrees: this._getLength(trees),\r\n    numberAirport: this._getLength(airports),\r\n    mode: mapMode,\r\n  }\r\n  const mapSelectionProps = {\r\n    mapMode: this.props.mapMode,\r\n    selectModeFunc: this._handleSelectMode,\r\n    stopTimerFunc: this._handleStopTimer,\r\n  }\r\n  return (\r\n    &lt;div&gt;\r\n      { this._renderMap() }\r\n      &lt;div className='overlay-contol-container'&gt;\r\n        &lt;MapSelection {...mapSelectionProps}\/&gt;\r\n        &lt;LayerInfo {...layerInfoProps}\/&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/div&gt;\r\n  )\r\n},<\/pre>\n<p>render() is simply render the map as well as MapSelection and LayerInfo.<\/p>\n<h4>To be implemented<\/h4>\n<pre class=\"lang:default decode:true\">_renderMap() {\r\n  \/\/ Implement here\r\n  return null\r\n},\r\n<\/pre>\n<p><img class=\" wp-image-4425 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_19-300x159.jpg?resize=374%2C198\" alt=\"\" width=\"374\" height=\"198\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_19.jpg?resize=300%2C159&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_19.jpg?w=444&amp;ssl=1 444w\" sizes=\"(max-width: 374px) 100vw, 374px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Here are 4 files we need to write real code. Please open each file, and look at temporary functions which I prepared for you.<\/p>\n<pre class=\"lang:default decode:true\">\/* Flight layer *\/\r\nexport function _renderFlightOverlay(param) {\r\n  \/\/ Implement here\r\n  return null\r\n}\r\n\r\nfunction _renderFlightLayer(param) {\r\n  return []\r\n}\r\n\r\n\/* Tree layer *\/\r\nexport function _renderTreesHeatMapOverlay(param) {\r\n  \/\/ Implement here\r\n  return null\r\n}\r\n\r\nexport function _renderTreesOverlay(param) {\r\n  \/\/ Implement here\r\n  return null\r\n}\r\n\r\n\/* Tree heatmap layer *\/\r\nfunction _renderTreeLayer(props) {\r\n  return []\r\n}\r\n\r\n<\/pre>\n<p>Don&#8217;t worry about this too much right now. I&#8217;ve covered all in next chapter \ud83d\udc4d<\/p>\n<h3>4.2 Data Source&#8217;s structure<\/h3>\n<h4>Trees in New York<\/h4>\n<p>You can download <a href=\"https:\/\/www.kaggle.com\/nycparks\/tree-census\">tree_new_york.csv<\/a><strong>\u00a0<\/strong>source from <a href=\"https:\/\/www.kaggle.com\/nycparks\/tree-census\">Kaggle<\/a>.<\/p>\n<pre class=\"lang:default decode:true\">tree_id,block_id,borough,latitude,longitude,latin_name,common_name,location,status,health,tree_diameter,stump_diameter,root_stone,root_grate,root_other,trunk_wire,trunk_light,trunk_other,branch_light,branch_shoe,branch_other\r\n277269,100002,Manhattan,40.70237278,-74.01143532,Metasequoia glyptostroboides,Dawn Redwood,On Curb,Alive,Fair,1,0,No,No,No,No,No,No,No,No,No<\/pre>\n<p>The size is around 80Mb, contains ~700.000 records. The structure of <strong>tree_new_york.csv<\/strong>\u00a0is really simple. But today, we should focus on <strong>latitude<\/strong> and <strong>longitude<\/strong><\/p>\n<h4>Flight Delay and Cancellation<\/h4>\n<p>Download <a href=\"https:\/\/www.kaggle.com\/usdot\/flight-delays\">flight_record.csv<\/a>\u00a0and <a href=\"https:\/\/www.kaggle.com\/usdot\/flight-delays\">airport.csv<\/a> from Kaggle too. It&#8217;s largest file, around 192Mb zipped, 600Mb after extraction.<\/p>\n<pre class=\"lang:default decode:true \">IATA_CODE,AIRPORT,CITY,STATE,COUNTRY,LATITUDE,LONGITUDE\r\nABE,Lehigh Valley International Airport,Allentown,PA,USA,40.65236,-75.44040<\/pre>\n<pre class=\"lang:default decode:true\">YEAR,MONTH,DAY,DAY_OF_WEEK,AIRLINE,FLIGHT_NUMBER,TAIL_NUMBER,ORIGIN_AIRPORT,DESTINATION_AIRPORT,SCHEDULED_DEPARTURE,DEPARTURE_TIME,DEPARTURE_DELAY,TAXI_OUT,WHEELS_OFF,SCHEDULED_TIME,ELAPSED_TIME,AIR_TIME,DISTANCE,WHEELS_ON,TAXI_IN,SCHEDULED_ARRIVAL,ARRIVAL_TIME,ARRIVAL_DELAY,DIVERTED,CANCELLED,CANCELLATION_REASON,AIR_SYSTEM_DELAY,SECURITY_DELAY,AIRLINE_DELAY,LATE_AIRCRAFT_DELAY,WEATHER_DELAY\r\n2015,1,1,4,AS,98,N407AS,ANC,SEA,0005,2354,-11,21,0015,205,194,169,1448,0404,4,0430,0408,-22,0,0,,,,,,<\/pre>\n<p>In flight_record.csv, they didn&#8217;t include lat\/long. So we need to write helper code to map departure\/arrival airport&#8217;s coordination.<\/p>\n<p>The valuable is departure_delay, distance, air_time field. It brings to us an important point. Useful for calculating the color of flight route (depend on how long departure_delay), velocity, and airplane position in the sky real-time (we do by GLSL later).<\/p>\n<p>Maybe take a second to mull that over. By understanding the data structure, we could process and manipulate the data easier.<\/p>\n<p><img class=\" aligncenter\" src=\"https:\/\/i0.wp.com\/koenig-media.raywenderlich.com\/uploads\/2016\/03\/iThinkIveGotThis.png?resize=557%2C265&#038;ssl=1\" width=\"557\" height=\"265\" data-recalc-dims=\"1\" \/><\/p>\n<h3>4.3 Mapbox<\/h3>\n<p>The first goal we should achieve is figured out the way to present the map. According to my mention before, we use MapBox through this tutorial. Please navigate to <strong>_renderMap()<\/strong> in main.js, and implement below code<\/p>\n<pre class=\"lang:default decode:true\">_renderMap() {\r\n  const { mapViewState, mapMode } = this.props\r\n  const { width, height } = this.state\r\n  const isActiveOverlay = mapMode !== MapMode.NONE\r\n  return (\r\n    &lt;MapboxGLMap\r\n      mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\r\n      width={width}\r\n      height={height}\r\n      mapStyle='mapbox:\/\/styles\/mapbox\/dark-v9'\r\n      perspectiveEnabled\r\n      { ...mapViewState }\r\n      onChangeViewport={this._handleViewportChanged}&gt;\r\n      {isActiveOverlay &amp;&amp; this._renderVisualizationOverlay()}\r\n      &lt;FPSStats isActive\/&gt;\r\n    &lt;\/MapboxGLMap&gt;\r\n  );\r\n},<\/pre>\n<p>It&#8217;s really straight-forward, we pass width, height, mapStyle, and mapViewState into <strong>&lt;MapboxGLMap&gt;<\/strong>. You can get further info at <a href=\"https:\/\/www.mapbox.com\/mapbox-gl-js\/api\/\">mapbox&#8217;s documentations<\/a>. The important point is isActiveOverlay. It will render the VisualizationOverlay if we choice any mode from MapSelection.<\/p>\n<pre class=\"lang:default decode:true \">_renderVisualizationOverlay() {\r\n  const { flightArcs, airports, mapMode, trees } = this.props\r\n\r\n  \/\/ wait until data is ready before rendering\r\n  if (flightArcs === null|| airports === null || trees === null) {\r\n    return []\r\n  }\r\n\r\n  const param = {\r\n    props: this.props,\r\n    state: this.state,\r\n    onWebGLInitialized: this._onWebGLInitialized,\r\n    effects: this._effects,\r\n  }\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      { mapMode === MapMode.TREES &amp;&amp; _renderTreesOverlay(param) }\r\n      { mapMode === MapMode.TREES_HEATMAP &amp;&amp; _renderTreesHeatMapOverlay(param) }\r\n      { mapMode === MapMode.FLIGHT &amp;&amp; _renderFlightOverlay(param) }\r\n      { mapMode === MapMode.TAXI &amp;&amp; _renderTaxiOverlay(param) }\r\n    &lt;\/div&gt;\r\n  )\r\n},<\/pre>\n<p>I wrote it for you. It automatic switches and render individually overlay depend on mapMode we&#8217;re selecting.<\/p>\n<p><strong>_handleViewportChanged<\/strong> will be triggered whenever the viewport changed, and update the viewState as well as rendering the overlay again. If we don&#8217;t re-render overlay layer with new state of map, the layers are still same old state. It&#8217;s incorrect behavior.<\/p>\n<pre class=\"lang:default decode:true\">_handleViewportChanged(mapViewState) {\r\n  if (mapViewState.pitch &gt; 60) {\r\n    mapViewState.pitch = 60\r\n  }\r\n  this.props.dispatch(updateMap(mapViewState))\r\n},<\/pre>\n<h4>Mapbox Public Token<\/h4>\n<p>Don&#8217;t forget to get your Mapbox Public Token\u00a0from <a href=\"https:\/\/www.mapbox.com\/studio\/\">Mapbox&#8217;s Dashboard<\/a><\/p>\n<p><img class=\" wp-image-4415 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_11-300x171.jpg?resize=800%2C456\" alt=\"\" width=\"800\" height=\"456\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_11.jpg?resize=300%2C171&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_11.jpg?resize=768%2C438&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_11.jpg?w=861&amp;ssl=1 861w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Feels free to spent 5 mins for experiment <a href=\"https:\/\/www.mapbox.com\/studio\/styles\/\">Mapbox&#8217;s map editor<\/a>. It&#8217;s amazing tool, allow you to edit\/modify the layout of map depends on your purpose.<\/p>\n<h3>4.4 Visualize trees in New York<\/h3>\n<h4>Parsing tree_new_york.csv<\/h4>\n<pre class=\"lang:default decode:true\">_loadData() {\r\n  \r\n  \/\/ Load Tree\r\n  this._loadCsvFile(TREE_DATA, (data)=&gt;{this.props.dispatch(loadTrees(data))})\r\n},<\/pre>\n<p>_loadCsvFile is helper func I wrote for you. It reads csv file and parsing into array. Then dispatching <strong>loadTrees<\/strong> action to ReduxStore<\/p>\n<pre class=\"lang:default decode:true\">case 'LOAD_TREES': {\r\n    let trees = action.data.map((item)=&gt;{\r\n      const lat = item.latitude\r\n      const long = item.longitude\r\n      return {\r\n        position: [Number(long), Number(lat)]\r\n      }\r\n    })\r\n    return {...state, trees}\r\n}<\/pre>\n<p>The purpose of our tutorial is representing the distribution of tree. So we ignore unnecessary fields, we only care long\/lat. It&#8217;s why I .map() to transform items into position object. Then returning the result into mainState. It&#8217;s not hard If you&#8217;re familiar with React+Redux.<\/p>\n<h4>TreeScreenGridOverlay.js<\/h4>\n<p>ScreenGridLayer is built-in Deck.gl. It&#8217;s similar with Heatmap.\u00a0The ScreenGridLayer takes in an array of latitude and longitude coordinate points, aggregates them into histogram bins and renders as a grid.<\/p>\n<p>Please navigate to <strong>tree_screengrid_overlay.js<\/strong> in <strong>overlay<\/strong> folder.<\/p>\n<pre class=\"lang:default decode:true\">export function _renderTreesOverlay(param) {\r\n    const { mapViewState, trees } = param.props\r\n    const { width, height } = param.state\r\n    return (\r\n      &lt;DeckGL\r\n        id=\"default-deckgl-overlay\"\r\n        width={width}\r\n        height={height}\r\n        debug\r\n        {...mapViewState}\r\n        onWebGLInitialized={param.onWebGLInitialized}\r\n        layers={_renderTreeLayer(param.props)}\r\n        effects={param.effects}\r\n      \/&gt;\r\n    )\r\n}<\/pre>\n<p>It&#8217;s perfect time to implement <strong>_renderTreesOverlay()<\/strong> func. Initialize DeckGL with specific width\/height. The layer&#8217;s parameter is passed from <strong>_renderTreeLayer()<\/strong>. Be care here. We return ScreenGridLayer associate with trees model.<\/p>\n<pre class=\"lang:default decode:true\">function _renderTreeLayer(props) {\r\n  const { trees } = props\r\n  return [\r\n    new ScreenGridLayer({\r\n      id: 'gird',\r\n      data: trees,\r\n      minColor: [0, 0, 0, 0],\r\n      unitWidth: 10,\r\n      unitHeight: 10,\r\n    })\r\n  ];\r\n}\r\n<\/pre>\n<h4>Results<\/h4>\n<p><img class=\" wp-image-4416 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_12-300x172.jpg?resize=800%2C459\" alt=\"\" width=\"800\" height=\"459\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_12.jpg?resize=300%2C172&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_12.jpg?resize=768%2C441&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_12.jpg?resize=1024%2C588&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_12.jpg?w=1150&amp;ssl=1 1150w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Run on terminal.<\/p>\n<pre class=\"lang:default decode:true\">yarn start<\/pre>\n<p>The result works like a charm. Despite 683.788 trees, Deck.gl still handles perfectly, around 40-60 FPS.<\/p>\n<p><img class=\" wp-image-4418 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_14-300x171.jpg?resize=768%2C438\" alt=\"\" width=\"768\" height=\"438\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_14.jpg?resize=300%2C171&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_14.jpg?resize=768%2C438&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_14.jpg?resize=1024%2C584&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_14.jpg?w=1150&amp;ssl=1 1150w\" sizes=\"(max-width: 768px) 100vw, 768px\" data-recalc-dims=\"1\" \/><\/p>\n<p>The aggregation is done in screen space, so the data prop needs to be reaggregated by the layer whenever the map is zoomed or panned. This means that this layer is best used with small data set, however, the visuals when used with the right data set can be quite effective.<\/p>\n<p>The frame will be dropped gradually when zooming in\/out, but it&#8217;s acceptable result \ud83d\udcaf<\/p>\n<p>ScreenGirdLayer is perfect choose if you would like to visualize the distribution of user\/object on a map. \ud83e\udd18<\/p>\n<h3>4.5 Heat-map<\/h3>\n<p><a href=\"https:\/\/github.com\/vicapow\/react-map-gl-heatmap-overlay\">Heatmap<\/a> is a graphical representation of data where the individual values contained in a\u00a0<a title=\"Matrix (mathematics)\" href=\"https:\/\/en.wikipedia.org\/wiki\/Matrix_(mathematics)\">matrix<\/a>\u00a0are represented as colors.<\/p>\n<p><img class=\" wp-image-4419 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_15-300x137.jpg?resize=795%2C363\" alt=\"\" width=\"795\" height=\"363\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_15.jpg?resize=300%2C137&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_15.jpg?resize=768%2C352&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_15.jpg?w=926&amp;ssl=1 926w\" sizes=\"(max-width: 795px) 100vw, 795px\" data-recalc-dims=\"1\" \/><\/p>\n<p>It&#8217;s extremely useful to present the large data over the world.\u00a0There are many different\u00a0<a title=\"Color scheme\" href=\"https:\/\/en.wikipedia.org\/wiki\/Color_scheme\">color schemes<\/a>\u00a0that can be used to illustrate the heatmap, with perceptual advantages and disadvantages for each.<\/p>\n<p>It&#8217;s time to bring heatmap. Come back at _renderTreesHeatMapOverlay in <strong>tree_heatmap_overlay.js<\/strong> and put it down.<\/p>\n<pre class=\"lang:default decode:true\">export function _renderTreesHeatMapOverlay(param) {\r\n    const { mapViewState, trees } = param.props\r\n    const { width, height } = param.state\r\n    return (\r\n      &lt;HeatmapOverlay\r\n        locations={trees}\r\n        {...mapViewState}\r\n        width={width}\r\n        height={height}\r\n        lngLatAccessor={(tree) =&gt; [tree['position'][0], tree['position'][1]]}\r\n        \/&gt;\r\n    )\r\n}\r\n<\/pre>\n<p><strong>lngLatAccessor<\/strong>\u00a0: Data accessors can be provided if your data doesn&#8217;t fit the expected form<code>{longitude, latitude}<\/code>.<\/p>\n<p><img class=\" wp-image-4420 aligncenter\" src=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_16-300x172.jpg?resize=800%2C459\" alt=\"\" width=\"800\" height=\"459\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_16.jpg?resize=300%2C172&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_16.jpg?resize=1024%2C586&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_16.jpg?w=1440&amp;ssl=1 1440w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/p>\n<p>I admit react-map-gl-heat overlay handled performance for 700.00 is\u00a0worse.<\/p>\n<pre class=\"lang:default decode:true \">gradientColors={Immutable.List(['blue', 'red'])}<\/pre>\n<p>React-map-gl-heat also provides gradientColors, you can customize your look easier. <a href=\"http:\/\/colorbrewer2.org\/#type=sequential&amp;scheme=OrRd&amp;n=3\">ColorBrewer<\/a> offer GUI to pick color-scheme.<\/p>\n<h3>\u00a04.6 Conclusion<\/h3>\n<p>In section 4, I mention two of layers which built-in Deck.gl. They also have\u00a0Arc Layer,\u00a0Choropleth Layer,\u00a0Line Layer,\u00a0Scatterplot Layer. Trying all of layers is better idea \ud83d\udc7b<\/p>\n<h2>5. FlightLayer<\/h2>\n<h3>5.1 Overall<\/h3>\n<p>It&#8217;s time for the exciting part. We&#8217;re going to extend deck.gl&#8217;s Layer, customize it for representing Flight Route. Because of deck.gl don&#8217;t offer FlightLayer, so the one way is to implement it by our hand.<\/p>\n<p>We&#8217;re dealing with GLSL shader, please confirmed you&#8217;re installed\u00a0<strong>glslify<\/strong> correctly. If now, please run below code.<\/p>\n<pre class=\"lang:default decode:true\">npm install --save glslify<\/pre>\n<h3>5.2 Extend deck.gl&#8217;s Layer.<\/h3>\n<p>FlightLayer is a curve from <strong>sourcePoint<\/strong> to <strong>tartgetPoint<\/strong>. As you can see the screenshot below, it&#8217;s actually <a href=\"https:\/\/en.wikipedia.org\/wiki\/Parabola\">parabola<\/a> we&#8217;ve learn in Secondary school right \ud83d\ude09<\/p>\n<p><img class=\" wp-image-4427 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_20-300x207.jpg?resize=801%2C553\" alt=\"\" width=\"801\" height=\"553\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_20.jpg?resize=300%2C207&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_20.jpg?resize=768%2C531&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_20.jpg?resize=1024%2C708&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_20.jpg?w=1231&amp;ssl=1 1231w\" sizes=\"(max-width: 801px) 100vw, 801px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Look closer. I admit it doesn&#8217;t look like flight route. Because the flight routes are extremely complexity in real-life. We assume it&#8217;s simply parabola.<\/p>\n<p><img class=\" wp-image-4426 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_21-300x227.jpg?resize=800%2C606\" alt=\"\" width=\"800\" height=\"606\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_21.jpg?resize=300%2C227&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_21.jpg?resize=768%2C582&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_21.jpg?resize=1024%2C775&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_21.jpg?w=1046&amp;ssl=1 1046w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/p>\n<p>So the FlightLayer takes 3 parameters: <strong>sourcePosition<\/strong>, <strong>targetPosition<\/strong> as well as a <strong>color<\/strong>.<\/p>\n<h3>5.3 Processing flight record data<\/h3>\n<p>Before visualizing, we need to process the flight data to fit with our requirement.<\/p>\n<p>Load flight-data.csv, airport.csv<\/p>\n<pre class=\"lang:default decode:true\">\/\/ Load Flight Data\r\nthis._loadCsvFile(AIRPORT_DATA, (data)=&gt;{\r\n  this.props.dispatch(loadAirport(data))\r\n  this._loadCsvFile(FLIGHT_DATA, (data)=&gt;{this.props.dispatch(loadFlightDataPoints(data))})\r\n});<\/pre>\n<p>in reducer<\/p>\n<pre class=\"lang:default decode:true\">case 'LOAD_FLIGHT_POINT': {\r\n  const flightArcs = action.points.map((item)=&gt;{\r\n    const originalAirport = item.ORIGIN_AIRPORT\r\n    const destinationAirport = item.DESTINATION_AIRPORT\r\n    return {\r\n      sourcePosition: state.airports[originalAirport],\r\n      targetPosition: state.airports[destinationAirport],\r\n    }\r\n  })\r\n  return {...state, flightArcs}\r\n}\r\n\r\ncase 'LOAD_AIRPORT': {\r\n  let airports = {}\r\n  action.airports.forEach((item, index)=&gt;{\r\n    airports[item.IATA_CODE] = [Number(item.LONGITUDE), Number(item.LATITUDE)]\r\n  })\r\n\r\n  return {...state, airports}\r\n}<\/pre>\n<p>Please take a notice at <strong>LOAD_AIRPORT<\/strong> action, I convert airport array to hash-map. Because time complexity for searching key in\u00a0generally is O(1). It&#8217;s really useful for <strong>LOAD_FLIGHT_POINT<\/strong> action, when mapping coordinate for original\/destination airport.<\/p>\n<h3>5.4 Creating custom layer: Flight layer<\/h3>\n<p><img class=\"aligncenter\" src=\"https:\/\/i1.wp.com\/media.giphy.com\/media\/d3mlE7uhX8KFgEmY\/source.gif?w=850&#038;ssl=1\" data-recalc-dims=\"1\" \/><\/p>\n<p style=\"text-align: center;\">Time for hacking your brain \ud83d\ude09<\/p>\n<h4>Layer life-cycle<\/h4>\n<p>Below is graph I summarize layer&#8217;s lifecycle.<\/p>\n<p><img class=\" wp-image-4430 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_22-300x193.jpg?resize=600%2C386\" alt=\"\" width=\"600\" height=\"386\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_22.jpg?resize=300%2C193&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_22.jpg?resize=768%2C493&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_22.jpg?w=978&amp;ssl=1 978w\" sizes=\"(max-width: 600px) 100vw, 600px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Fully documentation <a href=\"https:\/\/uber.github.io\/deck.gl\/#\/documentation\/creating-custom-layers\/layer-lifecycle\">here<\/a>\u00a0. Because of we extend from Layer, so we only override Layer.initializeState(), Layer.draw({uniform}) and\u00a0Layer.updateState() (optional).<\/p>\n<ul>\n<li><strong>Layer.initializeState()<\/strong>: This method is called only once for each layer (as defined by the\u00a0id\u00a0property), to set up the initial state for that layer. deck.gl will already have created the\u00a0state\u00a0object at this time, and added the\u00a0gl\u00a0context and the\u00a0attributeManager\u00a0context.<\/li>\n<li><strong>Layer.draw({uniform})<\/strong>:\u00a0Allows a layer to &#8220;render&#8221; or generate one or more deck.gl Layers passing in its own state as props. The layers will be rendered after the rendering layer, but before the next layer in the list. renderLayers will be called on the new layers, allowing the decomposition of the drawing of a complex data set into &#8220;primitive&#8221; layers.<\/li>\n<li><strong>Layer.updateState()<\/strong>:\u00a0Called when a new layer has been matched with a layer from the previous render cycle (resulting in new props being passed to that layer), or when context has changed and layers are about to be drawn.<\/li>\n<\/ul>\n<h4>Implement FlightLayer<\/h4>\n<p>Please navigate to<strong> ..\/scr\/layers\/core\/flight-data\/flight-data.js.\u00a0<\/strong>I prepared all for saving time \ud83e\udd17<\/p>\n<p>in flight-data.js<\/p>\n<pre class=\"lang:default decode:true \">updateState({props, changeFlags: {dataChanged}}) {\r\n  \/\/ Implement here\r\n}\r\n\r\ninitializeState() {\r\n  \/\/ Implement here\r\n}\r\n\r\ndraw({uniforms}) {\r\n  \/\/ Implement here\r\n}\r\n\r\n_createModel(gl) {\r\n  \/\/ Implement here\r\n}\r\n\r\ncalculateInstanceSourcePositions(attribute) {\r\n  \/\/ Implement here\r\n}\r\n\r\ncalculateInstanceTargetPositions(attribute) {\r\n  \/\/ Implement here\r\n}\r\n\r\ncalculateInstanceSourceColors(attribute) {\r\n  \/\/ Implement here\r\n}\r\n\r\ncalculateInstanceTargetColors(attribute) {\r\n  \/\/ Implement here\r\n}\r\n\r\ngetShaders() {\r\n  return {\r\n    vs: readFileSync(join(__dirname, '.\/flight-layer-vertex.glsl'), 'utf8'),\r\n    fs: readFileSync(join(__dirname, '.\/flight-layer-fragment.glsl'), 'utf8')\r\n  };\r\n}<\/pre>\n<p>All we need are here.<\/p>\n<h4>Create gl model<\/h4>\n<pre class=\"lang:default decode:true\">_createModel(gl) {\r\n  let positions = [];\r\n  const NUM_SEGMENTS = 50;\r\n  for (let i = 0; i &lt; NUM_SEGMENTS; i++) {\r\n    positions = [...positions, i, i, i];\r\n  }\r\n\r\n  return new Model({\r\n    gl,\r\n    ...assembleShaders(gl, this.getShaders()),\r\n    geometry: new Geometry({\r\n      drawMode: GL.LINE_STRIP,\r\n      positions: new Float32Array(positions)\r\n    }),\r\n    isInstanced: true\r\n  });\r\n}<\/pre>\n<p><strong>NUM_SEGMENTS<\/strong> is a number of small segment we draw parabola. The reason is, In OpenGL world, we can&#8217;t draw arc line, we need to draw each segment and line it together. As more as\u00a0<strong>NUM_SEGMENTS<\/strong> is, the flight route is more smoothly.<\/p>\n<p>Finally, we create Model and Geometry internally, <strong>GL.LINE_STIP<\/strong> and position as input agreement.<\/p>\n<pre class=\"lang:default decode:true \">positions = [...positions, i, i, i];<\/pre>\n<p>What&#8217;s it? It&#8217;s placeholder array for representing index of segment. We passed &lt;i&gt; 3 times because we store vec3. It&#8217;s using in <strong>vertex.glsl<\/strong> to determine which index of segments \ud83d\udc4d<\/p>\n<p>Don&#8217;t forget to take a look at <strong>this.getShader()<\/strong>. I wrote for you. It&#8217;s simply to read shader files in same directory.<\/p>\n<pre class=\"lang:default decode:true \">getShaders() {\r\n  return {\r\n    vs: readFileSync(join(__dirname, '.\/flight-layer-vertex.glsl'), 'utf8'),\r\n    fs: readFileSync(join(__dirname, '.\/flight-layer-fragment.glsl'), 'utf8')\r\n  };\r\n}<\/pre>\n<h4>initializeState()<\/h4>\n<p>initializeState() is one method you must implement to create OpenGL resource you need to render layer. Deck.gl looks for the variable <strong>model<\/strong> on your state, and if set expects it to be an instance of a [luma.gl] Model class.<\/p>\n<p>So we passed model we created before to this.state. According to <a href=\"https:\/\/uber.github.io\/deck.gl\/#\/documentation\/creating-custom-layers\/attribute-management\">Deck.gl&#8217;s attributeManager recommendation<\/a>, we should define the attribute for vertex.glsl file.<\/p>\n<p>We defined<\/p>\n<ul>\n<li>instanceSourcePositions, instanceSourcePositions is <strong>[vector3]<\/strong> as x,y,z.<\/li>\n<li>instanceSourceColors,\u00a0instanceTargetColors is <strong>[vector4]<\/strong> as r,g,b,a and unsigned_byte.<\/li>\n<\/ul>\n<p>The complete code is below.<\/p>\n<pre class=\"lang:default decode:true\">initializeState() {\r\n  const {gl} = this.context;\r\n  this.setState({model: this._createModel(gl)});\r\n\r\n  const {attributeManager} = this.state;\r\n  attributeManager.addInstanced({\r\n    instanceSourcePositions: {size: 3, update: this.calculateInstanceSourcePositions},\r\n    instanceTargetPositions: {size: 3, update: this.calculateInstanceTargetPositions},\r\n    instanceSourceColors: {\r\n      type: GL.UNSIGNED_BYTE,\r\n      size: 4,\r\n      update: this.calculateInstanceSourceColors\r\n    },\r\n    instanceTargetColors: {\r\n      type: GL.UNSIGNED_BYTE,\r\n      size: 4,\r\n      update: this.calculateInstanceTargetColors\r\n    }\r\n  });\r\n}<\/pre>\n<h4>Calculate position vec3<\/h4>\n<p>It&#8217;s time for implementing helper function to calculate source\/target position and color as well.<\/p>\n<pre class=\"lang:default decode:true \">calculateInstanceSourcePositions(attribute) {\r\n  const {data, getSourcePosition, getTargetPosition} = this.props;\r\n  const {value, size} = attribute;\r\n  let i = 0;\r\n  for (const object of data) {\r\n    const sourcePosition = getSourcePosition(object);\r\n    value[i + 0] = sourcePosition[0];\r\n    value[i + 1] = sourcePosition[1];\r\n    value[i + 2] = 0;\r\n    i += size;\r\n  }\r\n}\r\n\r\ncalculateInstanceTargetPositions(attribute) {\r\n  const {data, getSourcePosition, getTargetPosition} = this.props;\r\n  const {value, size} = attribute;\r\n  let i = 0;\r\n  for (const object of data) {\r\n    const targetPosition = getTargetPosition(object);\r\n    value[i + 0] = targetPosition[0];\r\n    value[i + 1] = targetPosition[1];\r\n    value[i + 2] = 0;\r\n    i += size;\r\n  }\r\n}<\/pre>\n<p>It&#8217;s not easy to understand if you&#8217;re not familiar WebGL or OpenGL in general. The main idea is to create array for each attribute (in vertex shader file)<\/p>\n<pre class=\"lang:default decode:true\">const sourcePosition = getSourcePosition(object);\r\nvalue[i + 0] = sourcePosition[0];\r\nvalue[i + 1] = sourcePosition[1];\r\nvalue[i + 2] = 0;<\/pre>\n<p>We get source position. get longitude and latitude which stand for\u00a0sourcePosition[0] and\u00a0sourcePosition[1], then passing to value array. Please z = 0, because it&#8217;s on earth ground.<\/p>\n<p>It&#8217;s hacky solution because we can&#8217;t pass our object from javascript directly into vertex.glsl. The common approach is using array to pass long\/lat indirectly and processing those data later. Actually, we could pass struct, but at this time, I won&#8217;t mention it.<\/p>\n<h4>Calculate colors vec4<\/h4>\n<pre class=\"lang:default decode:true \">calculateInstanceSourceColors(attribute) {\r\n  const {data, getSourceColor} = this.props;\r\n  const {value, size} = attribute;\r\n  let i = 0;\r\n  for (const object of data) {\r\n    const color = getSourceColor(object) || DEFAULT_COLOR;\r\n    value[i + 0] = color[0];\r\n    value[i + 1] = color[1];\r\n    value[i + 2] = color[2];\r\n    value[i + 3] = isNaN(color[3]) ? DEFAULT_COLOR[3] : color[3];\r\n    i += size;\r\n  }\r\n}\r\n\r\ncalculateInstanceTargetColors(attribute) {\r\n  const {data, getTargetColor} = this.props;\r\n  const {value, size} = attribute;\r\n  let i = 0;\r\n  for (const object of data) {\r\n    const color = getTargetColor(object) || DEFAULT_COLOR;\r\n    value[i + 0] = color[0];\r\n    value[i + 1] = color[1];\r\n    value[i + 2] = color[2];\r\n    value[i + 3] = isNaN(color[3]) ? DEFAULT_COLOR[3] : color[3];\r\n    i += size;\r\n  }\r\n}<\/pre>\n<p>We do same philosophy with color as well.<\/p>\n<h4>Layer.draw()<\/h4>\n<pre class=\"lang:default decode:true\">draw({uniforms}) {\r\n  const {gl} = this.context;\r\n  const {trailLength, currentTime, timestamp} = this.props;\r\n  console.log(currentTime);\r\n  this.state.model.render(Object.assign({}, uniforms, {\r\n    trailLength,\r\n    currentTime,\r\n    timestamp\r\n  }));\r\n}<\/pre>\n<p>Draw layer and passing our data uniform into shader file is self-explanatory. We also pass trailLength, currentTime, timestamp as uniform too. We will use it later, for animation \ud83e\udd17<\/p>\n<h3>5.5\u00a0GLSL (OpenGL Shading Language)<\/h3>\n<p><img class=\"aligncenter\" src=\"https:\/\/i0.wp.com\/graytotebox.com\/wp-content\/uploads\/2014\/02\/braceyourself.jpg?resize=376%2C282\" width=\"376\" height=\"282\" data-recalc-dims=\"1\" \/><\/p>\n<p>If you don&#8217;t have basic knowledge about GLSL, feels free to skip this section.<\/p>\n<p>GLSLis a high-level shading language with a syntax based on the C programming language. Give developers more direct control of the graphics pipeline without having to use ARB assembly language or hardware-specific languages.<\/p>\n<h4>flight-layer-vertex.glsl<\/h4>\n<pre class=\"lang:default decode:true\">#define SHADER_NAME flight-layer-vertex-shader\r\n\r\nconst float N = 49.0;\r\n\r\nattribute vec3 positions;\r\nattribute vec4 instanceSourceColors;\r\nattribute vec4 instanceTargetColors;\r\nattribute vec3 instanceSourcePositions;\r\nattribute vec3 instanceTargetPositions;\r\nattribute vec3 instancePickingColors;\r\n\r\nuniform float opacity;\r\nuniform float renderPickingBuffer;\r\nuniform float currentTime;\r\nuniform float trailLength;\r\nuniform float timestamp;\r\n\r\nvarying float vTime;\r\nvarying vec4 vColor;\r\n\r\n\r\nfloat paraboloid(vec2 source, vec2 target, float ratio) {\r\n\r\n  vec2 x = mix(source, target, ratio);\r\n  vec2 center = mix(source, target, 0.5);\r\n\r\n  float dSourceCenter = distance(source, center);\r\n  float dXCenter = distance(x, center);\r\n  return (dSourceCenter + dXCenter) * (dSourceCenter - dXCenter);\r\n}\r\n\r\nvoid main(void) {\r\n\r\n  \/\/ 1\r\n  vec2 source = preproject(instanceSourcePositions.xy);\r\n  vec2 target = preproject(instanceTargetPositions.xy);\r\n  \r\n  \/\/ 2\r\n  float segmentRatio = smoothstep(0.0, 1.0, positions.x \/ N);\r\n\r\n  \/\/ 3\r\n  float vertex_height = paraboloid(source, target, segmentRatio);\r\n  if (vertex_height &lt; 0.0) vertex_height = 0.0;\r\n  vec3 p = vec3(\r\n    \/\/ xy: linear interpolation of source &amp; target\r\n    mix(source, target, segmentRatio),\r\n    \/\/ z: paraboloid interpolate of source &amp; target\r\n    sqrt(vertex_height)\r\n  );\r\n\r\n  \/\/ 4\r\n  \/\/ the magic de-flickering factor\r\n  float _timestamp = (positions.x * 15.0) \/ 2000.0;\r\n  vec4 shift = vec4(0., 0., mod(_timestamp, trailLength) * 1e-4, 0.);\r\n  gl_Position = project(vec4(p, 1.0)) + shift;\r\n\r\n  \/\/ Color\r\n  vColor = mix(instanceSourceColors, instanceTargetColors, segmentRatio) \/ 255.;\r\n\r\n  \/\/ 5\r\n  vTime = 1.0 - (currentTime - _timestamp) \/ trailLength;\r\n}<\/pre>\n<ol>\n<li><a href=\"https:\/\/uber.github.io\/deck.gl\/#\/documentation\/advanced-topics\/coordinate-systems\">preproject<\/a><strong>:\u00a0<\/strong>All positions must be passed through the\u00a0preproject\u00a0function (available both in JavaScript and GLSL) to convert non-linear web-mercator coordinates to linear Mercator &#8220;world&#8221; or &#8220;pixel&#8221; coordinates, that can be passed to the projection matrix. At this time, we convert long\/lat coordinate to pixel in our webview.<\/li>\n<li><a href=\"https:\/\/www.khronos.org\/registry\/OpenGL-Refpages\/gl4\/html\/smoothstep.xhtml\">smoothstep<\/a>\u00a0is built-in method in OpenGL.\u00a0perform Hermite interpolation between two values. The segmentRatio depends on index of segment. So it&#8217;s perfect time to get value from <strong>positions<\/strong> we created before.<\/li>\n<li>We implement paraboloid to calculate the height of parabola.<\/li>\n<\/ol>\n<p><img class=\" wp-image-4433 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_25-300x207.jpg?resize=800%2C552\" alt=\"\" width=\"800\" height=\"552\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_25.jpg?resize=300%2C207&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_25.jpg?resize=768%2C531&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_25.jpg?resize=1024%2C708&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_25.jpg?w=1231&amp;ssl=1 1231w\" sizes=\"(max-width: 800px) 100vw, 800px\" data-recalc-dims=\"1\" \/><\/p>\n<p style=\"text-align: center;\">Illustration each segment in parabola curve<\/p>\n<p>\u00a0 \u00a0 4. Calculate the shift depend on currentTime, then passing to gl_Position.<\/p>\n<p>5. vTime is varying variable will pass to fragment file. We calculate the time has been passed.<\/p>\n<h4>glLineWidth problem<\/h4>\n<p>Do you notice the width of flightLayer is too slim? I tried to put <strong>gl.widthLine(100)<\/strong> in draw() func. It didn&#8217;t work unfortunately. It takes me few hours to understand why <strong>gl.lineWidth<\/strong> didn&#8217;t work. Here is <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/API\/WebGLRenderingContext\/lineWidth\">problem<\/a>.<\/p>\n<p><img class=\" wp-image-4432 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_23-300x80.jpg?resize=521%2C139\" alt=\"\" width=\"521\" height=\"139\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_23.jpg?resize=300%2C80&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_23.jpg?resize=768%2C205&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_23.jpg?resize=1024%2C273&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_23.jpg?w=1416&amp;ssl=1 1416w\" sizes=\"(max-width: 521px) 100vw, 521px\" data-recalc-dims=\"1\" \/><\/p>\n<p><img class=\" wp-image-4431 aligncenter\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_24-300x91.jpg?resize=498%2C151\" alt=\"\" width=\"498\" height=\"151\" srcset=\"https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_24.jpg?resize=300%2C91&amp;ssl=1 300w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_24.jpg?resize=768%2C233&amp;ssl=1 768w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_24.jpg?resize=1024%2C311&amp;ssl=1 1024w, https:\/\/i0.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_24.jpg?w=1398&amp;ssl=1 1398w\" sizes=\"(max-width: 498px) 100vw, 498px\" data-recalc-dims=\"1\" \/><\/p>\n<p>We have backup plan to implement the width line, by drawing a rectangle with height is width line. I won&#8217;t cover it.<\/p>\n<h4>flight-layer-fragment.glsl<\/h4>\n<p>After finished vertex.glsh, we should move to fragment. The fragment is essential file, the main purpose is handling all color mapping for each vertex.<\/p>\n<pre class=\"lang:default decode:true \">#define SHADER_NAME flight-layer-fragment-shader\r\n\r\n#ifdef GL_ES\r\nprecision highp float;\r\n#endif\r\n\r\nvarying float vTime;\r\nvarying vec4 vColor;\r\n\r\nvoid main(void) {\r\n  if (vTime &gt; 1.0 || vTime &lt; 0.0) {\r\n    discard;\r\n  }\r\n  gl_FragColor = vec4(vColor.rgb, vColor.a * vTime);\r\n}\r\n<\/pre>\n<p>Please notice, vTime is passed from vertex.glsl. At this time, we will turn it by mutipling with color&#8217;s alpha.<\/p>\n<p><img class=\" wp-image-4436 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_27-300x264.jpg?resize=576%2C507\" alt=\"\" width=\"576\" height=\"507\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_27.jpg?resize=300%2C264&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_27.jpg?resize=768%2C675&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/03\/deck.gl_27.jpg?w=855&amp;ssl=1 855w\" sizes=\"(max-width: 576px) 100vw, 576px\" data-recalc-dims=\"1\" \/><\/p>\n<p>Look cool right? \ud83d\ude0d<\/p>\n<h4>Tween timer<\/h4>\n<p>If you try running example at this time, you only see the fully parabola over the map. Now we&#8217;re adding timer to achieve animation. Navigate to startTweenTimer() in main.js<\/p>\n<pre class=\"lang:default decode:true\">startTweenTimer() {\r\n  this._tween = new TWEEN.Tween({time: 0})\r\n        .to({time: 3600}, 120000)\r\n        .onUpdate((data)=&gt;{\r\n          this.setState({\r\n            time: data\r\n          })\r\n        })\r\n        .repeat(Infinity).start()\r\n  this.animate()\r\n},\r\n\r\nanimate(time) {\r\n  window.requestAnimationFrame(this.animate)\r\n  TWEEN.update();\r\n},<\/pre>\n<p>then<\/p>\n<pre class=\"lang:default decode:true\">componentWillReceiveProps: function(nextProps) {\r\n  const { mapMode } = this.props\r\n  const { isStartedTimer } = this.state\r\n\r\n  if ((nextProps.mapMode === MapMode.FLIGHT || nextProps.mapMode === MapMode.TAXI ) &amp;&amp;\r\n      nextProps.mapMode !== mapMode &amp;&amp; isStartedTimer === false) {\r\n    this.startTweenTimer()\r\n    this.setState({\r\n      isStartedTimer: true\r\n    })\r\n  }\r\n},<\/pre>\n<p>It triggers tweenTimer automatically whenever we select new mapMode. I also have if condition to prevent duplicated fired.<\/p>\n<h4>One more thing<\/h4>\n<p>Notify attributeManager in flight-layer.js to invalidate all vertex, and re-render with new currentTime attribute.<\/p>\n<pre class=\"lang:default decode:true\">updateState({props, changeFlags: {dataChanged}}) {\r\n   if (dataChanged) {\r\n     this.state.attributeManager.invalidateAll();\r\n   }\r\n }<\/pre>\n<h3>5.6 Finally<\/h3>\n<p><img class=\"aligncenter\" src=\"https:\/\/i0.wp.com\/img.memesuper.com\/21b10a8a10c5427cec63e3ed65d9d77e_leonardo-dicaprio-cheers-meme-memes-on-success_600-400.jpeg?w=850&#038;ssl=1\" data-recalc-dims=\"1\" \/><\/p>\n<p>Time for going back to terminal and type holy spell.<\/p>\n<pre class=\"lang:default decode:true\">\/\/ To make sure you've installed packages correctly\r\nyarn install\r\nyarn start<\/pre>\n<p>[su_youtube url=&#8221;https:\/\/youtu.be\/kgcJ0rftIUA&#8221;]<\/p>\n<p>Feels free to switch between each map mode. I belive you will be impressed what we&#8217;ve done \ud83d\udcaf<\/p>\n<h2>7. Source code<\/h2>\n<p>I published all source in my github account. Feels free to clone and create contribution if you have any great idea \ud83d\ude09<\/p>\n<p>[su_button url=&#8221;https:\/\/github.com\/NghiaTranUIT\/data-visualization-deck-gl&#8221; target=&#8221;blank&#8221; style=&#8221;flat&#8221; size=&#8221;6&#8243; icon=&#8221;icon: github-alt&#8221;]Data Visualization &#8211; Github[\/su_button]<\/p>\n<h2>7. What things are we forgetting?<\/h2>\n<p>If you have bright eyes, you might notice that all flights were flew and land at destination airport at the same time, whatever the distance of airport is far away or near. It looks unreal, right? \ud83e\udd14<\/p>\n<p>Yeah, I did it on my purpose, it&#8217;s time for your experiment, your exercise \ud83e\udd17<\/p>\n<pre class=\"lang:default decode:true \">Given flight_data.csv with air_time field. Assumption the velecity of airplain is 999km\/h.\r\nHow do we improve flight-layer-vertex.glsl to simulate it ?\r\n\r\n\/\/ Hint: Take a look at\r\n\/\/ vec4 shift = vec4(0., 0., mod(_timestamp, trailLength) * 1e-4, 0.).\r\n\/\/ It's all you need \ud83d\udc4d<\/pre>\n<h2>8. Where&#8217;s go from now?<\/h2>\n<p>If you like and have impression how we visualize the huge data into the map. Don&#8217;t be hostile to take a look at <a href=\"http:\/\/deck.gl\">Deck.gl<\/a>. Pick your favorite data at Kaggle.<\/p>\n<p>Learning and understanding GLSL is really useful if you want to take directly to GPU.<\/p>\n<p>Hope you have greate\u00a0time to ignite your lazy brain \u00a0\ud83d\udc7b<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/03\/osman-rana-193635.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Wed, 15 Mar 2017 18:08:58 +0000","created_by":1,"updated_at":"Wed, 15 Mar 2017 21:41:10 +0000","updated_by":1,"published_at":"Wed, 15 Mar 2017 18:08:58 +0000","published_by":1},{"id":4453,"title":"Deck.gl - Taxi Trip Visualization","slug":"temp-slug-18","markdown":"\nHi everyone.\n\nI\u2019ve received a lot of request to continue writing part-2. So why not \ud83e\udd17\n\ntl;dr\n\nIf you don\u2019t have patient, here is result we will get in this tutorial\n\n[]\n\nIn next couple mins, we\u2019re trying to manipulate taxi trip on map. The interesting\u00a0part present taxi segment from origin to destination in realtime.\n\n\u00a0\n\nTechnologies\n\n\u00a0\n\nPrepare data\n\nGoogle Direction API\n\nTaxi trip NY\n\nPre-processing dataset\n\nFinal dataset\n\n\u00a0\n\nTrip Layer\n\n\u00a0\n\nReminder\n\nStarter-kit\n\n\n## 3. Implement Taxi Layer\n\n### 3.1 Overall\n\nBefore going to implement TaxiLayer. It would be better if we know how it looks like in invadually taxi line.\n\nAs you can see, the taxi line is a curve. Actually, it\u2019s connection of each line segment. In overall prespective, it looks like the curve.\n\n\u00a0\n\n\u00a0\n\nGLSL Model\n\nTween time\n\nFirst action\n\nBuilding model\n\n\u00a0\n\n\u00a0\n\n\n","html":"<p>Hi everyone.<\/p>\n<p>I&#8217;ve received a lot of request to continue writing part-2. So why not \ud83e\udd17<\/p>\n<p>tl;dr<\/p>\n<p>If you don&#8217;t have patient, here is result we will get in this tutorial<\/p>\n<p>[]<\/p>\n<p>In next couple mins, we&#8217;re trying to manipulate taxi trip on map. The interesting\u00a0part present taxi segment from origin to destination in realtime.<\/p>\n<p>&nbsp;<\/p>\n<p>Technologies<\/p>\n<p>&nbsp;<\/p>\n<p>Prepare data<\/p>\n<p>Google Direction API<\/p>\n<p>Taxi trip NY<\/p>\n<p>Pre-processing dataset<\/p>\n<p>Final dataset<\/p>\n<p>&nbsp;<\/p>\n<p>Trip Layer<\/p>\n<p>&nbsp;<\/p>\n<p>Reminder<\/p>\n<p>Starter-kit<\/p>\n<h2>3. Implement Taxi Layer<\/h2>\n<h3>3.1 Overall<\/h3>\n<p>Before going to implement TaxiLayer. It would be better if we know how it looks like in invadually taxi line.<\/p>\n<p>As you can see, the taxi line is a curve. Actually, it&#8217;s connection of each line segment. In overall prespective, it looks like the curve.<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n<p>GLSL Model<\/p>\n<p>Tween time<\/p>\n<p>First action<\/p>\n<p>Building model<\/p>\n<p>&nbsp;<\/p>\n<p>&nbsp;<\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/04\/osman-rana-206191.jpg","featured":0,"page":0,"status":"draft","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Mon, 10 Apr 2017 16:59:59 +0000","created_by":1,"updated_at":"Mon, 10 Apr 2017 16:59:59 +0000","updated_by":1,"published_at":"","published_by":1},{"id":4465,"title":"Uber macOS","slug":"uber-macos","markdown":"\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/icon_uber.png?resize=256%2C256&ssl=1)\n\n\n# Uber macOS\n\n\u00a0\n\nHello my fellows,\n\nToday I\u2019m delighted to announce an astonishing hobby project which I\u2019m working on in spare time \ud83d\udd25\n\nI admit I\u2019m a\u00a0lazy boy. To embrace to time-consume tasks or general obstacles, I usually find out the efficient way to accomplish it. I remembered the day I was in Hanoi, at Coffee House. After a long day hard working, I decided to go home.\n\nI was struggled to get a Uber\u00a0car. All of the things\u00a0I need are:\n\n1. Grab a\u00a0phone from my pocket.\n2. Find an app.\n3. Open Uber and waiting\u00a0for initialization.\n4. Select the\u00a0desired destination.\n5. Waiting \u2026 \ud83d\ude2a\n6. Waiting \u2026\n7. An Uber guy accepts my request.\n8. Waiting \u2026\n9. Waiting for his call for pickup confirmation.\n10. Check his position\u00a0frequency.\n11. Waiting for a\u00a0miracle.\n12. Finally, after little time trying to open the phone, check, and close the app. I get into a car.\n\nIt often drives me nuts \ud83d\ude2a.\n\n\ud83d\ude97 At the end of a trip, an unexpected\u00a0idea pulled out from my head, I realized Uber APIs \ud83d\ude80 had been published publicly since a year. I made a decision to port it to macOS flatform by myself.\n\nAnd now, it\u2019s almost done : >\n\n\n## Check it out\n\n\u2764\ufe0f\u00a0[Homepage](http:\/\/uber.megaton.xyz)\u00a0& \u00a0[Github](https:\/\/github.com\/NghiaTranUIT\/Unofficial-Uber-macOS)\u00a0\ud83e\udd17\n\n\n## Screenshots\n\n![](https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/uber_screenshot.jpg?resize=821%2C514&ssl=1)\n\n\n","html":"<p><img class=\"size-full wp-image-4471 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/icon_uber.png?resize=256%2C256&#038;ssl=1\" alt=\"\" width=\"256\" height=\"256\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/icon_uber.png?w=256&amp;ssl=1 256w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/icon_uber.png?resize=150%2C150&amp;ssl=1 150w\" sizes=\"(max-width: 256px) 100vw, 256px\" data-recalc-dims=\"1\" \/><\/p>\n<h1 style=\"text-align: center;\">Uber macOS<\/h1>\n<p>&nbsp;<\/p>\n<p>Hello my fellows,<\/p>\n<p>Today I&#8217;m delighted to announce an astonishing hobby project which I&#8217;m working on in spare time \ud83d\udd25<\/p>\n<p>I admit I&#8217;m a\u00a0lazy boy. To embrace to time-consume tasks or general obstacles, I usually find out the efficient way to accomplish it. I remembered the day I was in Hanoi, at Coffee House. After a long day hard working, I decided to go home.<\/p>\n<p>I was struggled to get a Uber\u00a0car. All of the things\u00a0I need are:<\/p>\n<ol>\n<li>Grab a\u00a0phone from my pocket.<\/li>\n<li>Find an app.<\/li>\n<li>Open Uber and waiting\u00a0for initialization.<\/li>\n<li>Select the\u00a0desired destination.<\/li>\n<li>Waiting &#8230; \ud83d\ude2a<\/li>\n<li>Waiting &#8230;<\/li>\n<li>An Uber guy accepts my request.<\/li>\n<li>Waiting &#8230;<\/li>\n<li>Waiting for his call for pickup confirmation.<\/li>\n<li>Check his position\u00a0frequency.<\/li>\n<li>Waiting for a\u00a0miracle.<\/li>\n<li>Finally, after little time trying to open the phone, check, and close the app. I get into a car.<\/li>\n<\/ol>\n<p>It often drives me nuts \ud83d\ude2a.<\/p>\n<p>\ud83d\ude97 At the end of a trip, an unexpected\u00a0idea pulled out from my head, I realized Uber APIs \ud83d\ude80 had been published publicly since a year. I made a decision to port it to macOS flatform by myself.<\/p>\n<p>And now, it&#8217;s almost done : &gt;<\/p>\n<h2>Check it out<\/h2>\n<p>\u2764\ufe0f\u00a0<a href=\"http:\/\/uber.megaton.xyz\">Homepage<\/a>\u00a0&amp; \u00a0<a href=\"https:\/\/github.com\/NghiaTranUIT\/Unofficial-Uber-macOS\">Github<\/a>\u00a0\ud83e\udd17<\/p>\n<h2>Screenshots<\/h2>\n<p><img class=\"wp-image-4472 aligncenter\" src=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/uber_screenshot.jpg?resize=821%2C514&#038;ssl=1\" alt=\"\" width=\"821\" height=\"514\" srcset=\"https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/uber_screenshot.jpg?resize=300%2C188&amp;ssl=1 300w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/uber_screenshot.jpg?resize=768%2C480&amp;ssl=1 768w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/uber_screenshot.jpg?resize=1024%2C640&amp;ssl=1 1024w, https:\/\/i1.wp.com\/nghiatran.me\/wp-content\/uploads\/2017\/07\/uber_screenshot.jpg?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 821px) 100vw, 821px\" data-recalc-dims=\"1\" \/><\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2017\/07\/atlas-green-1507.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Thu, 27 Jul 2017 17:12:51 +0000","created_by":1,"updated_at":"Tue, 01 Aug 2017 17:36:30 +0000","updated_by":1,"published_at":"Thu, 27 Jul 2017 17:12:51 +0000","published_by":1},{"id":4497,"title":"Proxyman \ud83d\ude0d","slug":"proxyman-%f0%9f%98%8d","markdown":"\nHey guys,\n\nI\u2019m so excited to introduce you Proxyman ([https:\/\/proxyman.app](https:\/\/proxyman.app)), a modern and intuitive HTTP Proxy app for macOS \u2665\ufe0f\n\nProxyman is still my best side project I\u2019ve worked on \u26a1\ufe0f\n\n\n## Features\n\n- \ud83d\ude0d Intercept HTTP\/HTTPS (SSL) requests from your macbook, simulator and remote devices \ud83d\udcf1.\n- \ud83e\udd8b Modern and intuitive UI.\n- \u2b50\ufe0f Exclusively built for macOS.\n- \ud83d\udc51 Comprehensive debugging tools: Compose, Repeat, \u2026\n- \ud83d\udc68\u200d\ud83d\udcbb Customizable workspace.\n- \u2705 New feature, new improvement app every weeks.\n- \ud83d\udea2 100% free.\n\n\n## Download\n\nDownload at Proxyman\u2019s landing page ([https:\/\/proxyman.app](https:\/\/proxyman.app))\n\n\n## Github\n\nIf you have any questions or just found a bug \ud83d\udc1e, give me a shot at\u00a0[https:\/\/github.com\/ProxymanApp\/Proxyman](https:\/\/github.com\/ProxymanApp\/Proxyman)\n\n![](https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?resize=850%2C549&ssl=1)\n\n\n","html":"<p>Hey guys,<\/p>\n<p>I&#8217;m so excited to introduce you Proxyman (<a href=\"https:\/\/proxyman.app\">https:\/\/proxyman.app<\/a>), a modern and intuitive HTTP Proxy app for macOS \u2665\ufe0f<\/p>\n<p>Proxyman is still my best side project I&#8217;ve worked on \u26a1\ufe0f<\/p>\n<h2>Features<\/h2>\n<ul>\n<li>\ud83d\ude0d Intercept HTTP\/HTTPS (SSL) requests from your macbook, simulator and remote devices \ud83d\udcf1.<\/li>\n<li>\ud83e\udd8b Modern and intuitive UI.<\/li>\n<li>\u2b50\ufe0f Exclusively built for macOS.<\/li>\n<li>\ud83d\udc51 Comprehensive debugging tools: Compose, Repeat, &#8230;<\/li>\n<li>\ud83d\udc68\u200d\ud83d\udcbb Customizable workspace.<\/li>\n<li>\u2705 New feature, new improvement app every weeks.<\/li>\n<li>\ud83d\udea2 100% free.<\/li>\n<\/ul>\n<h2>Download<\/h2>\n<p>Download at Proxyman&#8217;s landing page (<a href=\"https:\/\/proxyman.app\">https:\/\/proxyman.app<\/a>)<\/p>\n<h2>Github<\/h2>\n<p>If you have any questions or just found a bug \ud83d\udc1e, give me a shot at\u00a0<a href=\"https:\/\/github.com\/ProxymanApp\/Proxyman\">https:\/\/github.com\/ProxymanApp\/Proxyman<\/a><\/p>\n<p><img class=\"alignnone size-full wp-image-4498\" src=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?resize=850%2C549&#038;ssl=1\" alt=\"\" width=\"850\" height=\"549\" srcset=\"https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?w=2322&amp;ssl=1 2322w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?resize=300%2C194&amp;ssl=1 300w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?resize=768%2C496&amp;ssl=1 768w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?resize=1024%2C661&amp;ssl=1 1024w, https:\/\/i2.wp.com\/nghiatran.me\/wp-content\/uploads\/2019\/04\/main.png?w=1700&amp;ssl=1 1700w\" sizes=\"(max-width: 850px) 100vw, 850px\" data-recalc-dims=\"1\" \/><\/p>\n","image":"https:\/\/nghiatran.me\/wp-content\/uploads\/2019\/04\/humphrey-muleba-1468522-unsplash.jpg","featured":0,"page":0,"status":"published","language":"en_US","meta_title":null,"meta_description":null,"author_id":1,"created_at":"Fri, 05 Apr 2019 16:21:31 +0000","created_by":1,"updated_at":"Fri, 05 Apr 2019 16:22:21 +0000","updated_by":1,"published_at":"Fri, 05 Apr 2019 16:21:31 +0000","published_by":1}],"tags":[{"id":59,"name":"charles","slug":"charles","description":""},{"id":60,"name":"debug","slug":"debug","description":""},{"id":49,"name":"Filter","slug":"filter","description":""},{"id":53,"name":"google","slug":"google","description":""},{"id":61,"name":"macos","slug":"macos","description":""},{"id":54,"name":"Martial design","slug":"martial-design","description":""},{"id":51,"name":"media","slug":"media","description":""},{"id":57,"name":"proxy","slug":"proxy","description":""},{"id":58,"name":"proxying","slug":"proxying","description":""},{"id":52,"name":"video","slug":"video-2","description":""}],"posts_tags":[{"tag_id":49,"post_id":631},{"tag_id":51,"post_id":631},{"tag_id":52,"post_id":631},{"tag_id":49,"post_id":664},{"tag_id":51,"post_id":664},{"tag_id":52,"post_id":664},{"tag_id":49,"post_id":758},{"tag_id":53,"post_id":758},{"tag_id":54,"post_id":758},{"tag_id":51,"post_id":758},{"tag_id":52,"post_id":758},{"tag_id":59,"post_id":4497},{"tag_id":60,"post_id":4497},{"tag_id":61,"post_id":4497},{"tag_id":57,"post_id":4497},{"tag_id":58,"post_id":4497}],"users":[{"id":1,"slug":"nghiatran","bio":"","website":"http:\/\/www.nghiatran.me","created_at":"Sat, 05 Nov 2016 09:55:21 +0000","created_by":1,"email":"vinhnghiatran@gmail.com","name":"nghiatran"},{"id":2,"slug":"pixelwars","bio":"","website":"","created_at":"Mon, 07 Nov 2016 04:14:32 +0000","created_by":1,"email":"mehmetsali@gmail.com","name":"pixelwars"}]},"meta":{"exported_on":"Sat, 06 Apr 2019 07:11:20 +0000","version":"000"}}